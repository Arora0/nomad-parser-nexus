import numpy as np            # pylint: disable=unused-import
import typing                 # pylint: disable=unused-import
from nomad.metainfo import (  # pylint: disable=unused-import
    MSection, MCategory, Category, Package, Quantity, Section, SubSection, SectionProxy,
    Reference, MEnum)
#from nomad.metainfo.legacy import LegacyDefinition
#from nomad.datamodel.metainfo.nxobject import NXobject

{% for dependency in pkg.dependencies %}
{{ format_package_import(dependency) }}
{%- endfor %}

m_package = Package(
    name='{{ pkg.name }}',
    description='{{ pkg.description }}')

class NXobject(MSection):
    pass

class NXtranslation(NXobject):
    pass

class NXorientation(NXobject):
    pass

class NXcsg(NXobject):
    pass

class NX_FLOAT(NXobject):
    pass

class NX_BINARY(NXobject):
    pass

class NX_BOOLEAN(NXobject):
    pass

class NX_CHAR(NXobject):
    pass

class NX_DATE_TIME(NXobject):
    pass

class NX_INT(NXobject):
    pass

class NX_NUMBER(NXobject):
    pass

class NX_POSINT(NXobject):
    pass

class NX_UINT(NXobject):
    pass

{% for category in order_categories(pkg.category_definitions) %}

class {{ category.name }}(MCategory):
    {% if category.description is not none -%}
    '''
    {{ format_description(category.description, indent=1) }}
    '''
    {%- endif %}

    m_def = Category(
        {%- if category.aliases | length > 0 %}
        aliases=['{{ category.aliases[0] }}'],
        {%- endif -%}
        {%- if category.categories | length > 0 %}
        categories=[{{ format_definition_refs(pkg, category.categories) }}],
        {%- endif -%})
{% endfor -%}

{% for section in pkg.section_definitions %}

class {{ section.name }}({%- if section.extends_base_section -%}{{ format_definition_refs(pkg, section.base_sections)}}{%- else -%}MSection{%- endif -%}):
    {% if section.description is not none -%}
    '''
    {{ format_description(section.description, indent=1) }}
    '''
    {% endif %}
    m_def = Section(
        {%- if section.aliases | length > 0 %}
        aliases=['{{ section.aliases[0] }}'],
        {%- endif %}
        validate=False{%- if section.extends_base_section -%},
        extends_base_section=True{%- endif -%})
    {% for quantity in section.quantities %}
    {{ quantity.name }} = Quantity(
        type={{ format_type(pkg, quantity.type) }},
        shape={{ quantity.shape }}
        {%- if quantity.unit is not none -%},
        unit={{ format_unit(quantity.unit) }}
        {%- endif -%}
        {%- if quantity.description is not none -%},
        description='''
        {{ format_description(quantity.description, indent=2) }}
        '''{%- endif -%}
        {%- if quantity.default is not none -%},
        default={{ format_default(quantity.default) }}
        {%- endif -%}
        {%- if quantity.categories | length > 0 -%},
        categories=[{{ format_definition_refs(pkg, quantity.categories) }}]
        {%- endif -%},
        {%- if quantity.a_search is defined %}
        a_search=Search()
        {%- endif -%})
    {% endfor -%}
    {%- for sub_section in section.sub_sections %}
{{ format_sub_section(pkg, sub_section, indent=1) }}
    {% endfor -%}
{%- endfor %}

m_package.__init_metainfo__()
#{{- format_aliases(pkg) -}}
