import numpy as np            # pylint: disable=unused-import
import typing                 # pylint: disable=unused-import
from nomad.metainfo import (  # pylint: disable=unused-import
    MSection, MCategory, Category, Package, Quantity, Section, SubSection, SectionProxy,
    Reference, MEnum)
#from nomad.metainfo.legacy import LegacyDefinition
#from nomad.datamodel.metainfo.nxobject import NXobject




m_package = Package(
    name='NEXUS',
    description='None')

class NXobject(MSection):
    pass

class NXtranslation(NXobject):
    pass

class NXorientation(NXobject):
    pass

class NXcsg(NXobject):
    pass

class NX_FLOAT(NXobject):
    pass

class NX_BINARY(NXobject):
    pass

class NX_BOOLEAN(NXobject):
    pass

class NX_CHAR(NXobject):
    pass

class NX_DATE_TIME(NXobject):
    pass

class NX_INT(NXobject):
    pass

class NX_NUMBER(NXobject):
    pass

class NX_POSINT(NXobject):
    pass

class NX_UINT(NXobject):
    pass



class NXcollection(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXcollection',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_ignoreExtraGroups = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='true',)

    nxp_ignoreExtraFields = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='true',)

    nxp_ignoreExtraAttributes = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='true',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                An unvalidated set of terms, such as the description of a beam line.
        Use :ref:`NXcollection` to gather together any set of terms.                 The
        original suggestion is to use this as a container                  class for the
        description of a beamline.                                  For NeXus validation,
        :ref:`NXcollection` will always generate                  a warning since it is
        always an optional group.                   Anything (groups, fields, or
        attributes) placed in                 an :ref:`NXcollection` group will not be
        validated.
        https://manual.nexusformat.org/classes/base_classes/NXcollection.html#nxcollection
        .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXcollection.html#nxcollection',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)


class NXslit(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXslit',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                A simple slit.                                  For more complex geometries,
        :ref:`NXaperture` should be used.
        https://manual.nexusformat.org/classes/base_classes/NXslit.html#nxslit .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXslit.html#nxslit',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_depends_on(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='depends_on',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CHAR',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Points to the path of the last element in the geometry chain that places
                this object in space.                          When followed through that
                chain is supposed to end at an element depending
                on "." i.e. the origin of the coordinate system.
                If desired the location of the slit can also be described relative to
                an NXbeam, which will allow a simple description of a non-centred slit.
                https://manual.nexusformat.org/classes/base_classes/NXslit.html#nxslit-depends-on-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXslit.html#nxslit-depends-on-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_depends_on = SubSection(sub_section=nxp_depends_on.m_def,repeats=True)


    class nxp_x_gap(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='x_gap',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Size of the gap opening in the first dimension of the local
                coordinate system.
                https://manual.nexusformat.org/classes/base_classes/NXslit.html#nxslit-x-gap-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXslit.html#nxslit-x-gap-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_x_gap = SubSection(sub_section=nxp_x_gap.m_def,repeats=True)


    class nxp_y_gap(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='y_gap',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Size of the gap opening in the second dimension of the local
                coordinate system.
                https://manual.nexusformat.org/classes/base_classes/NXslit.html#nxslit-y-gap-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXslit.html#nxslit-y-gap-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_y_gap = SubSection(sub_section=nxp_y_gap.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXslit.html#nxslit-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXslit.html#nxslit-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXevent_data(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXevent_data',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                NXevent_data is a special group for storing data from neutron     detectors in
        event mode.  In this mode, the detector electronics     emits a stream of
        detectorID, timestamp pairs. With detectorID     describing the detector element
        in which the neutron was detected     and timestamp the timestamp at which the
        neutron event was     detected. In NeXus detectorID maps to event_id,
        event_time_offset     to the timestamp.

        As this kind of data is common at pulsed neutron     sources, the timestamp is
        almost always relative to the start of a     neutron pulse. Thus the pulse
        timestamp is recorded too together     with an index in the event_id,
        event_time_offset pair at which data for     that pulse starts. At reactor source
        the same pulsed data effect     may be achieved through the use of choppers or in
        stroboscopic     measurement setups.

        In order to make random access to timestamped data     faster there is an optional
        array pair of     cue_timestamp_zero and cue_index. The cue_timestamp_zero will
        contain courser timestamps then in the time array, say     every five minutes. The
        cue_index will then contain the     index into the event_id,event_time_offset pair
        of arrays for that     courser cue_timestamp_zero.
        https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data
        .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_event_time_offset(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='event_time_offset',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME_OF_FLIGHT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        A list of timestamps for each event as it comes in.
                https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-event-time-offset-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-event-time-offset-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_event_time_offset = SubSection(sub_section=nxp_event_time_offset.m_def,repeats=True)


    class nxp_event_id(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='event_id',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_DIMENSIONLESS',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        There will be extra information in the NXdetector to convert
                event_id to detector_number.
                https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-event-id-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-event-id-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_event_id = SubSection(sub_section=nxp_event_id.m_def,repeats=True)


    class nxp_event_time_zero(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='event_time_zero',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The time that each pulse started with respect to the offset
                https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-event-time-zero-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-event-time-zero-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_offset(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='offset',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            ISO8601
                https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-event-time-zero-offset-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-event-time-zero-offset-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_offset = SubSection(sub_section=nxp_offset.m_def,repeats=True)
    nxp_event_time_zero = SubSection(sub_section=nxp_event_time_zero.m_def,repeats=True)


    class nxp_event_index(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='event_index',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_DIMENSIONLESS',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The index into the event_time_offset, event_id pair for             the
                pulse occurring at the matching entry in event_time_zero.
                https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-event-index-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-event-index-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_event_index = SubSection(sub_section=nxp_event_index.m_def,repeats=True)


    class nxp_pulse_height(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='pulse_height',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_DIMENSIONLESS',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        If voltages from the ends of the detector are read out this
                is where they go. This list is for all events with information
                to attach to a particular pulse height. The information to
                attach to a particular pulse is located in events_per_pulse.
                https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-pulse-height-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-pulse-height-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_pulse_height = SubSection(sub_section=nxp_pulse_height.m_def,repeats=True)


    class nxp_cue_timestamp_zero(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='cue_timestamp_zero',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_DATE_TIME',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Timestamps matching the corresponding cue_index into the
                event_id, event_time_offset pair.
                https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-cue-timestamp-zero-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-cue-timestamp-zero-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_start(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-cue-timestamp-zero-start-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-cue-timestamp-zero-start-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start = SubSection(sub_section=nxp_start.m_def,repeats=True)
    nxp_cue_timestamp_zero = SubSection(sub_section=nxp_cue_timestamp_zero.m_def,repeats=True)


    class nxp_cue_index(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='cue_index',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Index into the event_id, event_time_offset pair matching the corresponding
                cue_timestamp.
                https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-cue-index-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-cue-index-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_cue_index = SubSection(sub_section=nxp_cue_index.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXpositioner(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXpositioner',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                A generic positioner such as a motor or piezo-electric transducer.
        https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner
        .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_name(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='name',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        symbolic or mnemonic name (one word)
                https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-name-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-name-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)


    class nxp_description(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='description',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        description of positioner
                https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-description-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-description-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)


    class nxp_value(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='value',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        best known value of positioner - need [n] as may be scanned
                https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-value-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-value-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_value = SubSection(sub_section=nxp_value.m_def,repeats=True)


    class nxp_raw_value(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='raw_value',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        raw value of positioner - need [n] as may be scanned
                https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-raw-value-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-raw-value-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_raw_value = SubSection(sub_section=nxp_raw_value.m_def,repeats=True)


    class nxp_target_value(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='target_value',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        targeted (commanded) value of positioner - need [n] as may be scanned
                https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-target-value-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-target-value-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_target_value = SubSection(sub_section=nxp_target_value.m_def,repeats=True)


    class nxp_tolerance(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='tolerance',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        maximum allowable difference between target_value and value
                https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-tolerance-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-tolerance-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_tolerance = SubSection(sub_section=nxp_tolerance.m_def,repeats=True)


    class nxp_soft_limit_min(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='soft_limit_min',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        minimum allowed limit to set value
                https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-soft-limit-min-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-soft-limit-min-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_soft_limit_min = SubSection(sub_section=nxp_soft_limit_min.m_def,repeats=True)


    class nxp_soft_limit_max(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='soft_limit_max',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        maximum allowed limit to set value
                https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-soft-limit-max-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-soft-limit-max-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_soft_limit_max = SubSection(sub_section=nxp_soft_limit_max.m_def,repeats=True)


    class nxp_velocity(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='velocity',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        velocity of the positioner (distance moved per unit time)
                https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-velocity-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-velocity-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_velocity = SubSection(sub_section=nxp_velocity.m_def,repeats=True)


    class nxp_acceleration_time(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='acceleration_time',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        time to ramp the velocity up to full speed
                https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-acceleration-time-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-acceleration-time-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_acceleration_time = SubSection(sub_section=nxp_acceleration_time.m_def,repeats=True)


    class nxp_controller_record(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='controller_record',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Hardware device record, e.g. EPICS process variable, taco/tango ...
                https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-controller-record-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-controller-record-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_controller_record = SubSection(sub_section=nxp_controller_record.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXtransformations(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXtransformations',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_ignoreExtraGroups = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='true',)

    nxp_ignoreExtraFields = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='true',)

    nxp_ignoreExtraAttributes = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='true',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                Collection of axis-based translations and rotations to describe a geometry.
        May also contain axes that do not move and therefore do not have a transformation
        type specified, but are useful in understanding coordinate frames within which
        transformations are done, or in documenting important directions, such as the
        direction of gravity.

        A nested sequence of transformations lists the translation and rotation steps
        needed to describe the position and orientation of any movable or fixed device.

        There will be one or more transformations (axes) defined by one or more fields
        for each transformation.  The all-caps name ``AXISNAME`` designates the
        particular axis generating a transformation (e.g. a rotation axis or a translation
        axis or a general axis).   The attribute ``units="NX_TRANSFORMATION"`` designates
        the                 units will be appropriate to the ``transformation_type``
        attribute:

        * ``NX_LENGTH`` for ``translation``                 * ``NX_ANGLE`` for
        ``rotation``                 * ``NX_UNITLESS`` for axes for which no
        transformation type is specified

        This class will usually contain all axes of a sample stage or goniometer or
        a detector.  The NeXus default McSTAS coordinate frame is assumed, but additional
        useful coordinate axes may be defined by using axes for which no transformation
        type has been specified.

        The entry point (``depends_on``) will be outside of this class and point to a
        field in here. Following the chain may also require following ``depends_on``
        links to transformations outside, for example to a common base table.  If
        a relative path is given, it is relative to the group enclosing the ``depends_on``
        specification.

        For a chain of three transformations, where :math:`T_1` depends on :math:`T_2`
        and that in turn depends on :math:`T_3`, the final transformation :math:`T_f` is

        .. math:: T_f = T_3 T_2 T_1

        In explicit terms, the transformations are a subset of affine transformations
        expressed as 4x4 matrices that act on homogeneous coordinates,
        :math:`w=(x,y,z,1)^T`.

        For rotation and translation,

        .. math:: T_r &= \\begin{pmatrix} R & o \\\\ 0_3 & 1 \\end{pmatrix} \\\\ T_t &=
        \\begin{pmatrix} I_3  & t + o \\\\ 0_3 & 1 \\end{pmatrix}

        where :math:`R` is the usual 3x3 rotation matrix, :math:`o` is an offset vector,
        :math:`0_3` is a row of 3 zeros, :math:`I_3` is the 3x3 identity matrix and
        :math:`t` is the translation vector.

        :math:`o` is given by the ``offset`` attribute, :math:`t` is given by the
        ``vector``                 attribute multiplied by the field value, and :math:`R`
        is defined as a rotation                 about an axis in the direction of
        ``vector``, of angle of the field value.

        NOTE                                  One possible use of ``NXtransformations`` is
        to define the motors and                 transformations for a diffractometer
        (goniometer).  Such use is mentioned                 in the ``NXinstrument`` base
        class.  Use one ``NXtransformations`` group                  for each
        diffractometer and name the group appropriate to the device.
        Collecting the motors of a sample table or xyz-stage in an NXtransformation
        group is equally possible.
        https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations
        .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_AXISNAME(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='AXISNAME',
        )
        nxp_nameType= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='any',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TRANSFORMATION',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='unbounded',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Units need to be appropriate for translation or rotation

                The name of this field is not forced.  The user is free to use any name
                that does not cause confusion.  When using more than one ``AXISNAME``
                field,                         make sure that each field name is unique in
                the same group, as required                         by HDF5.

                The values given should be the start points of exposures for the
                corresponding                         frames.  The end points should be
                given in ``AXISNAME_end``.
                https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_transformation_type(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='transformation_type',
            )
            nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='true',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            The transformation_type may be ``translation``, in which case the
                values are linear displacements along the axis, ``rotation``,
                in which case the values are angular rotations around the axis.

                If this attribute is omitted, this is an axis for which there
                is no motion to be specifies, such as the direction of gravity,
                or the direction to the source, or a basis vector of a
                coordinate frame.
                https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-transformation-type-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-transformation-type-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: translation,rotation''',
                default='translation,rotation',
            )
        nxp_transformation_type = SubSection(sub_section=nxp_transformation_type.m_def,repeats=True)
        class nxp_vector(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='vector',
            )
            nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='false',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_NUMBER',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Three values that define the axis for this transformation.
                The axis should be normalized to unit length, making it
                dimensionless.  For ``rotation`` axes, the direction should be
                chosen for a right-handed rotation with increasing angle.
                For ``translation`` axes the direction should be chosen for
                increasing displacement. For general axes, an appropriate direction
                should be chosen.
                https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-vector-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-vector-attribute',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_vector = SubSection(sub_section=nxp_vector.m_def,repeats=True)
        class nxp_offset(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='offset',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_NUMBER',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            A fixed offset applied before the transformation (three vector
                components).                                 This is not intended to be a
                substitute for a fixed ``translation`` axis but, for example,
                as the mechanical offset from mounting the axis to its dependency.
                https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-offset-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-offset-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_offset = SubSection(sub_section=nxp_offset.m_def,repeats=True)
        class nxp_offset_units(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='offset_units',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Units of the offset.  Values should be consistent with NX_LENGTH.
                https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-offset-units-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-offset-units-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_offset_units = SubSection(sub_section=nxp_offset_units.m_def,repeats=True)
        class nxp_depends_on(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='depends_on',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Points to the path to a field defining the axis on which this
                depends or the string ".".
                https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-depends-on-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-depends-on-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_depends_on = SubSection(sub_section=nxp_depends_on.m_def,repeats=True)
    nxp_AXISNAME = SubSection(sub_section=nxp_AXISNAME.m_def,repeats=True)


    class nxp_AXISNAME_end(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='AXISNAME_end',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TRANSFORMATION',
        )
        nxp_nameType= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='any',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        ``AXISNAME_end`` is a placeholder for a name constructed from the actual
                name of an axis to which ``_end`` has been appended.

                The values in this field are the end points of the motions that start
                at the corresponding positions given in the ``AXISNAME`` field.
                https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-end-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-end-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_AXISNAME_end = SubSection(sub_section=nxp_AXISNAME_end.m_def,repeats=True)


    class nxp_AXISNAME_increment_set(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='AXISNAME_increment_set',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TRANSFORMATION',
        )
        nxp_nameType= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='any',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        ``AXISNAME_increment_set`` is a placeholder for a name constructed from
                the actual                         name of an axis to which
                ``_increment_set`` has been appended.

                The value of this optional field is the intended average range through
                which                         the corresponding axis moves during the
                exposure of a frame.  Ideally, the                         value of this
                field added to each value of ``AXISNAME`` would agree with the
                corresponding values of ``AXISNAME_end``, but there is a possibility of
                significant                         differences.  Use of ``AXISNAME_end``
                is recommended.
                https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-increment-set-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-increment-set-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_AXISNAME_increment_set = SubSection(sub_section=nxp_AXISNAME_increment_set.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXflipper(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXflipper',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        A spin flipper.
        https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_type(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='type',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-type-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-type-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: coil,current-sheet''',
            default='coil,current-sheet',
        )
    nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)


    class nxp_flip_turns(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='flip_turns',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_PER_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Linear density of turns (such as number of turns/cm) in flipping field
                coils
                https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-flip-turns-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-flip-turns-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_flip_turns = SubSection(sub_section=nxp_flip_turns.m_def,repeats=True)


    class nxp_comp_turns(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='comp_turns',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_PER_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Linear density of turns (such as number of turns/cm) in compensating field
                coils
                https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-comp-turns-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-comp-turns-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_comp_turns = SubSection(sub_section=nxp_comp_turns.m_def,repeats=True)


    class nxp_guide_turns(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='guide_turns',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_PER_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Linear density of turns (such as number of turns/cm) in guide field coils
                https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-guide-turns-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-guide-turns-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_guide_turns = SubSection(sub_section=nxp_guide_turns.m_def,repeats=True)


    class nxp_flip_current(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='flip_current',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CURRENT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Flipping field coil current in "on" state"
                https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-flip-current-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-flip-current-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_flip_current = SubSection(sub_section=nxp_flip_current.m_def,repeats=True)


    class nxp_comp_current(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='comp_current',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CURRENT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Compensating field coil current in "on" state"
                https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-comp-current-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-comp-current-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_comp_current = SubSection(sub_section=nxp_comp_current.m_def,repeats=True)


    class nxp_guide_current(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='guide_current',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CURRENT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Guide field coil current in "on" state"
                https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-guide-current-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-guide-current-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_guide_current = SubSection(sub_section=nxp_guide_current.m_def,repeats=True)


    class nxp_thickness(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='thickness',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        thickness along path of neutron travel
                https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-thickness-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-thickness-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_thickness = SubSection(sub_section=nxp_thickness.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXcylindrical_geometry(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXcylindrical_geometry',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                Geometry description for cylindrical shapes.     This class can be used in place
        of ``NXoff_geometry`` when an exact     representation for cylinders is preferred.
        For example, for Helium-tube, neutron detectors.     It can be used to describe
        the shape of any beamline component, including detectors.     In the case of
        detectors it can be used to define the shape of a single pixel, or,     if the
        pixel shapes are non-uniform, to describe the shape of the whole detector.
        https://manual.nexusformat.org/classes/base_classes/NXcylindrical_geometry.html#nxcylindrical-geometry
        .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXcylindrical_geometry.html#nxcylindrical-geometry',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_vertices(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='vertices',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        List of x,y,z coordinates for vertices.       The origin of the
                coordinates is the position of the parent component, for       example the
                NXdetector which the geometry describes.       If the shape describes a
                single pixel for a detector with uniform pixel shape       then the origin
                is the position of each pixel as described by the
                ``x/y/z_pixel_offset`` datasets in ``NXdetector``.
                https://manual.nexusformat.org/classes/base_classes/NXcylindrical_geometry.html#nxcylindrical-geometry-vertices-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcylindrical_geometry.html#nxcylindrical-geometry-vertices-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_vertices = SubSection(sub_section=nxp_vertices.m_def,repeats=True)


    class nxp_cylinders(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='cylinders',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        List of indices of vertices in the ``vertices`` dataset to form each
                cylinder.       Each cylinder is described by three vertices A, B, C.
                First vertex A lies on the cylinder axis and circular face, second point B
                on edge of the same face as A, and third point C at the other face and on
                axis.
                https://manual.nexusformat.org/classes/base_classes/NXcylindrical_geometry.html#nxcylindrical-geometry-cylinders-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcylindrical_geometry.html#nxcylindrical-geometry-cylinders-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_cylinders = SubSection(sub_section=nxp_cylinders.m_def,repeats=True)


    class nxp_detector_number(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='detector_number',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Maps cylinders in ``cylinder``, by index, with a detector id.
                https://manual.nexusformat.org/classes/base_classes/NXcylindrical_geometry.html#nxcylindrical-geometry-detector-number-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcylindrical_geometry.html#nxcylindrical-geometry-detector-number-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_detector_number = SubSection(sub_section=nxp_detector_number.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXcylindrical_geometry.html#nxcylindrical-geometry-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcylindrical_geometry.html#nxcylindrical-geometry-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXattenuator(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXattenuator',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                A device that reduces the intensity of a beam by attenuation.

        If uncertain whether to use :ref:`NXfilter` (band-pass filter)         or
        :ref:`NXattenuator` (reduces beam intensity), then choose
        :ref:`NXattenuator`.
        https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator
        .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_distance(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='distance',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Distance from sample
                https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-distance-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-distance-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)


    class nxp_type(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='type',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Type or composition of attenuator, e.g. polythene
                https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-type-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-type-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)


    class nxp_thickness(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='thickness',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Thickness of attenuator along beam direction
                https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-thickness-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-thickness-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_thickness = SubSection(sub_section=nxp_thickness.m_def,repeats=True)


    class nxp_scattering_cross_section(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='scattering_cross_section',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CROSS_SECTION',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Scattering cross section (coherent+incoherent)
                https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-scattering-cross-section-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-scattering-cross-section-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_scattering_cross_section = SubSection(sub_section=nxp_scattering_cross_section.m_def,repeats=True)


    class nxp_absorption_cross_section(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='absorption_cross_section',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CROSS_SECTION',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Absorption cross section
                https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-absorption-cross-section-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-absorption-cross-section-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_absorption_cross_section = SubSection(sub_section=nxp_absorption_cross_section.m_def,repeats=True)


    class nxp_attenuator_transmission(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='attenuator_transmission',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_DIMENSIONLESS',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The nominal amount of the beam that gets through             (transmitted
                intensity)/(incident intensity)
                https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-attenuator-transmission-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-attenuator-transmission-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_attenuator_transmission = SubSection(sub_section=nxp_attenuator_transmission.m_def,repeats=True)


    class nxp_status(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='status',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        In or out or moving of the beam
                https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-status-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-status-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: in,out,moving''',
            default='in,out,moving',
        )
        class nxp_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            time stamp for this observation
                https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-status-time-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-status-time-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_time = SubSection(sub_section=nxp_time.m_def,repeats=True)
    nxp_status = SubSection(sub_section=nxp_status.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXdata(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXdata',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_ignoreExtraFields = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='true',)

    nxp_ignoreExtraAttributes = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='true',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                :ref:`NXdata` describes the plottable data and related dimension scales.
        .. index:: plotting                                  It is mandatory  that there
        is at least one :ref:`NXdata` group                  in each :ref:`NXentry` group.
        Note that the ``variable`` and ``data``                  can be defined with
        different names.                   The ``signal`` and ``axes`` attributes of the
        ``data`` group define which items                  are plottable data and which
        are *dimension scales*, respectively.
        :ref:`NXdata` is used to implement one of the basic motivations in NeXus,
        to provide a default plot for the data of this :ref:`NXentry`.  The actual data
        might be stored in another group and (hard) linked to the :ref:`NXdata` group.

        * Each :ref:`NXdata` group will define only one data set
        containing plottable data, dimension scales, and                    possibly
        associated standard deviations.                   Other data sets may be present
        in the group.                 * The plottable data may be of arbitrary rank up to
        a maximum                   of ``NX_MAXRANK=32``.                 * The plottable
        data will be named as the value of                    the group ``signal``
        attribute, such as::                                        data:NXdata
        @signal = "counts"                       @axes = "mr"
        @mr_indices = 0                       counts: float[100]  --> the default
        dependent data                       mr: float[100]  --> the default independent
        data                                      The field named in the ``signal``
        attribute **must** exist, either                   directly as a dataset or
        defined through a link.                                  * The group ``axes``
        attribute will name the                   *dimension scale* associated with the
        plottable data.

        If available, the standard deviations of the data are to be                 stored
        in a data set of the same rank and dimensions, with the name ``errors``.

        * For each data dimension, there should be a one-dimensional array
        of the same length.                 * These one-dimensional arrays are the
        *dimension scales* of the                   data,  *i.e*. the values of the
        independent variables at which the data                   is measured, such as
        scattering angle or energy transfer.                                  .. index::
        link                 .. index:: axes (attribute)
        The preferred method to associate each data dimension with                 its
        respective dimension scale is to specify the field name                 of each
        dimension scale in the group ``axes`` attribute as a string list.
        Here is an example for a 2-D data set *data* plotted                  against
        *time*, and *pressure*.  (An additional *temperature* data set                  is
        provided and could be selected as an alternate for the *pressure* axis.)::

        data_2d:NXdata                     @signal="data"
        @axes=["time", "pressure"]                     @pressure_indices=1
        @temperature_indices=1                     @time_indices=0
        data: float[1000,20]                     pressure: float[20]
        temperature: float[20]                     time: float[1000]

        .. rubric:: Old methods to identify the plottable data
        There are two older methods of associating                  each data dimension to
        its respective dimension scale.                 Both are now out of date and
        should not be used when writing new data files.                 However, client
        software should expect to see data files                 written with any of these
        methods.                                    * One method uses the ``axes``
        attribute to specify the names of each *dimension scale*.
        * The oldest method uses the ``axis`` attribute on each
        *dimension scale* to identify                     with an integer the axis whose
        value is the number of the dimension.

        .. index: !plot; axis label                    plot, axis units
        units                    dimension scale

        Each axis of the plot may be labeled with information from the
        dimension scale for that axis.  The optional ``@long_name`` attribute
        is provided as the axis label default.  If ``@long_name`` is not
        defined, then use the name of the dimension scale.  A ``@units`` attribute,
        if available, may be added to the axis label for further description.
        See the section :ref:`Design-Units` for more information.

        .. index: !plot; axis title

        The optional ``title`` field, if available, provides a suggested
        title for the plot.  If no ``title`` field is found in the :ref:`NXdata`
        group, look for a ``title`` field in the parent :ref:`NXentry` group,
        with a fallback to displaying the path to the :ref:`NXdata` group.

        NeXus is about how to find and annotate the data to be plotted
        but not to describe how the data is to be plotted.
        (https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute)
        https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_VARIABLE(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='VARIABLE',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_nameType= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='any',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Dimension scale defining an axis of the data.
                Client is responsible for defining the dimensions of the data.
                The name of this field may be changed to fit the circumstances.
                Standard NeXus client tools will use the attributes to determine
                how to use this field.
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_long_name(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='long_name',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Axis label
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-long-name-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-long-name-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_long_name = SubSection(sub_section=nxp_long_name.m_def,repeats=True)
        class nxp_distribution(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='distribution',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_BOOLEAN',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            ``0|false``: single value,                                  ``1|true``:
                multiple values
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-distribution-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-distribution-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_distribution = SubSection(sub_section=nxp_distribution.m_def,repeats=True)
        class nxp_first_good(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='first_good',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_INT',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Index of first good value
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-first-good-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-first-good-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_first_good = SubSection(sub_section=nxp_first_good.m_def,repeats=True)
        class nxp_last_good(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='last_good',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_INT',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Index of last good value
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-last-good-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-last-good-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_last_good = SubSection(sub_section=nxp_last_good.m_def,repeats=True)
        class nxp_axis(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_POSINT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='axis',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_POSINT',
            )
            nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='Use the group ``axes`` attribute   (NIAC2014)',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Index (positive integer) identifying this specific set of numbers.
                N.B. The ``axis`` attribute is the old way of designating a link.
                Do not use the ``axes`` attribute with the ``axis`` attribute.
                The ``axes`` *group* attribute is now preferred.
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-axis-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-axis-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_axis = SubSection(sub_section=nxp_axis.m_def,repeats=True)
    nxp_VARIABLE = SubSection(sub_section=nxp_VARIABLE.m_def,repeats=True)


    class nxp_VARIABLE_errors(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='VARIABLE_errors',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_nameType= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='any',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        "Errors" (actually *uncertainties*) associated with axis ``VARIABLE``.
                Client is responsible for defining the dimensions of the data.
                The name of this field may be changed to fit the circumstances
                but is matched with the *VARIABLE* field with ``_errors`` appended.
                This pattern of using ``VARIABLE_errors`` can be used
                throughout a NeXus data file to associate uncertainties
                with a dataset named ``VARIABLE``.  This pattern also
                applies to other relationships such as ``VARIABLE_resolutions``
                to connect additional data with a certain dataset.
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-errors-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-errors-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_VARIABLE_errors = SubSection(sub_section=nxp_VARIABLE_errors.m_def,repeats=True)


    class nxp_DATA(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='DATA',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_nameType= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='any',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                                          This field
                contains the data values to be used as the                          NeXus
                *plottable data*.                         Client is responsible for
                defining the dimensions of the data.                         The name of
                this field may be changed to fit the circumstances.
                Standard NeXus client tools will use the attributes to determine
                how to use this field.
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-data-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-data-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_signal(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_POSINT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='signal',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_POSINT',
            )
            nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='Use the group ``signal`` attribute   (NIAC2014)',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            .. index:: plotting                                          Plottable
                (independent) axis, indicate index number.
                Only one field in a :ref:`NXdata` group may have the
                ``signal=1`` attribute.                                 Do not use the
                ``signal`` attribute with the ``axis`` attribute.
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-data-signal-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-data-signal-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_signal = SubSection(sub_section=nxp_signal.m_def,repeats=True)
        class nxp_axes(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='axes',
            )
            nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='Use the group ``axes`` attribute   (NIAC2014)',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Defines the names of the dimension scales
                (independent axes) for this data set                                 as a
                colon-delimited array.                                 NOTE: The ``axes``
                attribute is the preferred                                 method of
                designating a link.                                 Do not use the
                ``axes`` attribute with the ``axis`` attribute.
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-data-axes-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-data-axes-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_axes = SubSection(sub_section=nxp_axes.m_def,repeats=True)
        class nxp_long_name(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='long_name',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            data label
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-data-long-name-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-data-long-name-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_long_name = SubSection(sub_section=nxp_long_name.m_def,repeats=True)
    nxp_DATA = SubSection(sub_section=nxp_DATA.m_def,repeats=True)


    class nxp_errors(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='errors',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Standard deviations of data values -                          the data
                array is identified by the group attribute ``signal``.
                The ``errors`` array must have the same dimensions as ``data``.
                Client is responsible for defining the dimensions of the data.
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-errors-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-errors-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_errors = SubSection(sub_section=nxp_errors.m_def,repeats=True)


    class nxp_scaling_factor(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='scaling_factor',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The elements in data are usually float values really. For
                efficiency reasons these are usually stored as integers
                after scaling with a scale factor. This value is the scale
                factor. It is required to get the actual physical value,
                when necessary.
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-scaling-factor-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-scaling-factor-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_scaling_factor = SubSection(sub_section=nxp_scaling_factor.m_def,repeats=True)


    class nxp_offset(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='offset',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        An optional offset to apply to the values in data.
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-offset-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-offset-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_offset = SubSection(sub_section=nxp_offset.m_def,repeats=True)


    class nxp_title(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='title',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Title for the plot.
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-title-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-title-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)


    class nxp_x(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='x',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        This is an array holding the values to use for the x-axis of
                data.  The units must be appropriate for the measurement.
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-x-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-x-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_x = SubSection(sub_section=nxp_x.m_def,repeats=True)


    class nxp_y(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='y',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        This is an array holding the values to use for the y-axis of
                data.  The units must be appropriate for the measurement.
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-y-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-y-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_y = SubSection(sub_section=nxp_y.m_def,repeats=True)


    class nxp_z(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='z',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        This is an array holding the values to use for the z-axis of
                data.  The units must be appropriate for the measurement.
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-z-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-z-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_z = SubSection(sub_section=nxp_z.m_def,repeats=True)


    class nxp_auxiliary_signals(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='auxiliary_signals',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                                                  Array
                of strings holding the names of additional signals to
                be plotted with the default signal (specified by the
                ``signal`` attribute).  Each auxiliary signal needs to be of
                the same shape as the default signal.
                ..  NIAC2018:
                https://www.nexusformat.org/NIAC2018Minutes.html
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-auxiliary-signals-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-auxiliary-signals-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_auxiliary_signals = SubSection(sub_section=nxp_auxiliary_signals.m_def,repeats=True)


    class nxp_signal(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='signal',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting
                Declares which dataset is the default.                          The value
                is the name of the dataset to be plotted.                         A field
                of this name *must* exist (either as dataset                          or
                as a link to a dataset).
                It is recommended (as of NIAC2014) to use this attribute
                rather than adding a signal attribute to the dataset.
                See https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-signal-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-signal-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_signal = SubSection(sub_section=nxp_signal.m_def,repeats=True)


    class nxp_axes(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='axes',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting
                String array that defines the independent data fields used in
                the default plot for all of the dimensions of the *signal* field
                (the *signal* field is the field in this group that is named by
                the ``signal`` attribute of this group).                          One
                entry is provided for every dimension in the *signal* field.
                The field(s) named as values (known as "axes") of this attribute
                *must* exist. An axis slice is specified using a field named
                ``AXISNAME_indices`` as described below (where the text shown here
                as ``AXISNAME`` is to be replaced by the actual field name).
                When no default axis is available for a particular dimension
                of the plottable data, use a "." in that position.
                Such as::
                @axes=["time", ".", "."]
                Since there are three items in the list, the the *signal* field
                must must be a three-dimensional array (rank=3).  The first dimension
                is described by the values of a one-dimensional array named ``time``
                while the other two dimensions have no fields to be used as dimension
                scales.                                                  See examples
                provided on the NeXus wiki:
                https://www.nexusformat.org/2014_axes_and_uncertainties.html
                If there are no axes at all (such as with a stack of images),
                the axes attribute can be omitted.
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-axes-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-axes-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_axes = SubSection(sub_section=nxp_axes.m_def,repeats=True)


    class nxp_AXISNAME_indices(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='AXISNAME_indices',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Each ``AXISNAME_indices`` attribute indicates the dependency
                relationship of the ``AXISNAME`` field (where ``AXISNAME``
                is the name of a field that exists in this ``NXdata`` group)
                with one or more dimensions of the plottable data.
                Integer array that defines the indices of the *signal* field
                (that field will be a multidimensional array)
                which need to be used in the *AXISNAME* dataset in
                order to reference the corresponding axis value.
                The first index of an array is ``0`` (zero).
                Here, *AXISNAME* is to be replaced by the name of each
                field described in the ``axes`` attribute.                           An
                example with 2-D data, :math:`d(t,P)`, will illustrate::
                data_2d:NXdata                                 @signal="data"
                @axes=["time", "pressure"]                                 @time_indices=0
                @pressure_indices=1                                 data: float[1000,20]
                time: float[1000]                                 pressure: float[20]
                This attribute is to be provided in all situations.
                However, if the indices attributes are missing
                (such as for data files written before this specification),
                file readers are encouraged to make their best efforts
                to plot the data.                                Thus the implementation
                of the                          ``AXISNAME_indices`` attribute is based on
                the model of                          "strict writer, liberal reader".
                .. note::  Attributes potentially containing multiple values
                (axes and _indices) are to be written as string or integer arrays,
                to avoid string parsing in reading applications.
                https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-axisname-indices-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-axisname-indices-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_AXISNAME_indices = SubSection(sub_section=nxp_AXISNAME_indices.m_def,repeats=True)



class NXshape(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXshape',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                legacy class - (used by :ref:`NXgeometry`) - the shape and size of a component.
        This is the description of the general shape and size of a
        component, which may be made up of ``numobj`` separate                  elements -
        it is used by the :ref:`NXgeometry` class
        https://manual.nexusformat.org/classes/base_classes/NXshape.html#nxshape .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXshape.html#nxshape',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_shape(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='shape',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        general shape of a component
                https://manual.nexusformat.org/classes/base_classes/NXshape.html#nxshape-shape-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXshape.html#nxshape-shape-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values:
                nxflat,nxcylinder,nxbox,nxsphere,nxcone,nxelliptical,nxtoroidal,nxparabolic,nxpolynomial''',
            default='nxflat,nxcylinder,nxbox,nxsphere,nxcone,nxelliptical,nxtoroidal,nxparabolic,nxpolynomial',
        )
    nxp_shape = SubSection(sub_section=nxp_shape.m_def,repeats=True)


    class nxp_size(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='size',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        physical extent of the object along its local axes (after NXorientation)
                with the center of mass at the local origin (after NXtranslation).
                The meaning and location of these axes will vary according to the value
                of the "shape" variable.                          ``nshapepar`` defines
                how many parameters:

                - For "nxcylinder" type the parameters are (diameter,height) and a three
                value orientation vector of the cylinder.                          - For
                the "nxbox" type the parameters are (length,width,height).
                - For the "nxsphere" type the parameters are (diameter).
                - For nxcone cone half aperture                         - For
                nxelliptical, semi-major axis, semi-minor-axis, angle of major axis and
                pole                         - For nxtoroidal, major radius, minor radius
                - For nxparabolic, parabolic parameter a                         - For
                nxpolynomial, an array of polynom coefficients, the dimension of the array
                encodes the degree of the polynom
                https://manual.nexusformat.org/classes/base_classes/NXshape.html#nxshape-size-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXshape.html#nxshape-size-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_size = SubSection(sub_section=nxp_size.m_def,repeats=True)


    class nxp_direction(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='direction',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXshape.html#nxshape-direction-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXshape.html#nxshape-direction-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: concave,convex''',
            default='concave,convex',
        )
    nxp_direction = SubSection(sub_section=nxp_direction.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXshape.html#nxshape-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXshape.html#nxshape-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXlog(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXlog',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                Information recorded as a function of time.

        Description of information that is recorded against                 time. There
        are two common use cases for this:

        - When logging data such as temperature during a run                 - When data
        is taken in streaming mode data acquisition,                   i.e. just
        timestamp, value pairs are stored and                   correlated later in data
        reduction with other data,

        In both cases, NXlog contains                 the logged or streamed  values and
        the times at which they were measured as elapsed time since a starting
        time recorded in ISO8601 format. The time units are                 specified in
        the units attribute. An optional scaling attribute                 can be used to
        accomodate non standard clocks.

        This method of storing logged data helps to distinguish                 instances
        in which a variable is a dimension scale of the data, in which case it is stored
        in an :ref:`NXdata` group, and instances in which it is logged during the
        run, when it should be stored in an :ref:`NXlog` group.

        In order to make random access to timestamped data faster there is an optional
        array pair of                 ``cue_timestamp_zero`` and ``cue_index``. The
        ``cue_timestamp_zero`` will                 contain coarser timestamps than in the
        time array, say                 every five minutes. The ``cue_index`` will then
        contain the                 index into the time,value pair of arrays for that
        coarser ``cue_timestamp_zero``.

        https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_time(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='time',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Time of logged entry. The times are relative to the "start" attribute
                and in the units specified in the "units"
                attribute. Please note that absolute                         timestamps
                under unix are relative to ``1970-01-01T00:00:00.0Z``.

                The scaling_factor, when present, has to be applied to the time values in
                order                         to arrive at the units specified in the
                units attribute. The scaling_factor allows                         for
                arbitrary time units such as ticks of some hardware clock.
                https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-time-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-time-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_start(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-time-start-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-time-start-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start = SubSection(sub_section=nxp_start.m_def,repeats=True)
        class nxp_scaling_factor(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='scaling_factor',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_NUMBER',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-time-scaling-factor-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-time-scaling-factor-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_scaling_factor = SubSection(sub_section=nxp_scaling_factor.m_def,repeats=True)
    nxp_time = SubSection(sub_section=nxp_time.m_def,repeats=True)


    class nxp_value(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='value',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Array of logged value, such as temperature. If this is             a
                single value the dimensionality is             nEntries. However, NXlog
                can also be used to store             multi dimensional time stamped data
                such as images. In             this example the dimensionality of values
                would be value[nEntries,xdim,ydim].
                https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-value-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-value-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_value = SubSection(sub_section=nxp_value.m_def,repeats=True)


    class nxp_raw_value(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='raw_value',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Array of raw information, such as thermocouple voltage
                https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-raw-value-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-raw-value-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_raw_value = SubSection(sub_section=nxp_raw_value.m_def,repeats=True)


    class nxp_description(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='description',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Description of logged value
                https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-description-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-description-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)


    class nxp_average_value(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='average_value',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-average-value-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-average-value-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_average_value = SubSection(sub_section=nxp_average_value.m_def,repeats=True)


    class nxp_average_value_error(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='average_value_error',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_deprecated= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='see: https://github.com/nexusformat/definitions/issues/639',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        estimated uncertainty (often used: standard deviation) of average_value
                https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-average-value-error-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-average-value-error-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_deprecated= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_average_value_error = SubSection(sub_section=nxp_average_value_error.m_def,repeats=True)


    class nxp_average_value_errors(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='average_value_errors',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        estimated uncertainty (often used: standard deviation) of average_value
                https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-average-value-errors-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-average-value-errors-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_average_value_errors = SubSection(sub_section=nxp_average_value_errors.m_def,repeats=True)


    class nxp_minimum_value(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='minimum_value',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-minimum-value-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-minimum-value-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_minimum_value = SubSection(sub_section=nxp_minimum_value.m_def,repeats=True)


    class nxp_maximum_value(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='maximum_value',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-maximum-value-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-maximum-value-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_maximum_value = SubSection(sub_section=nxp_maximum_value.m_def,repeats=True)


    class nxp_duration(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='duration',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Total time log was taken
                https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-duration-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-duration-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_duration = SubSection(sub_section=nxp_duration.m_def,repeats=True)


    class nxp_cue_timestamp_zero(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='cue_timestamp_zero',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Timestamps matching the corresponding cue_index into the             time,
                value pair.
                https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-cue-timestamp-zero-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-cue-timestamp-zero-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_start(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            If missing start is assumed to be the same as for "time".
                https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-cue-timestamp-zero-start-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-cue-timestamp-zero-start-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start = SubSection(sub_section=nxp_start.m_def,repeats=True)
        class nxp_scaling_factor(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='scaling_factor',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_NUMBER',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            If missing start is assumed to be the same as for "time".
                https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-cue-timestamp-zero-scaling-factor-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-cue-timestamp-zero-scaling-factor-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_scaling_factor = SubSection(sub_section=nxp_scaling_factor.m_def,repeats=True)
    nxp_cue_timestamp_zero = SubSection(sub_section=nxp_cue_timestamp_zero.m_def,repeats=True)


    class nxp_cue_index(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='cue_index',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Index into the time, value pair matching the corresponding
                cue_timestamp_zero.
                https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-cue-index-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-cue-index-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_cue_index = SubSection(sub_section=nxp_cue_index.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXpolarizer(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXpolarizer',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                A spin polarizer.
        https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_type(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='type',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        one of these values: "crystal", "supermirror", "3He"
                https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer-type-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer-type-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)


    class nxp_composition(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='composition',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        description of the composition of the polarizing material
                https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer-composition-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer-composition-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_composition = SubSection(sub_section=nxp_composition.m_def,repeats=True)


    class nxp_reflection(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='reflection',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_UNITLESS',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        [hkl] values of nominal reflection
                https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer-reflection-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer-reflection-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_reflection = SubSection(sub_section=nxp_reflection.m_def,repeats=True)


    class nxp_efficiency(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='efficiency',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_DIMENSIONLESS',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        polarizing efficiency
                https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer-efficiency-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer-efficiency-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_efficiency = SubSection(sub_section=nxp_efficiency.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXreflections(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXreflections',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        Reflection data from diffraction experiments
        https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections
        .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_experiments(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='experiments',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        The experiments from which the reflection data derives
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-experiments-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-experiments-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_experiments = SubSection(sub_section=nxp_experiments.m_def,repeats=True)


    class nxp_h(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='h',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        The h component of the miller index
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-h-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-h-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-h-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-h-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_h = SubSection(sub_section=nxp_h.m_def,repeats=True)


    class nxp_k(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='k',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        The k component of the miller index
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-k-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-k-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-k-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-k-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_k = SubSection(sub_section=nxp_k.m_def,repeats=True)


    class nxp_l(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='l',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        The l component of the miller index
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-l-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-l-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-l-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-l-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_l = SubSection(sub_section=nxp_l.m_def,repeats=True)


    class nxp_id(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='id',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The id of the experiment which resulted in the reflection. If the value
                is greater than 0, the experiments must link to a multi-experiment NXmx
                group
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-id-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-id-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-id-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-id-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_id = SubSection(sub_section=nxp_id.m_def,repeats=True)


    class nxp_reflection_id(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='reflection_id',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The id of the reflection. Multiple partials from the same reflection
                should all have the same id
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-reflection-id-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-reflection-id-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-reflection-id-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-reflection-id-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_reflection_id = SubSection(sub_section=nxp_reflection_id.m_def,repeats=True)


    class nxp_entering(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='entering',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_BOOLEAN',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Is the reflection entering or exiting the Ewald sphere
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-entering-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-entering-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-entering-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-entering-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_entering = SubSection(sub_section=nxp_entering.m_def,repeats=True)


    class nxp_det_module(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='det_module',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        The detector module on which the reflection was recorded
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-det-module-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-det-module-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-det-module-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-det-module-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_det_module = SubSection(sub_section=nxp_det_module.m_def,repeats=True)


    class nxp_flags(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='flags',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Status flags describing the reflection.               This is a bit mask.
                The bits in the mask follow the convention        used by DIALS, and have
                the following names:              ===
                ==========================================       bit   name       ===
                ==========================================       0     ``predicted``
                1     ``observed``       2     ``indexed``       3
                ``used_in_refinement``       4     ``strong``       5
                ``reference_spot``       6     ``dont_integrate``       7
                ``integrated_sum``       8     ``integrated_prf``       9
                ``integrated``       10    ``overloaded``       11    ``overlapped``
                12    ``overlapped_fg``       13    ``in_powder_ring``       14
                ``foreground_includes_bad_pixels``       15
                ``background_includes_bad_pixels``       16    ``includes_bad_pixels``
                17    ``bad_shoebox``       18    ``bad_spot``       19
                ``used_in_modelling``       20    ``centroid_outlier``       21
                ``failed_during_background_modelling``       22
                ``failed_during_summation``       23    ``failed_during_profile_fitting``
                24    ``bad_reference``       ===
                ==========================================
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-flags-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-flags-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-flags-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-flags-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_flags = SubSection(sub_section=nxp_flags.m_def,repeats=True)


    class nxp_d(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='d',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        The resolution of the reflection
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-d-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-d-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-d-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-d-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_d = SubSection(sub_section=nxp_d.m_def,repeats=True)


    class nxp_partiality(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='partiality',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The partiality of the reflection.        Dividing by this number will
                inflate the measured        intensity to the full reflection equivalent.
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-partiality-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-partiality-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-partiality-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-partiality-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_partiality = SubSection(sub_section=nxp_partiality.m_def,repeats=True)


    class nxp_predicted_frame(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='predicted_frame',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_UNITLESS',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The frame on which the bragg peak of the reflection is predicted
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-frame-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-frame-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-frame-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-frame-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_predicted_frame = SubSection(sub_section=nxp_predicted_frame.m_def,repeats=True)


    class nxp_predicted_x(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='predicted_x',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The x position at which the bragg peak of the reflection       is
                predicted
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-x-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-x-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-x-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-x-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_predicted_x = SubSection(sub_section=nxp_predicted_x.m_def,repeats=True)


    class nxp_predicted_y(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='predicted_y',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The y position at which the bragg peak of the reflection       is
                predicted
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-y-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-y-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-y-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-y-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_predicted_y = SubSection(sub_section=nxp_predicted_y.m_def,repeats=True)


    class nxp_predicted_phi(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='predicted_phi',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The phi angle at which the bragg peak of the reflection is predicted
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-phi-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-phi-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-phi-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-phi-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_predicted_phi = SubSection(sub_section=nxp_predicted_phi.m_def,repeats=True)


    class nxp_predicted_px_x(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='predicted_px_x',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_UNITLESS',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The x pixel position at which the bragg peak of the reflection is
                predicted
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-px-x-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-px-x-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-px-x-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-px-x-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_predicted_px_x = SubSection(sub_section=nxp_predicted_px_x.m_def,repeats=True)


    class nxp_predicted_px_y(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='predicted_px_y',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_UNITLESS',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The y pixel position at which the bragg peak of the reflection is
                predicted
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-px-y-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-px-y-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-px-y-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-px-y-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_predicted_px_y = SubSection(sub_section=nxp_predicted_px_y.m_def,repeats=True)


    class nxp_observed_frame(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='observed_frame',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_UNITLESS',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The estimate of the frame at which the central impact of the
                reflection was recorded
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-frame-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-frame-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-frame-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-frame-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_observed_frame = SubSection(sub_section=nxp_observed_frame.m_def,repeats=True)


    class nxp_observed_frame_var(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='observed_frame_var',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_UNITLESS',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The variance on the estimate of the frame at which the central
                impact of the reflection was recorded
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-frame-var-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-frame-var-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-frame-var-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-frame-var-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_observed_frame_var = SubSection(sub_section=nxp_observed_frame_var.m_def,repeats=True)


    class nxp_observed_frame_errors(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='observed_frame_errors',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_UNITLESS',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The standard deviation of the estimate of the frame at which the central
                impact of the reflection was recorded
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-frame-errors-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-frame-errors-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-frame-errors-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-frame-errors-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_observed_frame_errors = SubSection(sub_section=nxp_observed_frame_errors.m_def,repeats=True)


    class nxp_observed_px_x(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='observed_px_x',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_UNITLESS',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The estimate of the pixel x position at which the central impact of
                the reflection was recorded
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-x-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-x-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-x-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-x-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_observed_px_x = SubSection(sub_section=nxp_observed_px_x.m_def,repeats=True)


    class nxp_observed_px_x_var(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='observed_px_x_var',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_UNITLESS',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The variance on the estimate of the pixel x position at which the
                central impact of the reflection was recorded
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-x-var-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-x-var-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-x-var-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-x-var-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_observed_px_x_var = SubSection(sub_section=nxp_observed_px_x_var.m_def,repeats=True)


    class nxp_observed_px_x_errors(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='observed_px_x_errors',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_UNITLESS',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The standard deviation of the estimate of the pixel x position at which
                the       central impact of the reflection was recorded
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-x-errors-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-x-errors-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-x-errors-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-x-errors-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_observed_px_x_errors = SubSection(sub_section=nxp_observed_px_x_errors.m_def,repeats=True)


    class nxp_observed_px_y(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='observed_px_y',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_UNITLESS',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The estimate of the pixel y position at which the central impact of
                the reflection was recorded
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-y-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-y-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-y-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-y-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_observed_px_y = SubSection(sub_section=nxp_observed_px_y.m_def,repeats=True)


    class nxp_observed_px_y_var(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='observed_px_y_var',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_UNITLESS',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The variance on the estimate of the pixel y position at which the
                central impact of the reflection was recorded
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-y-var-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-y-var-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-y-var-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-y-var-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_observed_px_y_var = SubSection(sub_section=nxp_observed_px_y_var.m_def,repeats=True)


    class nxp_observed_px_y_errors(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='observed_px_y_errors',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_UNITLESS',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The standard deviation of the estimate of the pixel y position at which
                the       central impact of the reflection was recorded
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-y-errors-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-y-errors-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-y-errors-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-y-errors-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_observed_px_y_errors = SubSection(sub_section=nxp_observed_px_y_errors.m_def,repeats=True)


    class nxp_observed_phi(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='observed_phi',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The estimate of the phi angle at which the central impact of the
                reflection was recorded
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-phi-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-phi-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-phi-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-phi-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_observed_phi = SubSection(sub_section=nxp_observed_phi.m_def,repeats=True)


    class nxp_observed_phi_var(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='observed_phi_var',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The variance on the estimate of the phi angle at which the central
                impact of the reflection was recorded
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-phi-var-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-phi-var-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-phi-var-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-phi-var-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_observed_phi_var = SubSection(sub_section=nxp_observed_phi_var.m_def,repeats=True)


    class nxp_observed_phi_errors(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='observed_phi_errors',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The standard deviation of the estimate of the phi angle at which the
                central       impact of the reflection was recorded
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-phi-errors-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-phi-errors-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-phi-errors-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-phi-errors-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_observed_phi_errors = SubSection(sub_section=nxp_observed_phi_errors.m_def,repeats=True)


    class nxp_observed_x(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='observed_x',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The estimate of the x position at which the central       impact of the
                reflection was recorded
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-x-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-x-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-x-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-x-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_observed_x = SubSection(sub_section=nxp_observed_x.m_def,repeats=True)


    class nxp_observed_x_var(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='observed_x_var',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The variance on the estimate of the x position at which       the central
                impact of the reflection was recorded
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-x-var-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-x-var-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-x-var-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-x-var-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_observed_x_var = SubSection(sub_section=nxp_observed_x_var.m_def,repeats=True)


    class nxp_observed_x_errors(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='observed_x_errors',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The standard deviation of the estimate of the x position at which
                the central impact of the reflection was recorded
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-x-errors-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-x-errors-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-x-errors-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-x-errors-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_observed_x_errors = SubSection(sub_section=nxp_observed_x_errors.m_def,repeats=True)


    class nxp_observed_y(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='observed_y',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The estimate of the y position at which the central       impact of the
                reflection was recorded
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-y-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-y-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-y-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-y-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_observed_y = SubSection(sub_section=nxp_observed_y.m_def,repeats=True)


    class nxp_observed_y_var(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='observed_y_var',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The variance on the estimate of the y position at which       the central
                impact of the reflection was recorded
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-y-var-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-y-var-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-y-var-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-y-var-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_observed_y_var = SubSection(sub_section=nxp_observed_y_var.m_def,repeats=True)


    class nxp_observed_y_errors(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='observed_y_errors',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The standard deviation of the estimate of the y position at which
                the central impact of the reflection was recorded
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-y-errors-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-y-errors-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-y-errors-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-y-errors-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_observed_y_errors = SubSection(sub_section=nxp_observed_y_errors.m_def,repeats=True)


    class nxp_bounding_box(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='bounding_box',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_UNITLESS',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The bounding box around the recorded recorded reflection.        Should be
                an integer array of length 6, where the 6 values        are pixel
                positions or frame numbers, as follows:              =====
                ===========================       index  meaning       =====
                ===========================       0      The lower pixel x position
                1      The upper pixel x position       2      The lower pixel y position
                3      The upper pixel y position       4      The lower frame number
                5      The upper frame number       =====  ===========================
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-bounding-box-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-bounding-box-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-bounding-box-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-bounding-box-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_bounding_box = SubSection(sub_section=nxp_bounding_box.m_def,repeats=True)


    class nxp_background_mean(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='background_mean',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The mean background under the reflection peak
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-background-mean-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-background-mean-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-background-mean-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-background-mean-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_background_mean = SubSection(sub_section=nxp_background_mean.m_def,repeats=True)


    class nxp_int_prf(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='int_prf',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The estimate of the reflection intensity by profile fitting
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-prf-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-prf-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-prf-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-prf-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_int_prf = SubSection(sub_section=nxp_int_prf.m_def,repeats=True)


    class nxp_int_prf_var(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='int_prf_var',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The variance on the estimate of the reflection intensity by profile
                fitting
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-prf-var-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-prf-var-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-prf-var-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-prf-var-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_int_prf_var = SubSection(sub_section=nxp_int_prf_var.m_def,repeats=True)


    class nxp_int_prf_errors(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='int_prf_errors',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The standard deviation of the estimate of the reflection intensity by
                profile       fitting
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-prf-errors-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-prf-errors-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-prf-errors-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-prf-errors-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_int_prf_errors = SubSection(sub_section=nxp_int_prf_errors.m_def,repeats=True)


    class nxp_int_sum(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='int_sum',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        The estimate of the reflection intensity by summation
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-sum-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-sum-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-sum-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-sum-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_int_sum = SubSection(sub_section=nxp_int_sum.m_def,repeats=True)


    class nxp_int_sum_var(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='int_sum_var',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The variance on the estimate of the reflection intensity by
                summation
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-sum-var-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-sum-var-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-sum-var-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-sum-var-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_int_sum_var = SubSection(sub_section=nxp_int_sum_var.m_def,repeats=True)


    class nxp_int_sum_errors(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='int_sum_errors',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The standard deviation of the estimate of the reflection intensity by
                summation
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-sum-errors-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-sum-errors-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-sum-errors-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-sum-errors-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_int_sum_errors = SubSection(sub_section=nxp_int_sum_errors.m_def,repeats=True)


    class nxp_lp(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='lp',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The LP correction factor to be applied to the reflection intensities
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-lp-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-lp-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-lp-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-lp-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_lp = SubSection(sub_section=nxp_lp.m_def,repeats=True)


    class nxp_prf_cc(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='prf_cc',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The correlation of the reflection profile with the reference profile
                used in profile fitting
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-prf-cc-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-prf-cc-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-prf-cc-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-prf-cc-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_prf_cc = SubSection(sub_section=nxp_prf_cc.m_def,repeats=True)


    class nxp_overlaps(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='overlaps',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        An adjacency list specifying the spatial overlaps of reflections. The
                adjacency list is specified using an array data type where the elements
                of the array are the indices of the adjacent overlapped reflection
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-overlaps-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-overlaps-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-overlaps-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-overlaps-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_overlaps = SubSection(sub_section=nxp_overlaps.m_def,repeats=True)


    class nxp_polar_angle(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='polar_angle',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Polar angle of reflection centroid, following the NeXus simple (spherical
                polar) coordinate system
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-polar-angle-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-polar-angle-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-polar-angle-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-polar-angle-description-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_polar_angle = SubSection(sub_section=nxp_polar_angle.m_def,repeats=True)


    class nxp_azimuthal_angle(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='azimuthal_angle',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Azimuthal angle of reflection centroid, following the NeXus simple
                (spherical polar) coordinate system
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-azimuthal-angle-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-azimuthal-angle-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_azimuthal_angle = SubSection(sub_section=nxp_azimuthal_angle.m_def,repeats=True)


    class nxp_description(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='description',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Describes the dataset
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-description-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-description-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXfresnel_zone_plate(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXfresnel_zone_plate',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        A fresnel zone plate
        https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate
        .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_TRANSFORMATIONS(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXtransformations.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXtransformations',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        "Engineering" position of the fresnel zone plate
                https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-transformations-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-transformations-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_TRANSFORMATIONS = SubSection(sub_section=nxp_TRANSFORMATIONS.m_def,repeats=True)


    class nxp_focus_parameters(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='focus_parameters',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        list of polynomial coefficients describing the focal length of the zone
                plate, in increasing powers of photon energy,         that describes the
                focal length of the zone plate (in microns) at an X-ray photon energy (in
                electron volts).
                https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-focus-parameters-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-focus-parameters-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_focus_parameters = SubSection(sub_section=nxp_focus_parameters.m_def,repeats=True)


    class nxp_outer_diameter(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='outer_diameter',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-outer-diameter-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-outer-diameter-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_outer_diameter = SubSection(sub_section=nxp_outer_diameter.m_def,repeats=True)


    class nxp_outermost_zone_width(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='outermost_zone_width',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-outermost-zone-width-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-outermost-zone-width-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_outermost_zone_width = SubSection(sub_section=nxp_outermost_zone_width.m_def,repeats=True)


    class nxp_central_stop_diameter(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='central_stop_diameter',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-central-stop-diameter-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-central-stop-diameter-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_central_stop_diameter = SubSection(sub_section=nxp_central_stop_diameter.m_def,repeats=True)


    class nxp_fabrication(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='fabrication',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        how the zone plate was manufactured
                https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-fabrication-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-fabrication-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: etched,plated,zone doubled,other''',
            default='etched,plated,zone doubled,other',
        )
    nxp_fabrication = SubSection(sub_section=nxp_fabrication.m_def,repeats=True)


    class nxp_zone_height(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='zone_height',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-zone-height-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-zone-height-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_zone_height = SubSection(sub_section=nxp_zone_height.m_def,repeats=True)


    class nxp_zone_material(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='zone_material',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Material of the zones themselves
                https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-zone-material-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-zone-material-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_zone_material = SubSection(sub_section=nxp_zone_material.m_def,repeats=True)


    class nxp_zone_support_material(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='zone_support_material',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Material present between the zones. This is usually only present for the
                "zone doubled" fabrication process
                https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-zone-support-material-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-zone-support-material-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_zone_support_material = SubSection(sub_section=nxp_zone_support_material.m_def,repeats=True)


    class nxp_central_stop_material(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='central_stop_material',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-central-stop-material-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-central-stop-material-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_central_stop_material = SubSection(sub_section=nxp_central_stop_material.m_def,repeats=True)


    class nxp_central_stop_thickness(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='central_stop_thickness',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-central-stop-thickness-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-central-stop-thickness-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_central_stop_thickness = SubSection(sub_section=nxp_central_stop_thickness.m_def,repeats=True)


    class nxp_mask_thickness(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='mask_thickness',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-mask-thickness-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-mask-thickness-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_mask_thickness = SubSection(sub_section=nxp_mask_thickness.m_def,repeats=True)


    class nxp_mask_material(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='mask_material',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        If no mask is present, set mask_thickness to 0 and omit the mask_material
                field
                https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-mask-material-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-mask-material-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_mask_material = SubSection(sub_section=nxp_mask_material.m_def,repeats=True)


    class nxp_support_membrane_material(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='support_membrane_material',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-support-membrane-material-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-support-membrane-material-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_support_membrane_material = SubSection(sub_section=nxp_support_membrane_material.m_def,repeats=True)


    class nxp_support_membrane_thickness(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='support_membrane_thickness',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-support-membrane-thickness-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-support-membrane-thickness-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_support_membrane_thickness = SubSection(sub_section=nxp_support_membrane_thickness.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXparameters(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXparameters',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        Container for parameters, usually used in processing or analysis.
        https://manual.nexusformat.org/classes/base_classes/NXparameters.html#nxparameters
        .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXparameters.html#nxparameters',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_term(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='term',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='unbounded',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CHAR',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        A parameter (also known as a term) that is used in or results from
                processing.
                https://manual.nexusformat.org/classes/base_classes/NXparameters.html#nxparameters-term-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXparameters.html#nxparameters-term-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_units(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='units',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXparameters.html#nxparameters-term-units-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXparameters.html#nxparameters-term-units-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_units = SubSection(sub_section=nxp_units.m_def,repeats=True)
    nxp_term = SubSection(sub_section=nxp_term.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXparameters.html#nxparameters-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXparameters.html#nxparameters-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXdetector_module(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXdetector_module',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                Geometry and logical description of a detector module. When used, child group to
        NXdetector.                                  Many detectors consist of multiple
        smaller modules. Sometimes it is important to know the exact position of such
        modules.                 This is the purpose of this group. It is a child group to
        NXdetector.

        Note, the pixel size is given as values in the array fast_pixel_direction and
        slow_pixel_direction.
        https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module
        .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_data_origin(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='data_origin',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        A dimension-2 or dimension-3 field which gives the indices
                of the origin of the hyperslab of data for this module in the
                main area detector image in the parent NXdetector module.

                The data_origin is 0-based.

                The frame number dimension (np) is omitted.  Thus the
                data_origin field for a dimension-2 dataset with indices (np, i, j)
                will be an array with indices (i, j), and for a dimension-3
                dataset with indices (np, i, j, k) will be an array with indices
                (i, j, k).

                The :ref:`order <Design-ArrayStorageOrder>` of indices (i, j or i, j, k)
                is slow to fast.
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-data-origin-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-data-origin-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_data_origin = SubSection(sub_section=nxp_data_origin.m_def,repeats=True)


    class nxp_data_size(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='data_size',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Two or three values for the size of the module in pixels in
                each direction. Dimensionality and order of indices is the
                same as for data_origin.
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-data-size-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-data-size-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_data_size = SubSection(sub_section=nxp_data_size.m_def,repeats=True)


    class nxp_module_offset(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='module_offset',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Offset of the module in regards to the origin of the detector in an
                arbitrary direction.
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-module-offset-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-module-offset-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_transformation_type(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='transformation_type',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-module-offset-transformation-type-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-module-offset-transformation-type-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: translation''',
                default='translation',
            )
        nxp_transformation_type = SubSection(sub_section=nxp_transformation_type.m_def,repeats=True)
        class nxp_vector(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='vector',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_NUMBER',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Three values that define the axis for this transformation
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-module-offset-vector-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-module-offset-vector-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_vector = SubSection(sub_section=nxp_vector.m_def,repeats=True)
        class nxp_offset(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='offset',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_NUMBER',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            A fixed offset applied before the transformation (three vector
                components).
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-module-offset-offset-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-module-offset-offset-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_offset = SubSection(sub_section=nxp_offset.m_def,repeats=True)
        class nxp_offset_units(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='offset_units',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Units of the offset.
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-module-offset-offset-units-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-module-offset-offset-units-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_offset_units = SubSection(sub_section=nxp_offset_units.m_def,repeats=True)
        class nxp_depends_on(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='depends_on',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Points to the path of the next element in the geometry chain.
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-module-offset-depends-on-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-module-offset-depends-on-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_depends_on = SubSection(sub_section=nxp_depends_on.m_def,repeats=True)
    nxp_module_offset = SubSection(sub_section=nxp_module_offset.m_def,repeats=True)


    class nxp_fast_pixel_direction(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='fast_pixel_direction',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Values along the direction of :ref:`fastest varying
                <Design-ArrayStorageOrder>`  :index:`pixel direction<dimension; fastest
                varying>`. Each value in this                        array is the size of
                a pixel in the units specified. Alternatively, if only one
                value is given, all pixels in this direction have the same value. The
                direction                        itself is given through the vector
                attribute.
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-fast-pixel-direction-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-fast-pixel-direction-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_transformation_type(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='transformation_type',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-fast-pixel-direction-transformation-type-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-fast-pixel-direction-transformation-type-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: translation''',
                default='translation',
            )
        nxp_transformation_type = SubSection(sub_section=nxp_transformation_type.m_def,repeats=True)
        class nxp_vector(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='vector',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_NUMBER',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Three values that define the axis for this transformation
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-fast-pixel-direction-vector-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-fast-pixel-direction-vector-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_vector = SubSection(sub_section=nxp_vector.m_def,repeats=True)
        class nxp_offset(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='offset',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_NUMBER',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            A fixed offset applied before the transformation (three vector
                components).
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-fast-pixel-direction-offset-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-fast-pixel-direction-offset-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_offset = SubSection(sub_section=nxp_offset.m_def,repeats=True)
        class nxp_offset_units(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='offset_units',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Units of the offset.
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-fast-pixel-direction-offset-units-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-fast-pixel-direction-offset-units-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_offset_units = SubSection(sub_section=nxp_offset_units.m_def,repeats=True)
        class nxp_depends_on(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='depends_on',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Points to the path of the next element in the geometry chain.
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-fast-pixel-direction-depends-on-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-fast-pixel-direction-depends-on-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_depends_on = SubSection(sub_section=nxp_depends_on.m_def,repeats=True)
    nxp_fast_pixel_direction = SubSection(sub_section=nxp_fast_pixel_direction.m_def,repeats=True)


    class nxp_slow_pixel_direction(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='slow_pixel_direction',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Values along the direction of :ref:`slowest
                varying<Design-ArrayStorageOrder>` :index:`pixel direction<dimension;
                slowest varying>`. Each value in this       array is the size of a pixel
                in the units specified. Alternatively, if only one       value is given,
                all pixels in this direction have the same value. The direction
                itself is given through the vector attribute.
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-slow-pixel-direction-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-slow-pixel-direction-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_transformation_type(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='transformation_type',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-slow-pixel-direction-transformation-type-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-slow-pixel-direction-transformation-type-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: translation''',
                default='translation',
            )
        nxp_transformation_type = SubSection(sub_section=nxp_transformation_type.m_def,repeats=True)
        class nxp_vector(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='vector',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_NUMBER',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Three values that define the axis for this transformation
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-slow-pixel-direction-vector-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-slow-pixel-direction-vector-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_vector = SubSection(sub_section=nxp_vector.m_def,repeats=True)
        class nxp_offset(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='offset',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_NUMBER',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            A fixed offset applied before the transformation (three vector
                components).
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-slow-pixel-direction-offset-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-slow-pixel-direction-offset-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_offset = SubSection(sub_section=nxp_offset.m_def,repeats=True)
        class nxp_offset_units(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='offset_units',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Units of the offset.
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-slow-pixel-direction-offset-units-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-slow-pixel-direction-offset-units-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_offset_units = SubSection(sub_section=nxp_offset_units.m_def,repeats=True)
        class nxp_depends_on(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='depends_on',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Points to the path of the next element in the geometry chain.
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-slow-pixel-direction-depends-on-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-slow-pixel-direction-depends-on-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_depends_on = SubSection(sub_section=nxp_depends_on.m_def,repeats=True)
    nxp_slow_pixel_direction = SubSection(sub_section=nxp_slow_pixel_direction.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXoff_geometry(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXoff_geometry',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                Geometry (shape) description.     The format closely matches the Object File
        Format (OFF) which can be output     by most CAD software.     It can be used to
        describe the shape of any beamline component, including detectors.     In the case
        of detectors it can be used to define the shape of a single pixel, or,     if the
        pixel shapes are non-uniform, to describe the shape of the whole detector.
        https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry
        .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_vertices(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='vertices',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        List of x,y,z coordinates for vertices.       The origin of the
                coordinates is the position of the parent component, for       example the
                NXdetector which the geometry describes.       If the shape describes a
                single pixel for a detector with uniform pixel       shape then the origin
                is the position of each pixel as described by the
                ``x/y/z_pixel_offset`` datasets in ``NXdetector``.
                https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry-vertices-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry-vertices-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_vertices = SubSection(sub_section=nxp_vertices.m_def,repeats=True)


    class nxp_winding_order(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='winding_order',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        List of indices of vertices in the ``vertices`` dataset to form each face,
                right-hand rule for face normal.
                https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry-winding-order-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry-winding-order-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_winding_order = SubSection(sub_section=nxp_winding_order.m_def,repeats=True)


    class nxp_faces(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='faces',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        The start index in ``winding_order`` for each face.
                https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry-faces-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry-faces-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_faces = SubSection(sub_section=nxp_faces.m_def,repeats=True)


    class nxp_detector_faces(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='detector_faces',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        List of pairs of index in the "faces" dataset and detector id. Face IDs in
                the first column, and corresponding detector IDs in the second column.
                This dataset should only be used only if the ``NXoff_geometry`` group is
                describing a detector.       Note, the face indices must be in ascending
                order but need not be       consecutive as not every face in faces need be
                a detecting surface or       boundary of detecting volume.       Can use
                multiple entries with the same detector id to define detector volumes.
                https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry-detector-faces-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry-detector-faces-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_detector_faces = SubSection(sub_section=nxp_detector_faces.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXpdb(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXpdb',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_ignoreExtraGroups = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='true',)

    nxp_ignoreExtraFields = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='true',)

    nxp_ignoreExtraAttributes = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='true',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                A NeXus transliteration of a PDB file, to be validated only as a PDB
        rather than in NeXus.

        Use :ref:`NXpdb` to incorporate the information in an arbitrary
        PDB into a NeXus file.

        The main suggestion is to use this as a container                 class for a PDB
        entry to describe a sample in NXsample,                 but it may be more
        appropriate to place this higher in the                 hierarchy, say in NXentry.

        The structure has to follow the structure of a PDB                 with each PDB
        data block mapped to a NeXus group of class NXpdb,                 using a
        lowercase version of the data block name as the name                 of the NeXus
        group, each PDB category in that data block                 mapped to a NeXus
        group of class NXpdb and with each PDB column                 mapped to a NeXus
        field.  Each column in a looped PDB category                 should always be
        presented as a 1-dimensional array.  The columns                  in an unlooped
        PDB category should be presented as scalar values.                   If a PDB
        category specifies particular units for columns, the same                  units
        should beused for the corresponding fields.

        A PDB entry is unambigous when all information is carried as text.
        All text data should be presented as quoted strings, with the quote
        marks except for the null values "." or "?"

        For clarity in NXpdb form, numeric data may be presented using the
        numeric types specified in the mmCIF dictionary.  In that case,                 if
        a PDB null value, "." or "?", is contained in a numeric column, the
        IEEE nan should be used for "?" and the IEEE inf should be used for ".".

        An arbitrary DDL2 CIF file can be represented in NeXus using NXpdb.
        However, if save frames are required, an NXpdb_class  attribute with the
        value "CBF_cbfsf" is required for each NeXus group representing a save
        frame.  NXpdb attributes are not required for other CIF components,
        but may be used to provide internal documentation.

        The nesting of NXpdb groups and datasets that correspond to a CIF with
        two categories and one saveframe, including the NXpdb_class attribues is::

        (datablock1):NXpdb                            @NXpdb_class:CBF_cbfdb
        (category1):NXpdb                              @NXpdb_class:CBF_cbfcat
        (column_name1):[...]                               (column_name2):[...]
        (column_name3):[...]                               ...
        (category2):NXpdb                               @NXpdb_class:CBF_cbfcat
        (column_name4):[...]                               (column_name5):[...]
        (column_name6):[...]                               ...
        (saveframe1):NXpdb                               @NXpdb_class:CBF_cbfsf
        (category3):NXpdb                                 @NXpdb_class:CBF_cbfcat
        (column_name7):[...]                                 (column_name8):[...]
        (column_name9):[...]                                  ...
        ...                            ...

        For example, a PDB entry that begins::

        data_1YVA                         #                          _entry.id   1YVA
        #                         _audit_conform.dict_name       mmcif_pdbx.dic
        _audit_conform.dict_version    5.279
        _audit_conform.dict_location
        http://mmcif.pdb.org/dictionaries/ascii/mmcif_pdbx.dic                         #
        loop_                         _database_2.database_id
        _database_2.database_code                         PDB   1YVA
        RCSB  RCSB031959                         WWPDB D_1000031959
        #

        would produce::                                  sample:NXsample
        1yva:NXpdb                              entry:NXpdb
        id:"1YVA"                              audit_conform:NXpdb
        dict_name:"mmcif_pdbx.dic"                                  dict_version:"5.279"
        dict_location:"http://mmcif.pdb.org/dictionaries/ascii/mmcif_pdbx.dic"
        database_2:NXpdb
        database_id:["PDB","RCSB","WWPDB"]
        database_code:["1YVA","RCSB031959","D_1000031959"]

        another example is the following excerpt from pdb entry 9ins, giving the sequences
        of the two chains::

        loop_                         _entity_poly.entity_id
        _entity_poly.nstd_linkage                         _entity_poly.nstd_monomer
        _entity_poly.pdbx_seq_one_letter_code
        _entity_poly.pdbx_seq_one_letter_code_can
        _entity_poly.type                         1 no no GIVEQCCTSICSLYQLENYCN
        GIVEQCCTSICSLYQLENYCN polypeptide(L)                         2 no no
        FVNQHLCGSHLVEALYLVCGERGFFYTPKA FVNQHLCGSHLVEALYLVCGERGFFYTPKA
        polypeptide(L)

        which converts to::

        entity_poly:NXpdb                           @NXpdb_class:CBF_cbfcat
        entity_id:["1", "2"]                           nstd_linkage:["no", "no"]
        nstd_monomer:["no", "no"]
        pdbx_seq_one_letter_code:["GIVEQCCTSICSLYQLENYCN","FVNQHLCGSHLVEALYLVCGERGFFYTPKA"]
        pdbx_seq_one_letter_code_can:["GIVEQCCTSICSLYQLENYCN","FVNQHLCGSHLVEALYLVCGERGFFYTPKA"]
        type:["polypeptide(L)", "polypeptide(L)"]

        https://manual.nexusformat.org/classes/base_classes/NXpdb.html#nxpdb .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXpdb.html#nxpdb',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)


class NXbeam(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXbeam',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                Properties of the neutron or X-ray beam at a given location.                   It
        will be referenced         by beamline component groups within the
        :ref:`NXinstrument` group or by the :ref:`NXsample` group. Note         that
        variables such as the incident energy could be scalar values or arrays. This group
        is         especially valuable in storing the results of instrument simulations in
        which it is useful         to specify the beam profile, time distribution etc. at
        each beamline component. Otherwise,         its most likely use is in the
        :ref:`NXsample` group in which it defines the results of the neutron
        scattering by the sample, e.g., energy transfer, polarizations.
        https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_DATA(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXdata',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Distribution of beam with respect to relevant variable e.g. wavelength.
                This is mainly             useful for simulations which need to store
                plottable information at each beamline             component.
                https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-data-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-data-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_DATA = SubSection(sub_section=nxp_DATA.m_def,repeats=True)


    class nxp_distance(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='distance',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Distance from sample
                https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-distance-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-distance-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)


    class nxp_incident_energy(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='incident_energy',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ENERGY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Energy on entering beamline component
                https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-incident-energy-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-incident-energy-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_incident_energy = SubSection(sub_section=nxp_incident_energy.m_def,repeats=True)


    class nxp_final_energy(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='final_energy',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ENERGY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Energy on leaving beamline component
                https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-final-energy-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-final-energy-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_final_energy = SubSection(sub_section=nxp_final_energy.m_def,repeats=True)


    class nxp_energy_transfer(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='energy_transfer',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ENERGY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Energy change caused by beamline component
                https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-energy-transfer-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-energy-transfer-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_energy_transfer = SubSection(sub_section=nxp_energy_transfer.m_def,repeats=True)


    class nxp_incident_wavelength(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='incident_wavelength',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_WAVELENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Wavelength on entering beamline component
                https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-incident-wavelength-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-incident-wavelength-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_incident_wavelength = SubSection(sub_section=nxp_incident_wavelength.m_def,repeats=True)


    class nxp_incident_wavelength_spread(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='incident_wavelength_spread',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_WAVELENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Wavelength spread FWHM on entering component
                https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-incident-wavelength-spread-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-incident-wavelength-spread-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_incident_wavelength_spread = SubSection(sub_section=nxp_incident_wavelength_spread.m_def,repeats=True)


    class nxp_incident_beam_divergence(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='incident_beam_divergence',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Divergence of beam entering this component
                https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-incident-beam-divergence-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-incident-beam-divergence-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_incident_beam_divergence = SubSection(sub_section=nxp_incident_beam_divergence.m_def,repeats=True)


    class nxp_extent(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='extent',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Size of the beam entering this component
                https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-extent-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-extent-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_extent = SubSection(sub_section=nxp_extent.m_def,repeats=True)


    class nxp_final_wavelength(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='final_wavelength',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_WAVELENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Wavelength on leaving beamline component
                https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-final-wavelength-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-final-wavelength-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_final_wavelength = SubSection(sub_section=nxp_final_wavelength.m_def,repeats=True)


    class nxp_incident_polarization(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='incident_polarization',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Polarization vector on entering beamline component
                https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-incident-polarization-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-incident-polarization-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_incident_polarization = SubSection(sub_section=nxp_incident_polarization.m_def,repeats=True)


    class nxp_final_polarization(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='final_polarization',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Polarization vector on leaving beamline component
                https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-final-polarization-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-final-polarization-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_final_polarization = SubSection(sub_section=nxp_final_polarization.m_def,repeats=True)


    class nxp_final_wavelength_spread(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='final_wavelength_spread',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_WAVELENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Wavelength spread FWHM of beam leaving this component
                https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-final-wavelength-spread-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-final-wavelength-spread-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_final_wavelength_spread = SubSection(sub_section=nxp_final_wavelength_spread.m_def,repeats=True)


    class nxp_final_beam_divergence(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='final_beam_divergence',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Divergence FWHM of beam leaving this component
                https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-final-beam-divergence-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-final-beam-divergence-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_final_beam_divergence = SubSection(sub_section=nxp_final_beam_divergence.m_def,repeats=True)


    class nxp_flux(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='flux',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLUX',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        flux incident on beam plane area
                https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-flux-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-flux-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_flux = SubSection(sub_section=nxp_flux.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXgrating(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXgrating',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        A diffraction grating, as could be used in a soft X-ray monochromator
        https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_shape(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXshape.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXshape',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='shape',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        A NXshape group describing the shape of the mirror
                https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-shape-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-shape-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_shape = SubSection(sub_section=nxp_shape.m_def,repeats=True)


    class nxp_figure_data(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='figure_data',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXdata',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Numerical description of the surface figure of the mirror.
                https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-figure-data-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-figure-data-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_figure_data = SubSection(sub_section=nxp_figure_data.m_def,repeats=True)


    class nxp_TRANSFORMATIONS(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXtransformations.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXtransformations',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        "Engineering" position of the grating
                https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-transformations-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-transformations-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_TRANSFORMATIONS = SubSection(sub_section=nxp_TRANSFORMATIONS.m_def,repeats=True)


    class nxp_angles(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='angles',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Blaze or trapezoidal angles, with the angle of the upstream facing edge
                listed first. Blazed gratings can be identified by the low value of the
                first-listed angle.
                https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-angles-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-angles-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_angles = SubSection(sub_section=nxp_angles.m_def,repeats=True)


    class nxp_period(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='period',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        List of polynomial coefficients describing the spatial separation of
                lines/grooves as a function of position along the grating, in increasing
                powers of position. Gratings which do not have variable line spacing will
                only have a single coefficient (constant).
                https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-period-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-period-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_period = SubSection(sub_section=nxp_period.m_def,repeats=True)


    class nxp_duty_cycle(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='duty_cycle',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_UNITLESS',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-duty-cycle-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-duty-cycle-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_duty_cycle = SubSection(sub_section=nxp_duty_cycle.m_def,repeats=True)


    class nxp_depth(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='depth',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-depth-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-depth-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_depth = SubSection(sub_section=nxp_depth.m_def,repeats=True)


    class nxp_diffraction_order(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='diffraction_order',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_UNITLESS',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-diffraction-order-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-diffraction-order-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_diffraction_order = SubSection(sub_section=nxp_diffraction_order.m_def,repeats=True)


    class nxp_deflection_angle(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='deflection_angle',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Angle between the incident beam and the utilised outgoing beam.
                https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-deflection-angle-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-deflection-angle-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_deflection_angle = SubSection(sub_section=nxp_deflection_angle.m_def,repeats=True)


    class nxp_interior_atmosphere(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='interior_atmosphere',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-interior-atmosphere-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-interior-atmosphere-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: vacuum,helium,argon''',
            default='vacuum,helium,argon',
        )
    nxp_interior_atmosphere = SubSection(sub_section=nxp_interior_atmosphere.m_def,repeats=True)


    class nxp_substrate_material(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='substrate_material',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-substrate-material-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-substrate-material-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_substrate_material = SubSection(sub_section=nxp_substrate_material.m_def,repeats=True)


    class nxp_substrate_density(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='substrate_density',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_MASS_DENSITY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-substrate-density-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-substrate-density-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_substrate_density = SubSection(sub_section=nxp_substrate_density.m_def,repeats=True)


    class nxp_substrate_thickness(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='substrate_thickness',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-substrate-thickness-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-substrate-thickness-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_substrate_thickness = SubSection(sub_section=nxp_substrate_thickness.m_def,repeats=True)


    class nxp_coating_material(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='coating_material',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-coating-material-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-coating-material-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_coating_material = SubSection(sub_section=nxp_coating_material.m_def,repeats=True)


    class nxp_substrate_roughness(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='substrate_roughness',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-substrate-roughness-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-substrate-roughness-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_substrate_roughness = SubSection(sub_section=nxp_substrate_roughness.m_def,repeats=True)


    class nxp_coating_roughness(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='coating_roughness',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-coating-roughness-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-coating-roughness-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_coating_roughness = SubSection(sub_section=nxp_coating_roughness.m_def,repeats=True)


    class nxp_layer_thickness(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='layer_thickness',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        An array describing the thickness of each layer
                https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-layer-thickness-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-layer-thickness-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_layer_thickness = SubSection(sub_section=nxp_layer_thickness.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXuser(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXuser',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                Contact information for a user.                                    The format
        allows more                  than one user with the same affiliation and contact
        information,                  but a second :ref:`NXuser` group should be used if
        they have different                  affiliations, etc.
        https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_name(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='name',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Name of user responsible for this entry
                https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-name-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-name-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)


    class nxp_role(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='role',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Role of user responsible for this entry.                         Suggested
                roles are "local_contact",
                "principal_investigator", and "proposer"
                https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-role-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-role-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_role = SubSection(sub_section=nxp_role.m_def,repeats=True)


    class nxp_affiliation(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='affiliation',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Affiliation of user
                https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-affiliation-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-affiliation-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_affiliation = SubSection(sub_section=nxp_affiliation.m_def,repeats=True)


    class nxp_address(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='address',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Address of user
                https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-address-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-address-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_address = SubSection(sub_section=nxp_address.m_def,repeats=True)


    class nxp_telephone_number(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='telephone_number',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Telephone number of user
                https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-telephone-number-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-telephone-number-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_telephone_number = SubSection(sub_section=nxp_telephone_number.m_def,repeats=True)


    class nxp_fax_number(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='fax_number',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Fax number of user
                https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-fax-number-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-fax-number-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_fax_number = SubSection(sub_section=nxp_fax_number.m_def,repeats=True)


    class nxp_email(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='email',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Email of user
                https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-email-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-email-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_email = SubSection(sub_section=nxp_email.m_def,repeats=True)


    class nxp_facility_user_id(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='facility_user_id',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        facility based unique identifier for this person
                e.g. their identification code on the facility
                address/contact database
                https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-facility-user-id-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-facility-user-id-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_facility_user_id = SubSection(sub_section=nxp_facility_user_id.m_def,repeats=True)


    class nxp_ORCID(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='ORCID',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        an author code, Open Researcher and Contributor ID,
                defined by https://orcid.org and expressed as a URI
                https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-orcid-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-orcid-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_ORCID = SubSection(sub_section=nxp_ORCID.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXcite(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXcite',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                A literature reference                                  Definition to include
        references for example for detectors,                 manuals, instruments,
        acquisition or analysis software used.                                  The idea
        would be to include this in the relevant NeXus object:
        :ref:`NXdetector` for detectors, :ref:`NXinstrument` for instruments, etc.
        https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_description(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='description',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CHAR',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        This should describe the reason for including this reference.
                For example: The dataset in this group was normalised using the method
                which is described in detail in this reference.
                https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-description-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-description-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)


    class nxp_url(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='url',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CHAR',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        URL referencing the document or data.
                https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-url-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-url-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_url = SubSection(sub_section=nxp_url.m_def,repeats=True)


    class nxp_doi(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='doi',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CHAR',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        DOI referencing the document or data.
                https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-doi-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-doi-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_doi = SubSection(sub_section=nxp_doi.m_def,repeats=True)


    class nxp_endnote(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='endnote',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CHAR',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Bibliographic reference data in EndNote format.
                https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-endnote-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-endnote-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_endnote = SubSection(sub_section=nxp_endnote.m_def,repeats=True)


    class nxp_bibtex(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='bibtex',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CHAR',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Bibliographic reference data in BibTeX format.
                https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-bibtex-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-bibtex-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_bibtex = SubSection(sub_section=nxp_bibtex.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXsample_component(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXsample_component',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                One group like this per component can be recorded For a sample consisting of
        multiple components.
        https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component
        .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_transmission(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='transmission',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXdata',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        As a function of Wavelength
                https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-transmission-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-transmission-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_transmission = SubSection(sub_section=nxp_transmission.m_def,repeats=True)


    class nxp_name(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='name',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Descriptive name of sample component
                https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-name-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-name-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)


    class nxp_chemical_formula(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='chemical_formula',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The chemical formula specified using CIF conventions.
                Abbreviated version of CIF standard:
                * Only recognized element symbols may be used.                         *
                Each element symbol is followed by a 'count' number. A count of '1' may be
                omitted.                         * A space or parenthesis must separate
                each cluster of (element symbol + count).                         * Where
                a group of elements is enclosed in parentheses, the multiplier for the
                group must follow the closing parentheses. That is, all element and group
                multipliers are assumed to be printed as subscripted numbers.
                * Unless the elements are ordered in a manner that corresponds to their
                chemical                            structure, the order of the elements
                within any group or moiety depends on                            whether
                or not carbon is present.                         * If carbon is present,
                the order should be:                                                     -
                C, then H, then the other elements in alphabetical order of their symbol.
                - If carbon is not present, the elements are listed purely in alphabetic
                order of their symbol.
                * This is the *Hill* system used by Chemical Abstracts.
                https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-chemical-formula-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-chemical-formula-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_chemical_formula = SubSection(sub_section=nxp_chemical_formula.m_def,repeats=True)


    class nxp_unit_cell_abc(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='unit_cell_abc',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Crystallography unit cell parameters a, b, and c
                https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-unit-cell-abc-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-unit-cell-abc-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_unit_cell_abc = SubSection(sub_section=nxp_unit_cell_abc.m_def,repeats=True)


    class nxp_unit_cell_alphabetagamma(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='unit_cell_alphabetagamma',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Crystallography unit cell parameters alpha, beta, and gamma
                https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-unit-cell-alphabetagamma-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-unit-cell-alphabetagamma-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_unit_cell_alphabetagamma = SubSection(sub_section=nxp_unit_cell_alphabetagamma.m_def,repeats=True)


    class nxp_unit_cell_volume(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='unit_cell_volume',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_VOLUME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Volume of the unit cell
                https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-unit-cell-volume-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-unit-cell-volume-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_unit_cell_volume = SubSection(sub_section=nxp_unit_cell_volume.m_def,repeats=True)


    class nxp_sample_orientation(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='sample_orientation',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        This will follow the Busing and Levy convention from Acta.Crysta v22, p457
                (1967)
                https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-sample-orientation-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-sample-orientation-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_sample_orientation = SubSection(sub_section=nxp_sample_orientation.m_def,repeats=True)


    class nxp_orientation_matrix(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='orientation_matrix',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Orientation matrix of single crystal sample component.
                This will follow the Busing and Levy convention from Acta.Crysta v22, p457
                (1967)
                https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-orientation-matrix-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-orientation-matrix-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_orientation_matrix = SubSection(sub_section=nxp_orientation_matrix.m_def,repeats=True)


    class nxp_mass(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='mass',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_MASS',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Mass of sample component
                https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-mass-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-mass-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_mass = SubSection(sub_section=nxp_mass.m_def,repeats=True)


    class nxp_density(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='density',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_MASS_DENSITY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Density of sample component
                https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-density-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-density-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_density = SubSection(sub_section=nxp_density.m_def,repeats=True)


    class nxp_relative_molecular_mass(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='relative_molecular_mass',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_MASS',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Relative Molecular Mass of sample component
                https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-relative-molecular-mass-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-relative-molecular-mass-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_relative_molecular_mass = SubSection(sub_section=nxp_relative_molecular_mass.m_def,repeats=True)


    class nxp_description(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='description',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Description of the sample component
                https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-description-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-description-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)


    class nxp_volume_fraction(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='volume_fraction',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Volume fraction of component
                https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-volume-fraction-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-volume-fraction-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_volume_fraction = SubSection(sub_section=nxp_volume_fraction.m_def,repeats=True)


    class nxp_scattering_length_density(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='scattering_length_density',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_SCATTERING_LENGTH_DENSITY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Scattering length density of component
                https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-scattering-length-density-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-scattering-length-density-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_scattering_length_density = SubSection(sub_section=nxp_scattering_length_density.m_def,repeats=True)


    class nxp_unit_cell_class(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='unit_cell_class',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        In case it is all we know and we want to record/document it
                https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-unit-cell-class-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-unit-cell-class-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values:
                triclinic,monoclinic,orthorhombic,tetragonal,rhombohedral,hexagonal,cubic''',
            default='triclinic,monoclinic,orthorhombic,tetragonal,rhombohedral,hexagonal,cubic',
        )
    nxp_unit_cell_class = SubSection(sub_section=nxp_unit_cell_class.m_def,repeats=True)


    class nxp_space_group(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='space_group',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Crystallographic space group
                https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-space-group-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-space-group-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_space_group = SubSection(sub_section=nxp_space_group.m_def,repeats=True)


    class nxp_point_group(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='point_group',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Crystallographic point group, deprecated if space_group present
                https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-point-group-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-point-group-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_point_group = SubSection(sub_section=nxp_point_group.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXpinhole(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXpinhole',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                A simple pinhole.                                  For more complex geometries,
        :ref:`NXaperture` should be used.
        https://manual.nexusformat.org/classes/base_classes/NXpinhole.html#nxpinhole .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXpinhole.html#nxpinhole',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_depends_on(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='depends_on',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CHAR',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Points to the path of the last element in the geometry chain that places
                this object in space.                          When followed through that
                chain is supposed to end at an element depending
                on "." i.e. the origin of the coordinate system.
                If desired the location of the slit can also be described relative to
                an NXbeam, which will allow a simple description of a non-centred pinhole.
                https://manual.nexusformat.org/classes/base_classes/NXpinhole.html#nxpinhole-depends-on-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXpinhole.html#nxpinhole-depends-on-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_depends_on = SubSection(sub_section=nxp_depends_on.m_def,repeats=True)


    class nxp_diameter(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='diameter',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Size of the circular hole defining the transmitted beam size.
                https://manual.nexusformat.org/classes/base_classes/NXpinhole.html#nxpinhole-diameter-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXpinhole.html#nxpinhole-diameter-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_diameter = SubSection(sub_section=nxp_diameter.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXpinhole.html#nxpinhole-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXpinhole.html#nxpinhole-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXnote(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXnote',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                Any additional freeform information not covered by the other base classes.
        This class can be used to store additional information in a                  NeXus
        file e.g. pictures, movies, audio, additional text logs
        https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_author(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='author',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Author or creator of note
                https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-author-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-author-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_author = SubSection(sub_section=nxp_author.m_def,repeats=True)


    class nxp_date(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='date',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_DATE_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Date note created/added
                https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-date-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-date-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_date = SubSection(sub_section=nxp_date.m_def,repeats=True)


    class nxp_type(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='type',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Mime content type of note data field e.g. image/jpeg, text/plain,
                text/html
                https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-type-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-type-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)


    class nxp_file_name(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='file_name',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Name of original file name if note was read from an external source
                https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-file-name-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-file-name-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_file_name = SubSection(sub_section=nxp_file_name.m_def,repeats=True)


    class nxp_description(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='description',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Title of an image or other details of the note
                https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-description-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-description-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)


    class nxp_sequence_index(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_POSINT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='sequence_index',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_POSINT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Sequence index of note, for placing a sequence of              multiple
                **NXnote** groups in an order.  Starts with 1.
                https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-sequence-index-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-sequence-index-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_sequence_index = SubSection(sub_section=nxp_sequence_index.m_def,repeats=True)


    class nxp_data(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_BINARY.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='data',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_BINARY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Binary note data - if text, line terminator is [CR][LF].
                https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-data-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-data-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXdetector_group(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXdetector_group',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                Logical grouping of detectors. When used, describes a group of detectors.

        Each detector is represented as an NXdetector                  with its own
        detector data array.  Each detector data array                 may be further
        decomposed into array sections by use of                 NXdetector_module groups.
        Detectors can be grouped logically                 together using
        NXdetector_group. Groups can be further grouped                 hierarchically in
        a single NXdetector_group (for example, if                 there are multiple
        detectors at an endstation or multiple                  endstations at a
        facility).  Alternatively, multiple                  NXdetector_groups can be
        provided.

        The groups are defined hierarchically, with names given                 in the
        group_names field, unique identifying indices given                 in the field
        group_index, and the level in the hierarchy                 given in the
        group_parent field.  For example if an x-ray                 detector group, DET,
        consists of four detectors in a                 rectangular array::
        DTL    DTR                                  DLL    DLR
        We could have::
        group_names: ["DET", "DTL", "DTR", "DLL", "DLR"]
        group_index: [1, 2, 3, 4, 5]                         group_parent:  [-1, 1, 1, 1,
        1]
        https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group
        .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_group_names(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='group_names',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CHAR',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        An array of the names of the detectors given in NXdetector
                groups or the names of hierarchical groupings of detectors
                given as names of NXdetector_group groups or in
                NXdetector_group group_names and group_parent fields as
                having children.
                https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group-group-names-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group-group-names-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_group_names = SubSection(sub_section=nxp_group_names.m_def,repeats=True)


    class nxp_group_index(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='group_index',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        An array of unique identifiers for detectors or groupings
                of detectors.                                                  Each ID is
                a unique ID for the corresponding detector or group
                named in the field group_names.  The IDs are positive integers
                starting with 1.
                https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group-group-index-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group-group-index-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_group_index = SubSection(sub_section=nxp_group_index.m_def,repeats=True)


    class nxp_group_parent(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='group_parent',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        An array of the hierarchical levels of the parents of detectors
                or groupings of detectors.
                A top-level grouping has parent level -1.
                https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group-group-parent-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group-group-parent-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_group_parent = SubSection(sub_section=nxp_group_parent.m_def,repeats=True)


    class nxp_group_type(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='group_type',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Code number for group type, e.g. bank=1, tube=2 etc.
                https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group-group-type-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group-group-type-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_group_type = SubSection(sub_section=nxp_group_type.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXcontainer(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXcontainer',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='contributed',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                State of a container holding the sample under investigation.
        A container is any object in the beam path which absorbs the beam and
        whose contribution to the overall attenuation/scattering needs to be
        determined to process the experimental data. Examples of containers
        include glass capillary tubes, vanadium cans, windows in furnaces or
        diamonds in a Diamond Anvil Cell. The following figures show a complex
        example of a container:                                  .. figure::
        container/ComplexExampleContainer.png                                        A
        hypothetical capillary furnace. The beam passes from left to right
        (blue dashes), passing through window 1, then window 2, before
        passing through the downstream wall of the capillary. It is then
        scattered by the sample with scattered beams passing through the
        upstream wall of the capillary, then windows 4 and 5. As part of the
        corrections for a PDF experiment it is necessary to subtract the PDF
        of the empty container (i.e. each of the windows and the capillary).
        To calculate the PDF of the empty container it is necessary to have
        the measured scattering data and to know the nature (e.g. density,
        elemental composition, etc.) of the portion of the container which
        the beam passed through.                                     .. figure::
        container/ComplexContainerBeampath.png                                        A
        complete description of the shapes of the container elements with
        their orientation relative to the beam and also information on
        whether they are upstream or downstream of the sample is also
        therefore important. For example, although the windows 2 and 4 have
        the same shape, the path taken through them by the beam is very
        different and this needs to be modelled. Furthermore, it is not
        inconceivable that windows might move during an experiment and thus
        the changes to the beampath would need to be accounted for.
        This class encodes the position of the container with respect to the
        sample and allows the calculation of the beampath through the container.
        It also includes sufficient data to model beam absorption of the
        container and a link to a dataset containing a measurement of the
        container with nothing inside, to allow data corrections (at a specific
        beam energy/measurement time) to be made.
        https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer
        .
        ''',
        default='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_beam(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXbeam.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='beam',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXbeam',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Details of beam incident on container, including the position
                relative to the sample (to determine whether the container is
                upstream or downstream of the sample).
                https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-beam-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-beam-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_beam = SubSection(sub_section=nxp_beam.m_def,repeats=True)


    class nxp_shape(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXshape.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='shape',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXshape',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Shape of the container. In combination with orientation this
                should allow the beampath through the container to be modelled to
                allow the adsorption to be calculated.
                https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-shape-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-shape-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_shape = SubSection(sub_section=nxp_shape.m_def,repeats=True)


    class nxp_orientation(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXtransformations.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='orientation',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXtransformations',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The angle the container makes to the beam and how it may change
                during the experiment.In combination with shape this should allow
                the beampath through the container to be modelled to allow the
                adsorption of the container to be calculated.
                https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-orientation-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-orientation-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_orientation = SubSection(sub_section=nxp_orientation.m_def,repeats=True)


    class nxp_name(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='name',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Descriptive name of container.
                https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-name-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-name-field',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)


    class nxp_description(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='description',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Verbose description of container and how it fits into the wider
                experimental set up.
                https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-description-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-description-field',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)


    class nxp_chemical_formula(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='chemical_formula',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Chemical composition of the material the container is made from.
                Specified using CIF conventions. Abbreviated version of CIF
                standard:                                                   * Only
                recognized element symbols may be used.                         * Each
                element symbol is followed by a 'count' number. A count of
                '1' may be omitted.                         * A space or parenthesis must
                separate each cluster of (element                            symbol +
                count).                         * Where a group of elements is enclosed in
                parentheses, the                            multiplier for the group must
                follow the closing parentheses.                            That is, all
                element and group multipliers are assumed to be
                printed as subscripted numbers.                         * Unless the
                elements are ordered in a manner that corresponds to
                their chemical structure, the order of the elements within any
                group or moiety depends on whether or not carbon is present.
                * If carbon is present, the order should be:
                - C, then H, then the other elements in alphabetical order of
                their symbol.                            - If carbon is not present, the
                elements are listed purely in                              alphabetic
                order of their symbol.
                * This is the *Hill* system used by Chemical Abstracts.
                https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-chemical-formula-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-chemical-formula-field',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_chemical_formula = SubSection(sub_section=nxp_chemical_formula.m_def,repeats=True)


    class nxp_density(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='density',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_MASS_DENSITY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Density of the material the container is made from.
                https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-density-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-density-field',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_density = SubSection(sub_section=nxp_density.m_def,repeats=True)


    class nxp_packing_fraction(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='packing_fraction',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_UNITLESS',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Fraction of the volume of the container occupied by the material
                forming the container.
                https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-packing-fraction-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-packing-fraction-field',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_packing_fraction = SubSection(sub_section=nxp_packing_fraction.m_def,repeats=True)


    class nxp_relative_molecular_mass(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='relative_molecular_mass',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_MASS',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Relative molecular mass of container.
                https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-relative-molecular-mass-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-relative-molecular-mass-field',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_relative_molecular_mass = SubSection(sub_section=nxp_relative_molecular_mass.m_def,repeats=True)



class NXquadrupole_magnet(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXquadrupole_magnet',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='contributed',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        definition for a quadrupole magnet.
        https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet
        .
        ''',
        default='https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_read_current(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='read_current',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXlog',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        current read from supply.
                https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-read-current-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-read-current-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_value(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='value',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CURRENT',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-read-current-value-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-read-current-value-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_value = SubSection(sub_section=nxp_value.m_def,repeats=True)
    nxp_read_current = SubSection(sub_section=nxp_read_current.m_def,repeats=True)


    class nxp_read_voltage(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='read_voltage',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXlog',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        voltage read from supply.
                https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-read-voltage-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-read-voltage-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_value(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='value',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_VOLTAGE',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-read-voltage-value-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-read-voltage-value-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_value = SubSection(sub_section=nxp_value.m_def,repeats=True)
    nxp_read_voltage = SubSection(sub_section=nxp_read_voltage.m_def,repeats=True)


    class nxp_description(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='description',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CHAR',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        extended description of the magnet.
                https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-description-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-description-field',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)


    class nxp_beamline_distance(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='beamline_distance',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        define position of beamline element relative to production target
                https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-beamline-distance-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-beamline-distance-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_beamline_distance = SubSection(sub_section=nxp_beamline_distance.m_def,repeats=True)


    class nxp_set_current(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='set_current',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CURRENT',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        current set on supply.
                https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-set-current-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-set-current-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_set_current = SubSection(sub_section=nxp_set_current.m_def,repeats=True)



class NXelectrostatic_kicker(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXelectrostatic_kicker',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='contributed',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        definition for a electrostatic kicker.
        https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker
        .
        ''',
        default='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_read_current(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='read_current',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXlog',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        current read from supply.
                https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-read-current-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-read-current-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_value(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='value',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CURRENT',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-read-current-value-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-read-current-value-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_value = SubSection(sub_section=nxp_value.m_def,repeats=True)
    nxp_read_current = SubSection(sub_section=nxp_read_current.m_def,repeats=True)


    class nxp_read_voltage(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='read_voltage',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXlog',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        voltage read from supply.
                https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-read-voltage-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-read-voltage-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_value(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='value',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_VOLTAGE',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-read-voltage-value-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-read-voltage-value-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_value = SubSection(sub_section=nxp_value.m_def,repeats=True)
    nxp_read_voltage = SubSection(sub_section=nxp_read_voltage.m_def,repeats=True)


    class nxp_description(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='description',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CHAR',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        extended description of the kicker.
                https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-description-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-description-field',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)


    class nxp_beamline_distance(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='beamline_distance',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        define position of beamline element relative to production target
                https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-beamline-distance-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-beamline-distance-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_beamline_distance = SubSection(sub_section=nxp_beamline_distance.m_def,repeats=True)


    class nxp_timing(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='timing',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        kicker timing as defined by ``description`` attribute
                https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-timing-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-timing-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-timing-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-timing-description-attribute',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_timing = SubSection(sub_section=nxp_timing.m_def,repeats=True)


    class nxp_set_current(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='set_current',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CURRENT',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        current set on supply.
                https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-set-current-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-set-current-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_set_current = SubSection(sub_section=nxp_set_current.m_def,repeats=True)


    class nxp_set_voltage(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='set_voltage',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_VOLTAGE',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        volage set on supply.
                https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-set-voltage-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-set-voltage-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_set_voltage = SubSection(sub_section=nxp_set_voltage.m_def,repeats=True)



class NXspin_rotator(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXspin_rotator',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='contributed',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        definition for a spin rotator.
        https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator
        .
        ''',
        default='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_read_Bfield_current(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='read_Bfield_current',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXlog',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        current read from magnet supply.
                https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-bfield-current-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-bfield-current-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_value(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='value',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CURRENT',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-bfield-current-value-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-bfield-current-value-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_value = SubSection(sub_section=nxp_value.m_def,repeats=True)
    nxp_read_Bfield_current = SubSection(sub_section=nxp_read_Bfield_current.m_def,repeats=True)


    class nxp_read_Bfield_voltage(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='read_Bfield_voltage',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXlog',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        voltage read from magnet supply.
                https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-bfield-voltage-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-bfield-voltage-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_value(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='value',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_VOLTAGE',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-bfield-voltage-value-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-bfield-voltage-value-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_value = SubSection(sub_section=nxp_value.m_def,repeats=True)
    nxp_read_Bfield_voltage = SubSection(sub_section=nxp_read_Bfield_voltage.m_def,repeats=True)


    class nxp_read_Efield_current(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='read_Efield_current',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXlog',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        current read from HT supply.
                https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-efield-current-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-efield-current-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_value(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='value',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CURRENT',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-efield-current-value-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-efield-current-value-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_value = SubSection(sub_section=nxp_value.m_def,repeats=True)
    nxp_read_Efield_current = SubSection(sub_section=nxp_read_Efield_current.m_def,repeats=True)


    class nxp_read_Efield_voltage(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='read_Efield_voltage',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXlog',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        voltage read from HT supply.
                https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-efield-voltage-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-efield-voltage-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_value(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='value',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_VOLTAGE',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-efield-voltage-value-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-efield-voltage-value-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_value = SubSection(sub_section=nxp_value.m_def,repeats=True)
    nxp_read_Efield_voltage = SubSection(sub_section=nxp_read_Efield_voltage.m_def,repeats=True)


    class nxp_description(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='description',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CHAR',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        extended description of the spin rotator.
                https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-description-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-description-field',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)


    class nxp_beamline_distance(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='beamline_distance',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        define position of beamline element relative to production target
                https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-beamline-distance-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-beamline-distance-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_beamline_distance = SubSection(sub_section=nxp_beamline_distance.m_def,repeats=True)


    class nxp_set_Bfield_current(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='set_Bfield_current',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CURRENT',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        current set on magnet supply.
                https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-set-bfield-current-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-set-bfield-current-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_set_Bfield_current = SubSection(sub_section=nxp_set_Bfield_current.m_def,repeats=True)


    class nxp_set_Efield_voltage(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='set_Efield_voltage',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_VOLTAGE',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        current set on HT supply.
                https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-set-efield-voltage-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-set-efield-voltage-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_set_Efield_voltage = SubSection(sub_section=nxp_set_Efield_voltage.m_def,repeats=True)



class NXseparator(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXseparator',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='contributed',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        definition for an electrostatic separator.
        https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator
        .
        ''',
        default='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_read_Bfield_current(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='read_Bfield_current',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXlog',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        current read from magnet supply.
                https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-bfield-current-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-bfield-current-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_value(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='value',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CURRENT',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-bfield-current-value-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-bfield-current-value-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_value = SubSection(sub_section=nxp_value.m_def,repeats=True)
    nxp_read_Bfield_current = SubSection(sub_section=nxp_read_Bfield_current.m_def,repeats=True)


    class nxp_read_Bfield_voltage(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='read_Bfield_voltage',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXlog',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        voltage read from magnet supply.
                https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-bfield-voltage-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-bfield-voltage-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_value(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='value',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_VOLTAGE',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-bfield-voltage-value-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-bfield-voltage-value-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_value = SubSection(sub_section=nxp_value.m_def,repeats=True)
    nxp_read_Bfield_voltage = SubSection(sub_section=nxp_read_Bfield_voltage.m_def,repeats=True)


    class nxp_read_Efield_current(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='read_Efield_current',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXlog',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        current read from HT supply.
                https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-efield-current-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-efield-current-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_value(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='value',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CURRENT',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-efield-current-value-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-efield-current-value-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_value = SubSection(sub_section=nxp_value.m_def,repeats=True)
    nxp_read_Efield_current = SubSection(sub_section=nxp_read_Efield_current.m_def,repeats=True)


    class nxp_read_Efield_voltage(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='read_Efield_voltage',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXlog',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        voltage read from HT supply.
                https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-efield-voltage-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-efield-voltage-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_value(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='value',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_VOLTAGE',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-efield-voltage-value-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-efield-voltage-value-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_value = SubSection(sub_section=nxp_value.m_def,repeats=True)
    nxp_read_Efield_voltage = SubSection(sub_section=nxp_read_Efield_voltage.m_def,repeats=True)


    class nxp_description(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='description',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CHAR',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        extended description of the separator.
                https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-description-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-description-field',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)


    class nxp_beamline_distance(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='beamline_distance',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        define position of beamline element relative to production target
                https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-beamline-distance-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-beamline-distance-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_beamline_distance = SubSection(sub_section=nxp_beamline_distance.m_def,repeats=True)


    class nxp_set_Bfield_current(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='set_Bfield_current',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CURRENT',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        current set on magnet supply.
                https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-set-bfield-current-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-set-bfield-current-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_set_Bfield_current = SubSection(sub_section=nxp_set_Bfield_current.m_def,repeats=True)


    class nxp_set_Efield_voltage(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='set_Efield_voltage',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_VOLTAGE',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        current set on HT supply.
                https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-set-efield-voltage-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-set-efield-voltage-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_set_Efield_voltage = SubSection(sub_section=nxp_set_Efield_voltage.m_def,repeats=True)



class NXsolenoid_magnet(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXsolenoid_magnet',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='contributed',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        definition for a solenoid magnet.
        https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet
        .
        ''',
        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_read_current(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='read_current',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXlog',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        current read from supply.
                https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-read-current-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-read-current-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_value(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='value',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CURRENT',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-read-current-value-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-read-current-value-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_value = SubSection(sub_section=nxp_value.m_def,repeats=True)
    nxp_read_current = SubSection(sub_section=nxp_read_current.m_def,repeats=True)


    class nxp_read_voltage(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='read_voltage',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXlog',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        voltage read from supply.
                https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-read-voltage-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-read-voltage-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_value(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='value',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_VOLTAGE',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-read-voltage-value-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-read-voltage-value-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_value = SubSection(sub_section=nxp_value.m_def,repeats=True)
    nxp_read_voltage = SubSection(sub_section=nxp_read_voltage.m_def,repeats=True)


    class nxp_description(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='description',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CHAR',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        extended description of the magnet.
                https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-description-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-description-field',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)


    class nxp_beamline_distance(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='beamline_distance',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        define position of beamline element relative to production target
                https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-beamline-distance-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-beamline-distance-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_beamline_distance = SubSection(sub_section=nxp_beamline_distance.m_def,repeats=True)


    class nxp_set_current(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='set_current',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CURRENT',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        current set on supply.
                https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-set-current-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-set-current-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_set_current = SubSection(sub_section=nxp_set_current.m_def,repeats=True)



class NXmagnetic_kicker(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXmagnetic_kicker',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='contributed',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        definition for a magnetic kicker.
        https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker
        .
        ''',
        default='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_read_current(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='read_current',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXlog',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        current read from supply.
                https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-read-current-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-read-current-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_value(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='value',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CURRENT',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-read-current-value-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-read-current-value-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_value = SubSection(sub_section=nxp_value.m_def,repeats=True)
    nxp_read_current = SubSection(sub_section=nxp_read_current.m_def,repeats=True)


    class nxp_read_voltage(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='read_voltage',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXlog',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        voltage read from supply.
                https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-read-voltage-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-read-voltage-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_value(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='value',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_VOLTAGE',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-read-voltage-value-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-read-voltage-value-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_value = SubSection(sub_section=nxp_value.m_def,repeats=True)
    nxp_read_voltage = SubSection(sub_section=nxp_read_voltage.m_def,repeats=True)


    class nxp_description(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='description',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CHAR',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        extended description of the kicker.
                https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-description-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-description-field',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)


    class nxp_beamline_distance(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='beamline_distance',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        define position of beamline element relative to production target
                https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-beamline-distance-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-beamline-distance-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_beamline_distance = SubSection(sub_section=nxp_beamline_distance.m_def,repeats=True)


    class nxp_timing(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='timing',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        kicker timing as defined by ``description`` attribute
                https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-timing-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-timing-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='description',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-timing-description-attribute
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-timing-description-attribute',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
    nxp_timing = SubSection(sub_section=nxp_timing.m_def,repeats=True)


    class nxp_set_current(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='set_current',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CURRENT',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        current set on supply.
                https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-set-current-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-set-current-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_set_current = SubSection(sub_section=nxp_set_current.m_def,repeats=True)


    class nxp_set_voltage(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='set_voltage',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_VOLTAGE',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        voltage set on supply.
                https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-set-voltage-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-set-voltage-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_set_voltage = SubSection(sub_section=nxp_set_voltage.m_def,repeats=True)



class NXquadric(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXquadric',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='contributed',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        definition of a quadric surface.
        https://manual.nexusformat.org/classes/contributed_definitions/NXquadric.html#nxquadric
        .
        ''',
        default='https://manual.nexusformat.org/classes/contributed_definitions/NXquadric.html#nxquadric',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_parameters(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='parameters',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_PER_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Ten real values of the matrix that defines the quadric surface       in
                projective space. Ordered Q11, Q12, Q13, Q22, Q23, Q33, P1,       P2, P3,
                R. Takes a units attribute of dimension reciprocal       length. R is
                scalar. P has dimension reciprocal length, and the       given units. Q
                has dimension reciprocal length squared, and       units the square of
                those given.
                https://manual.nexusformat.org/classes/contributed_definitions/NXquadric.html#nxquadric-parameters-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXquadric.html#nxquadric-parameters-field',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_parameters = SubSection(sub_section=nxp_parameters.m_def,repeats=True)


    class nxp_surface_type(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='surface_type',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        An optional description of the form of the quadric surface:
                https://manual.nexusformat.org/classes/contributed_definitions/NXquadric.html#nxquadric-surface-type-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXquadric.html#nxquadric-surface-type-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values:
                ELLIPSOID,ELLIPTIC_PARABOLOID,HYPERBOLIC_PARABOLOID,ELLIPTIC_HYPERBOLOID_OF_1_SHEET,ELLIPTIC_HYPERBOLOID_OF_2_SHEETS,ELLIPTIC_CONE,ELLIPTIC_CYLINDER,HYPERBOLIC_CYLINDER,PARABOLIC_CYLINDER,SPHEROID,SPHERE,PARABOLOID,HYPERBOLOID_1_SHEET,HYPERBOLOID_2_SHEET,CONE,CYLINDER,PLANE,IMAGINARY,UNKNOWN''',
            default='ELLIPSOID,ELLIPTIC_PARABOLOID,HYPERBOLIC_PARABOLOID,ELLIPTIC_HYPERBOLOID_OF_1_SHEET,ELLIPTIC_HYPERBOLOID_OF_2_SHEETS,ELLIPTIC_CONE,ELLIPTIC_CYLINDER,HYPERBOLIC_CYLINDER,PARABOLIC_CYLINDER,SPHEROID,SPHERE,PARABOLOID,HYPERBOLOID_1_SHEET,HYPERBOLOID_2_SHEET,CONE,CYLINDER,PLANE,IMAGINARY,UNKNOWN',
        )
    nxp_surface_type = SubSection(sub_section=nxp_surface_type.m_def,repeats=True)


    class nxp_depends_on(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='depends_on',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CHAR',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Path to an :ref:`NXtransformations` that defining the axis on       which
                the orientation of the surface depends.
                https://manual.nexusformat.org/classes/contributed_definitions/NXquadric.html#nxquadric-depends-on-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXquadric.html#nxquadric-depends-on-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_depends_on = SubSection(sub_section=nxp_depends_on.m_def,repeats=True)



class NXcsg(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXcsg',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='contributed',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                constructive solid geometry NeXus class, using :ref:`NXquadric`     and
        :ref:`NXoff_geometry`.
        https://manual.nexusformat.org/classes/contributed_definitions/NXcsg.html#nxcsg .
        ''',
        default='https://manual.nexusformat.org/classes/contributed_definitions/NXcsg.html#nxcsg',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_a(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXcsg.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='a',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXcsg',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The first operand of constructive solid geometry      operation.
                Compulsory if 'operation' is UNION, INTERSECTION,      DIFFERENCE or
                COMPLEMENT.
                https://manual.nexusformat.org/classes/contributed_definitions/NXcsg.html#nxcsg-a-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcsg.html#nxcsg-a-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_a = SubSection(sub_section=nxp_a.m_def,repeats=True)


    class nxp_b(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXcsg.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='b',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXcsg',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The second operand of constructive solid geometry      operation.
                Compulsory if 'operation' is UNION, INTERSECTION or      DIFFERENCE.
                https://manual.nexusformat.org/classes/contributed_definitions/NXcsg.html#nxcsg-b-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcsg.html#nxcsg-b-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_b = SubSection(sub_section=nxp_b.m_def,repeats=True)


    class nxp_operation(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='operation',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        One of the standard construction solid geometry set operations,       or
                if the CSG is a pointer to the geometry provided by an
                :ref:`NXquadric` or an :ref:`NXoff_geometry`. Takes values:
                https://manual.nexusformat.org/classes/contributed_definitions/NXcsg.html#nxcsg-operation-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcsg.html#nxcsg-operation-field',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values:
                UNION,INTERSECTION,DIFFERENCE,COMPLEMENT,IS_QUADRIC,IS_MESH''',
            default='UNION,INTERSECTION,DIFFERENCE,COMPLEMENT,IS_QUADRIC,IS_MESH',
        )
    nxp_operation = SubSection(sub_section=nxp_operation.m_def,repeats=True)


    class nxp_geometry(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='geometry',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CHAR',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Path to a field that is either an :ref:`NXquadric` (if       'operation' =
                IS_QUADRIC) or an :ref:`NXoff_geometry` (if       'operation' = IS_MESH)
                that defines the surface making up the       constructive solid geometry
                component. Compulsory if 'operation'       is IS_QUADRIC or IS_MESH.
                https://manual.nexusformat.org/classes/contributed_definitions/NXcsg.html#nxcsg-geometry-field
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcsg.html#nxcsg-geometry-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_geometry = SubSection(sub_section=nxp_geometry.m_def,repeats=True)



class NXcapillary(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXcapillary',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                A capillary lens to focus the X-ray beam.              Based on information
        provided by Gerd Wellenreuther (DESY).
        https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_gain(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXdata',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='gain',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The gain of the capillary as a function of energy
                https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-gain-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-gain-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_gain = SubSection(sub_section=nxp_gain.m_def,repeats=True)


    class nxp_transmission(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXdata',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='transmission',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The transmission of the capillary as a function of energy
                https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-transmission-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-transmission-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_transmission = SubSection(sub_section=nxp_transmission.m_def,repeats=True)


    class nxp_type(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='type',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CHAR',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Type of the capillary
                https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-type-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-type-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: single_bounce,polycapillary,conical_capillary''',
            default='single_bounce,polycapillary,conical_capillary',
        )
    nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)


    class nxp_manufacturer(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='manufacturer',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CHAR',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The manufacturer of the capillary. This is actually important as
                it may have an impact on performance.
                https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-manufacturer-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-manufacturer-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_manufacturer = SubSection(sub_section=nxp_manufacturer.m_def,repeats=True)


    class nxp_maximum_incident_angle(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='maximum_incident_angle',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-maximum-incident-angle-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-maximum-incident-angle-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_maximum_incident_angle = SubSection(sub_section=nxp_maximum_incident_angle.m_def,repeats=True)


    class nxp_accepting_aperture(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='accepting_aperture',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-accepting-aperture-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-accepting-aperture-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_accepting_aperture = SubSection(sub_section=nxp_accepting_aperture.m_def,repeats=True)


    class nxp_working_distance(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='working_distance',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-working-distance-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-working-distance-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_working_distance = SubSection(sub_section=nxp_working_distance.m_def,repeats=True)


    class nxp_focal_size(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='focal_size',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The focal size in FWHM
                https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-focal-size-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-focal-size-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_focal_size = SubSection(sub_section=nxp_focal_size.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXgeometry(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXgeometry',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_deprecated = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='as decided at 2014 NIAC meeting, convert to use :ref:`NXtransformations`',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                legacy class - recommend to use :ref:`NXtransformations` now                  It
        is recommended that instances of :ref:`NXgeometry` be converted to          use
        :ref:`NXtransformations`.                  This is the description for a general
        position of a component.          It is recommended to name an instance of
        :ref:`NXgeometry` as "geometry"         to aid in the use of the definition in
        simulation codes such as McStas.         Also, in HDF, linked items must share the
        same name.         However, it might not be possible or practical in all
        situations.
        https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    nxp_deprecated = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_SHAPE(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXshape.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXshape',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        shape/size information of component
                https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-shape-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-shape-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_SHAPE = SubSection(sub_section=nxp_SHAPE.m_def,repeats=True)


    class nxp_TRANSLATION(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXtranslation.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXtranslation',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        translation of component
                https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-translation-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-translation-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_TRANSLATION = SubSection(sub_section=nxp_TRANSLATION.m_def,repeats=True)


    class nxp_ORIENTATION(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXorientation.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXorientation',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        orientation of component
                https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-orientation-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-orientation-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_ORIENTATION = SubSection(sub_section=nxp_ORIENTATION.m_def,repeats=True)


    class nxp_description(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='description',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Optional description/label. Probably only present if we are             an
                additional reference point for components rather than the
                location of a real component.
                https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-description-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-description-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)


    class nxp_component_index(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='component_index',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Position of the component along the beam path. The sample is at 0,
                components upstream             have negative component_index, components
                downstream have positive             component_index.
                https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-component-index-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-component-index-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_component_index = SubSection(sub_section=nxp_component_index.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXfermi_chopper(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXfermi_chopper',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        A Fermi chopper, possibly with curved slits.
        https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper
        .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_GEOMETRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXgeometry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        geometry of the fermi chopper
                https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-geometry-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-geometry-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_GEOMETRY = SubSection(sub_section=nxp_GEOMETRY.m_def,repeats=True)


    class nxp_type(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='type',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Fermi chopper type
                https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-type-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-type-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)


    class nxp_rotation_speed(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='rotation_speed',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FREQUENCY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        chopper rotation speed
                https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-rotation-speed-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-rotation-speed-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_rotation_speed = SubSection(sub_section=nxp_rotation_speed.m_def,repeats=True)


    class nxp_radius(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='radius',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        radius of chopper
                https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-radius-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-radius-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_radius = SubSection(sub_section=nxp_radius.m_def,repeats=True)


    class nxp_slit(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='slit',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        width of an individual slit
                https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-slit-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-slit-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_slit = SubSection(sub_section=nxp_slit.m_def,repeats=True)


    class nxp_r_slit(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='r_slit',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        radius of curvature of slits
                https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-r-slit-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-r-slit-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_r_slit = SubSection(sub_section=nxp_r_slit.m_def,repeats=True)


    class nxp_number(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='number',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_UNITLESS',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        number of slits
                https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-number-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-number-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_number = SubSection(sub_section=nxp_number.m_def,repeats=True)


    class nxp_height(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='height',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        input beam height
                https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-height-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-height-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_height = SubSection(sub_section=nxp_height.m_def,repeats=True)


    class nxp_width(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='width',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        input beam width
                https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-width-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-width-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_width = SubSection(sub_section=nxp_width.m_def,repeats=True)


    class nxp_distance(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='distance',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        distance
                https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-distance-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-distance-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)


    class nxp_wavelength(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='wavelength',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_WAVELENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Wavelength transmitted by chopper
                https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-wavelength-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-wavelength-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_wavelength = SubSection(sub_section=nxp_wavelength.m_def,repeats=True)


    class nxp_energy(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='energy',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ENERGY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        energy selected
                https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-energy-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-energy-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_energy = SubSection(sub_section=nxp_energy.m_def,repeats=True)


    class nxp_absorbing_material(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='absorbing_material',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        absorbing material
                https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-absorbing-material-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-absorbing-material-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_absorbing_material = SubSection(sub_section=nxp_absorbing_material.m_def,repeats=True)


    class nxp_transmitting_material(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='transmitting_material',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        transmitting material
                https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-transmitting-material-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-transmitting-material-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_transmitting_material = SubSection(sub_section=nxp_transmitting_material.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXbending_magnet(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXbending_magnet',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        A bending magnet
        https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet
        .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_spectrum(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='spectrum',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXdata',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        bending magnet spectrum
                https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-spectrum-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-spectrum-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_spectrum = SubSection(sub_section=nxp_spectrum.m_def,repeats=True)


    class nxp_GEOMETRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXgeometry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        "Engineering" position of bending magnet
                https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-geometry-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-geometry-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_GEOMETRY = SubSection(sub_section=nxp_GEOMETRY.m_def,repeats=True)


    class nxp_critical_energy(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='critical_energy',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ENERGY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-critical-energy-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-critical-energy-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_critical_energy = SubSection(sub_section=nxp_critical_energy.m_def,repeats=True)


    class nxp_bending_radius(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='bending_radius',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-bending-radius-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-bending-radius-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_bending_radius = SubSection(sub_section=nxp_bending_radius.m_def,repeats=True)


    class nxp_magnetic_field(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='magnetic_field',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CURRENT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        strength of magnetic field of dipole magnets
                https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-magnetic-field-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-magnetic-field-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_magnetic_field = SubSection(sub_section=nxp_magnetic_field.m_def,repeats=True)


    class nxp_accepted_photon_beam_divergence(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='accepted_photon_beam_divergence',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        An array of four numbers giving X+, X-, Y+ and Y- half divergence
                https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-accepted-photon-beam-divergence-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-accepted-photon-beam-divergence-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_accepted_photon_beam_divergence = SubSection(sub_section=nxp_accepted_photon_beam_divergence.m_def,repeats=True)


    class nxp_source_distance_x(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='source_distance_x',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Distance of source point from particle beam waist in X (horizontal)
                direction.
                https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-source-distance-x-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-source-distance-x-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_source_distance_x = SubSection(sub_section=nxp_source_distance_x.m_def,repeats=True)


    class nxp_source_distance_y(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='source_distance_y',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Distance of source point from particle beam waist in Y (vertical)
                direction.
                https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-source-distance-y-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-source-distance-y-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_source_distance_y = SubSection(sub_section=nxp_source_distance_y.m_def,repeats=True)


    class nxp_divergence_x_plus(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='divergence_x_plus',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Accepted photon beam divergence in X+ (horizontal outboard) direction.
                Note that divergence_x_plus+divergence_x_minus is the total horizontal
                beam divergence.
                https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-divergence-x-plus-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-divergence-x-plus-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_divergence_x_plus = SubSection(sub_section=nxp_divergence_x_plus.m_def,repeats=True)


    class nxp_divergence_x_minus(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='divergence_x_minus',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Accepted photon beam divergence in X- (horizontal inboard) direction.
                Note that divergence_x_plus+divergence_x_minus is the total horizontal
                beam divergence.
                https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-divergence-x-minus-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-divergence-x-minus-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_divergence_x_minus = SubSection(sub_section=nxp_divergence_x_minus.m_def,repeats=True)


    class nxp_divergence_y_plus(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='divergence_y_plus',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Accepted photon beam divergence in Y+ (vertical upward) direction.
                Note that divergence_y_plus+divergence_y_minus is the total vertical beam
                divergence.
                https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-divergence-y-plus-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-divergence-y-plus-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_divergence_y_plus = SubSection(sub_section=nxp_divergence_y_plus.m_def,repeats=True)


    class nxp_divergence_y_minus(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='divergence_y_minus',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Accepted photon beam divergence in Y- (vertical downward) direction.
                Note that divergence_y_plus+divergence_y_minus is the total vertical beam
                divergence.
                https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-divergence-y-minus-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-divergence-y-minus-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_divergence_y_minus = SubSection(sub_section=nxp_divergence_y_minus.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                      Declares which child group
                contains a path leading            to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute           to help
                define the path to the default dataset to be plotted.           See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXsensor(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXsensor',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                A sensor used to monitor an external condition
        The condition itself is described in :ref:`NXenvironment`.
        https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_geometry(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='geometry',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXgeometry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Defines the axes for logged vector quantities if they are not the global
                instrument axes
                https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-geometry-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-geometry-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_geometry = SubSection(sub_section=nxp_geometry.m_def,repeats=True)


    class nxp_value_log(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='value_log',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXlog',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Time history of sensor readings
                https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-value-log-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-value-log-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_value_log = SubSection(sub_section=nxp_value_log.m_def,repeats=True)


    class nxp_value_deriv1_log(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='value_deriv1_log',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXlog',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Time history of first derivative of sensor readings
                https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-value-deriv1-log-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-value-deriv1-log-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_value_deriv1_log = SubSection(sub_section=nxp_value_deriv1_log.m_def,repeats=True)


    class nxp_value_deriv2_log(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='value_deriv2_log',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXlog',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Time history of second derivative of sensor readings
                https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-value-deriv2-log-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-value-deriv2-log-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_value_deriv2_log = SubSection(sub_section=nxp_value_deriv2_log.m_def,repeats=True)


    class nxp_external_field_full(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXorientation.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='external_field_full',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXorientation',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        For complex external fields not satisfied by External_field_brief
                https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-external-field-full-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-external-field-full-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_external_field_full = SubSection(sub_section=nxp_external_field_full.m_def,repeats=True)


    class nxp_model(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='model',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Sensor identification code/model number
                https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-model-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-model-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_model = SubSection(sub_section=nxp_model.m_def,repeats=True)


    class nxp_name(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='name',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Name for the sensor
                https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-name-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-name-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)


    class nxp_short_name(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='short_name',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Short name of sensor used e.g. on monitor display program
                https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-short-name-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-short-name-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_short_name = SubSection(sub_section=nxp_short_name.m_def,repeats=True)


    class nxp_attached_to(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='attached_to',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        where sensor is attached to ("sample" | "can")
                https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-attached-to-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-attached-to-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_attached_to = SubSection(sub_section=nxp_attached_to.m_def,repeats=True)


    class nxp_measurement(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='measurement',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        name for measured signal
                https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-measurement-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-measurement-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values:
                temperature,pH,magnetic_field,electric_field,conductivity,resistance,voltage,pressure,flow,stress,strain,shear,surface_pressure''',
            default='temperature,pH,magnetic_field,electric_field,conductivity,resistance,voltage,pressure,flow,stress,strain,shear,surface_pressure',
        )
    nxp_measurement = SubSection(sub_section=nxp_measurement.m_def,repeats=True)


    class nxp_type(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='type',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The type of hardware used for the measurement.
                Examples (suggestions but not restrictions):
                :Temperature:                           J | K | T | E | R | S | Pt100 |
                Rh/Fe                         :pH:                           Hg/Hg2Cl2 |
                Ag/AgCl | ISFET                         :Ion selective electrode:
                specify species; e.g. Ca2+                         :Magnetic field:
                Hall                         :Surface pressure:
                wilhelmy plate
                https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-type-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-type-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)


    class nxp_run_control(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='run_control',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_BOOLEAN',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Is data collection controlled or synchronised to this quantity:
                1=no, 0=to "value", 1=to "value_deriv1", etc.
                https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-run-control-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-run-control-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_run_control = SubSection(sub_section=nxp_run_control.m_def,repeats=True)


    class nxp_high_trip_value(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='high_trip_value',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Upper control bound of sensor reading if using run_control
                https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-high-trip-value-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-high-trip-value-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_high_trip_value = SubSection(sub_section=nxp_high_trip_value.m_def,repeats=True)


    class nxp_low_trip_value(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='low_trip_value',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Lower control bound of sensor reading if using run_control
                https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-low-trip-value-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-low-trip-value-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_low_trip_value = SubSection(sub_section=nxp_low_trip_value.m_def,repeats=True)


    class nxp_value(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='value',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        nominal setpoint or average value                          - need [n] as
                may be a vector
                https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-value-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-value-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_value = SubSection(sub_section=nxp_value.m_def,repeats=True)


    class nxp_value_deriv1(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='value_deriv1',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Nominal/average first derivative of value                          e.g.
                strain rate                          - same dimensions as "value" (may be
                a vector)
                https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-value-deriv1-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-value-deriv1-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_value_deriv1 = SubSection(sub_section=nxp_value_deriv1.m_def,repeats=True)


    class nxp_value_deriv2(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='value_deriv2',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Nominal/average second derivative of value                         - same
                dimensions as "value" (may be a vector)
                https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-value-deriv2-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-value-deriv2-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_value_deriv2 = SubSection(sub_section=nxp_value_deriv2.m_def,repeats=True)


    class nxp_external_field_brief(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='external_field_brief',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-external-field-brief-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-external-field-brief-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: along beam,across beam,transverse,solenoidal,flow shear
                gradient,flow vorticity''',
            default='along beam,across beam,transverse,solenoidal,flow shear gradient,flow vorticity',
        )
    nxp_external_field_brief = SubSection(sub_section=nxp_external_field_brief.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXvelocity_selector(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXvelocity_selector',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        A neutron velocity selector
        https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector
        .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_geometry(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXgeometry',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='geometry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-geometry-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-geometry-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_geometry = SubSection(sub_section=nxp_geometry.m_def,repeats=True)


    class nxp_type(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='type',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        velocity selector type
                https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-type-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-type-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)


    class nxp_rotation_speed(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='rotation_speed',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FREQUENCY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        velocity selector rotation speed
                https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-rotation-speed-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-rotation-speed-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_rotation_speed = SubSection(sub_section=nxp_rotation_speed.m_def,repeats=True)


    class nxp_radius(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='radius',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        radius at beam centre
                https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-radius-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-radius-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_radius = SubSection(sub_section=nxp_radius.m_def,repeats=True)


    class nxp_spwidth(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='spwidth',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        spoke width at beam centre
                https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-spwidth-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-spwidth-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_spwidth = SubSection(sub_section=nxp_spwidth.m_def,repeats=True)


    class nxp_length(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='length',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        rotor length
                https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-length-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-length-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_length = SubSection(sub_section=nxp_length.m_def,repeats=True)


    class nxp_num(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='num',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_UNITLESS',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        number of spokes/lamella
                https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-num-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-num-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_num = SubSection(sub_section=nxp_num.m_def,repeats=True)


    class nxp_twist(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='twist',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        twist angle along axis
                https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-twist-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-twist-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_twist = SubSection(sub_section=nxp_twist.m_def,repeats=True)


    class nxp_table(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='table',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        offset vertical angle
                https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-table-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-table-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_table = SubSection(sub_section=nxp_table.m_def,repeats=True)


    class nxp_height(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='height',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        input beam height
                https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-height-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-height-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_height = SubSection(sub_section=nxp_height.m_def,repeats=True)


    class nxp_width(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='width',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        input beam width
                https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-width-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-width-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_width = SubSection(sub_section=nxp_width.m_def,repeats=True)


    class nxp_wavelength(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='wavelength',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_WAVELENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        wavelength
                https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-wavelength-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-wavelength-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_wavelength = SubSection(sub_section=nxp_wavelength.m_def,repeats=True)


    class nxp_wavelength_spread(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='wavelength_spread',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_WAVELENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        deviation FWHM /Wavelength
                https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-wavelength-spread-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-wavelength-spread-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_wavelength_spread = SubSection(sub_section=nxp_wavelength_spread.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXdetector(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXdetector',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                A detector, detector bank, or multidetector.
        https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_GEOMETRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXgeometry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Position and orientation of detector
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-geometry-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-geometry-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_GEOMETRY = SubSection(sub_section=nxp_GEOMETRY.m_def,repeats=True)


    class nxp_efficiency(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='efficiency',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXdata',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Spectral efficiency of detector with respect to e.g. wavelength
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-efficiency-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-efficiency-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_signal(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='signal',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-efficiency-signal-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-efficiency-signal-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: efficiency''',
                default='efficiency',
            )
        nxp_signal = SubSection(sub_section=nxp_signal.m_def,repeats=True)
        class nxp_axes(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='axes',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-efficiency-axes-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-efficiency-axes-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: .,. .,. . .,. . . .,wavelength''',
                default='.,. .,. . .,. . . .,wavelength',
            )
        nxp_axes = SubSection(sub_section=nxp_axes.m_def,repeats=True)
        class nxp_wavelength_indices(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='wavelength_indices',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-efficiency-wavelength-indices-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-efficiency-wavelength-indices-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: 0''',
                default='0',
            )
        nxp_wavelength_indices = SubSection(sub_section=nxp_wavelength_indices.m_def,repeats=True)
        class nxp_efficiency(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='efficiency',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_FLOAT',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DIMENSIONLESS',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            efficiency of the detector
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-efficiency-efficiency-field
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-efficiency-efficiency-field',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_efficiency = SubSection(sub_section=nxp_efficiency.m_def,repeats=True)
        class nxp_wavelength(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='wavelength',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_FLOAT',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_WAVELENGTH',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            This field can be two things:

                #. For a pixel detector it provides the nominal wavelength            for
                which the detector has been calibrated.

                #. For other detectors this field has to be seen together with
                the efficiency field above.            For some detectors, the efficiency
                is wavelength dependent.            Thus this field provides the
                wavelength axis for the efficiency field.            In this use case, the
                efficiency and wavelength arrays must            have the same
                dimensionality.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-efficiency-wavelength-field
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-efficiency-wavelength-field',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_wavelength = SubSection(sub_section=nxp_wavelength.m_def,repeats=True)
    nxp_efficiency = SubSection(sub_section=nxp_efficiency.m_def,repeats=True)


    class nxp_calibration_method(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='calibration_method',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXnote',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        summary of conversion of array data to pixels (e.g. polynomial
                approximations) and location of details of the calibrations
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-calibration-method-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-calibration-method-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_calibration_method = SubSection(sub_section=nxp_calibration_method.m_def,repeats=True)


    class nxp_data_file(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='data_file',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXnote',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-data-file-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-data-file-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_data_file = SubSection(sub_section=nxp_data_file.m_def,repeats=True)


    class nxp_COLLECTION(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXcollection.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXcollection',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Use this group to provide other data related to this NXdetector group.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-collection-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-collection-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_COLLECTION = SubSection(sub_section=nxp_COLLECTION.m_def,repeats=True)


    class nxp_DETECTOR_MODULE(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXdetector_module.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXdetector_module',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        For use in special cases where the data in NXdetector       is represented
                in several parts, each with a separate geometry.

                Use one or more instances of the NXdetector_module       group to declare
                regions of interest or some other       subdivision of a detector.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-detector-module-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-detector-module-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_DETECTOR_MODULE = SubSection(sub_section=nxp_DETECTOR_MODULE.m_def,repeats=True)


    class nxp_time_of_flight(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='time_of_flight',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME_OF_FLIGHT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Total time of flight
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-time-of-flight-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-time-of-flight-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_axis(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_POSINT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='axis',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_POSINT',
            )
            nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='see: https://github.com/nexusformat/definitions/issues/436',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-time-of-flight-axis-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-time-of-flight-axis-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: 3''',
                default='3',
            )
        nxp_axis = SubSection(sub_section=nxp_axis.m_def,repeats=True)
        class nxp_primary(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_POSINT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='primary',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_POSINT',
            )
            nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='see: https://github.com/nexusformat/definitions/issues/436',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-time-of-flight-primary-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-time-of-flight-primary-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: 1''',
                default='1',
            )
        nxp_primary = SubSection(sub_section=nxp_primary.m_def,repeats=True)
        class nxp_long_name(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='long_name',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Total time of flight
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-time-of-flight-long-name-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-time-of-flight-long-name-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_long_name = SubSection(sub_section=nxp_long_name.m_def,repeats=True)
    nxp_time_of_flight = SubSection(sub_section=nxp_time_of_flight.m_def,repeats=True)


    class nxp_raw_time_of_flight(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='raw_time_of_flight',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_PULSES',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        In DAQ clock pulses
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-raw-time-of-flight-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-raw-time-of-flight-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_frequency(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='frequency',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_NUMBER',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Clock frequency in Hz
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-raw-time-of-flight-frequency-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-raw-time-of-flight-frequency-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_frequency = SubSection(sub_section=nxp_frequency.m_def,repeats=True)
    nxp_raw_time_of_flight = SubSection(sub_section=nxp_raw_time_of_flight.m_def,repeats=True)


    class nxp_detector_number(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='detector_number',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Identifier for detector (pixels)         Can be multidimensional, if
                needed
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-detector-number-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-detector-number-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_detector_number = SubSection(sub_section=nxp_detector_number.m_def,repeats=True)


    class nxp_data(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='data',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Data values from the detector.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-data-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-data-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_long_name(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='long_name',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Title of measurement
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-data-long-name-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-data-long-name-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_long_name = SubSection(sub_section=nxp_long_name.m_def,repeats=True)
        class nxp_check_sum(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='check_sum',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_INT',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Integral of data as check of data integrity
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-data-check-sum-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-data-check-sum-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_check_sum = SubSection(sub_section=nxp_check_sum.m_def,repeats=True)
    nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)


    class nxp_data_errors(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='data_errors',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The best estimate of the uncertainty in the data value. Where
                possible, this should be the standard deviation, which has the same units
                as the data. The form data_error is deprecated.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-data-errors-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-data-errors-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_data_errors = SubSection(sub_section=nxp_data_errors.m_def,repeats=True)


    class nxp_x_pixel_offset(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='x_pixel_offset',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Offset from the detector center in x-direction.   Can be multidimensional
                when needed.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-x-pixel-offset-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-x-pixel-offset-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_axis(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_POSINT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='axis',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_POSINT',
            )
            nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='see: https://github.com/nexusformat/definitions/issues/436',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-x-pixel-offset-axis-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-x-pixel-offset-axis-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: 1''',
                default='1',
            )
        nxp_axis = SubSection(sub_section=nxp_axis.m_def,repeats=True)
        class nxp_primary(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_POSINT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='primary',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_POSINT',
            )
            nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='see: https://github.com/nexusformat/definitions/issues/436',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-x-pixel-offset-primary-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-x-pixel-offset-primary-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: 1''',
                default='1',
            )
        nxp_primary = SubSection(sub_section=nxp_primary.m_def,repeats=True)
        class nxp_long_name(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='long_name',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            x-axis offset from detector center
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-x-pixel-offset-long-name-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-x-pixel-offset-long-name-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_long_name = SubSection(sub_section=nxp_long_name.m_def,repeats=True)
    nxp_x_pixel_offset = SubSection(sub_section=nxp_x_pixel_offset.m_def,repeats=True)


    class nxp_y_pixel_offset(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='y_pixel_offset',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Offset from the detector center in the y-direction.   Can be
                multidimensional when different values are required for each pixel.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-y-pixel-offset-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-y-pixel-offset-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_axis(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_POSINT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='axis',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_POSINT',
            )
            nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='see: https://github.com/nexusformat/definitions/issues/436',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-y-pixel-offset-axis-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-y-pixel-offset-axis-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: 2''',
                default='2',
            )
        nxp_axis = SubSection(sub_section=nxp_axis.m_def,repeats=True)
        class nxp_primary(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_POSINT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='primary',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_POSINT',
            )
            nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='see: https://github.com/nexusformat/definitions/issues/436',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-y-pixel-offset-primary-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-y-pixel-offset-primary-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: 1''',
                default='1',
            )
        nxp_primary = SubSection(sub_section=nxp_primary.m_def,repeats=True)
        class nxp_long_name(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='long_name',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            y-axis offset from detector center
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-y-pixel-offset-long-name-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-y-pixel-offset-long-name-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_long_name = SubSection(sub_section=nxp_long_name.m_def,repeats=True)
    nxp_y_pixel_offset = SubSection(sub_section=nxp_y_pixel_offset.m_def,repeats=True)


    class nxp_z_pixel_offset(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='z_pixel_offset',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Offset from the detector center in the z-direction.         Can be
                multidimensional when different values are required for each pixel.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-z-pixel-offset-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-z-pixel-offset-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_axis(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_POSINT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='axis',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_POSINT',
            )
            nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='see: https://github.com/nexusformat/definitions/issues/436',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-z-pixel-offset-axis-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-z-pixel-offset-axis-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: 3''',
                default='3',
            )
        nxp_axis = SubSection(sub_section=nxp_axis.m_def,repeats=True)
        class nxp_primary(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_POSINT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='primary',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_POSINT',
            )
            nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='see: https://github.com/nexusformat/definitions/issues/436',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-z-pixel-offset-primary-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-z-pixel-offset-primary-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: 1''',
                default='1',
            )
        nxp_primary = SubSection(sub_section=nxp_primary.m_def,repeats=True)
        class nxp_long_name(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='long_name',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            y-axis offset from detector center
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-z-pixel-offset-long-name-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-z-pixel-offset-long-name-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_long_name = SubSection(sub_section=nxp_long_name.m_def,repeats=True)
    nxp_z_pixel_offset = SubSection(sub_section=nxp_z_pixel_offset.m_def,repeats=True)


    class nxp_distance(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='distance',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        This is the distance to the previous component in the       instrument;
                most often the sample. The usage depends on the       nature of the
                detector: Most often it is the distance of the       detector assembly.
                But there are irregular detectors. In this       case the distance must be
                specified for each detector pixel.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-distance-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-distance-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)


    class nxp_polar_angle(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='polar_angle',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        This is the polar angle of the detector towards the previous
                component in the instrument; most often the sample.       The usage
                depends on the       nature of the detector.       Most often it is the
                polar_angle of the detector assembly.       But there are irregular
                detectors.       In this       case, the polar_angle  must be specified
                for each detector pixel.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-polar-angle-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-polar-angle-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_polar_angle = SubSection(sub_section=nxp_polar_angle.m_def,repeats=True)


    class nxp_azimuthal_angle(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='azimuthal_angle',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        This is the azimuthal angle angle of the detector towards       the
                previous component in the instrument; most often the sample.       The
                usage depends on the       nature of the detector.       Most often it is
                the azimuthal_angle of the detector assembly.       But there are
                irregular detectors.       In this       case, the azimuthal_angle  must
                be specified for each detector pixel.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-azimuthal-angle-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-azimuthal-angle-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_azimuthal_angle = SubSection(sub_section=nxp_azimuthal_angle.m_def,repeats=True)


    class nxp_description(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='description',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        name/manufacturer/model/etc. information
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-description-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-description-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)


    class nxp_serial_number(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='serial_number',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Serial number for the detector
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-serial-number-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-serial-number-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_serial_number = SubSection(sub_section=nxp_serial_number.m_def,repeats=True)


    class nxp_local_name(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='local_name',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Local name for the detector
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-local-name-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-local-name-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_local_name = SubSection(sub_section=nxp_local_name.m_def,repeats=True)


    class nxp_solid_angle(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='solid_angle',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_SOLID_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Solid angle subtended by the detector at the sample
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-solid-angle-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-solid-angle-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_solid_angle = SubSection(sub_section=nxp_solid_angle.m_def,repeats=True)


    class nxp_x_pixel_size(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='x_pixel_size',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Size of each detector pixel. If it is scalar all pixels are the same size.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-x-pixel-size-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-x-pixel-size-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_x_pixel_size = SubSection(sub_section=nxp_x_pixel_size.m_def,repeats=True)


    class nxp_y_pixel_size(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='y_pixel_size',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Size of each detector pixel. If it is scalar all pixels are the same size
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-y-pixel-size-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-y-pixel-size-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_y_pixel_size = SubSection(sub_section=nxp_y_pixel_size.m_def,repeats=True)


    class nxp_dead_time(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='dead_time',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Detector dead time
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-dead-time-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-dead-time-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_dead_time = SubSection(sub_section=nxp_dead_time.m_def,repeats=True)


    class nxp_gas_pressure(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='gas_pressure',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_PRESSURE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Detector gas pressure
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-gas-pressure-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-gas-pressure-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_gas_pressure = SubSection(sub_section=nxp_gas_pressure.m_def,repeats=True)


    class nxp_detection_gas_path(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='detection_gas_path',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        maximum drift space dimension
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-detection-gas-path-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-detection-gas-path-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_detection_gas_path = SubSection(sub_section=nxp_detection_gas_path.m_def,repeats=True)


    class nxp_crate(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='crate',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Crate number of detector
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-crate-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-crate-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_local_name(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='local_name',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Equivalent local term
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-crate-local-name-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-crate-local-name-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_local_name = SubSection(sub_section=nxp_local_name.m_def,repeats=True)
    nxp_crate = SubSection(sub_section=nxp_crate.m_def,repeats=True)


    class nxp_slot(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='slot',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Slot number of detector
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-slot-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-slot-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_local_name(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='local_name',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Equivalent local term
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-slot-local-name-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-slot-local-name-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_local_name = SubSection(sub_section=nxp_local_name.m_def,repeats=True)
    nxp_slot = SubSection(sub_section=nxp_slot.m_def,repeats=True)


    class nxp_input(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='input',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Input number of detector
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-input-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-input-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_local_name(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='local_name',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Equivalent local term
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-input-local-name-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-input-local-name-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_local_name = SubSection(sub_section=nxp_local_name.m_def,repeats=True)
    nxp_input = SubSection(sub_section=nxp_input.m_def,repeats=True)


    class nxp_type(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='type',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Description of type such as He3 gas cylinder, He3 PSD, scintillator,
                fission chamber, proportion counter, ion chamber, ccd, pixel, image plate,
                CMOS, ...
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-type-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-type-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)


    class nxp_real_time(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='real_time',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Real-time of the exposure (use this if exposure time varies for       each
                array element, otherwise use ``count_time`` field).
                Most often there is a single real time value that is constant across
                an entire image frame.  In such cases, only a 1-D array is needed.
                But there are detectors in which the real time       changes per pixel. In
                that case, more than one dimension is needed. Therefore       the rank of
                this field should be less than or equal to (detector rank + 1).
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-real-time-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-real-time-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_real_time = SubSection(sub_section=nxp_real_time.m_def,repeats=True)


    class nxp_start_time(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='start_time',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        start time for each frame, with the ``start`` attribute as absolute
                reference
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-start-time-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-start-time-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_start(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-start-time-start-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-start-time-start-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start = SubSection(sub_section=nxp_start.m_def,repeats=True)
    nxp_start_time = SubSection(sub_section=nxp_start_time.m_def,repeats=True)


    class nxp_stop_time(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='stop_time',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        stop time for each frame, with the ``start`` attribute as absolute
                reference
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-stop-time-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-stop-time-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_start(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-stop-time-start-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-stop-time-start-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start = SubSection(sub_section=nxp_start.m_def,repeats=True)
    nxp_stop_time = SubSection(sub_section=nxp_stop_time.m_def,repeats=True)


    class nxp_calibration_date(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='calibration_date',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_DATE_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        date of last calibration (geometry and/or efficiency) measurements
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-calibration-date-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-calibration-date-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_calibration_date = SubSection(sub_section=nxp_calibration_date.m_def,repeats=True)


    class nxp_layout(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='layout',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        How the detector is represented
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-layout-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-layout-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: point,linear,area''',
            default='point,linear,area',
        )
    nxp_layout = SubSection(sub_section=nxp_layout.m_def,repeats=True)


    class nxp_count_time(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='count_time',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Elapsed actual counting time
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-count-time-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-count-time-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_count_time = SubSection(sub_section=nxp_count_time.m_def,repeats=True)


    class nxp_sequence_number(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='sequence_number',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        In order to properly sort the order of the images taken in (for
                example) a tomography experiment, a sequence number is stored with each
                image.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-sequence-number-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-sequence-number-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_sequence_number = SubSection(sub_section=nxp_sequence_number.m_def,repeats=True)


    class nxp_beam_center_x(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='beam_center_x',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        This is the x position where the direct beam would hit the detector.
                This is a length and can be outside of the actual       detector. The
                length can be in physical units or pixels       as documented by the units
                attribute.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-beam-center-x-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-beam-center-x-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_beam_center_x = SubSection(sub_section=nxp_beam_center_x.m_def,repeats=True)


    class nxp_beam_center_y(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='beam_center_y',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        This is the y position where the direct beam would hit the detector.
                This is a length and can be outside of the actual       detector. The
                length can be in physical units or pixels       as documented by the units
                attribute.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-beam-center-y-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-beam-center-y-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_beam_center_y = SubSection(sub_section=nxp_beam_center_y.m_def,repeats=True)


    class nxp_frame_start_number(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='frame_start_number',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        This is the start number of the first frame of a scan. In PX one
                often scans a couple of frames on a give sample, then does something else,
                then returns to the same sample and scans some more frames. Each time with
                a new data file. This number helps concatenating such measurements.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-frame-start-number-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-frame-start-number-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_frame_start_number = SubSection(sub_section=nxp_frame_start_number.m_def,repeats=True)


    class nxp_diameter(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='diameter',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        The diameter of a cylindrical detector
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-diameter-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-diameter-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_diameter = SubSection(sub_section=nxp_diameter.m_def,repeats=True)


    class nxp_acquisition_mode(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='acquisition_mode',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CHAR',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        The acquisition mode of the detector.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-acquisition-mode-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-acquisition-mode-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: gated,triggered,summed,event,histogrammed,decimated''',
            default='gated,triggered,summed,event,histogrammed,decimated',
        )
    nxp_acquisition_mode = SubSection(sub_section=nxp_acquisition_mode.m_def,repeats=True)


    class nxp_angular_calibration_applied(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='angular_calibration_applied',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_BOOLEAN',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        True when the angular calibration has been applied in the
                electronics, false otherwise.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-angular-calibration-applied-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-angular-calibration-applied-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_angular_calibration_applied = SubSection(sub_section=nxp_angular_calibration_applied.m_def,repeats=True)


    class nxp_angular_calibration(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='angular_calibration',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Angular calibration data.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-angular-calibration-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-angular-calibration-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_angular_calibration = SubSection(sub_section=nxp_angular_calibration.m_def,repeats=True)


    class nxp_flatfield_applied(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='flatfield_applied',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_BOOLEAN',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        True when the flat field correction has been applied in the
                electronics, false otherwise.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-flatfield-applied-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-flatfield-applied-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_flatfield_applied = SubSection(sub_section=nxp_flatfield_applied.m_def,repeats=True)


    class nxp_flatfield(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='flatfield',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Flat field correction data.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-flatfield-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-flatfield-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_flatfield = SubSection(sub_section=nxp_flatfield.m_def,repeats=True)


    class nxp_flatfield_errors(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='flatfield_errors',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Errors of the flat field correction data.         The form flatfield_error
                is deprecated.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-flatfield-errors-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-flatfield-errors-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_flatfield_errors = SubSection(sub_section=nxp_flatfield_errors.m_def,repeats=True)


    class nxp_pixel_mask_applied(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='pixel_mask_applied',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_BOOLEAN',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        True when the pixel mask correction has been applied in the
                electronics, false otherwise.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-pixel-mask-applied-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-pixel-mask-applied-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_pixel_mask_applied = SubSection(sub_section=nxp_pixel_mask_applied.m_def,repeats=True)


    class nxp_pixel_mask(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='pixel_mask',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The 32-bit pixel mask for the detector. Can be either one mask       for
                the whole dataset (i.e. an array with indices i, j) or       each frame
                can have its own mask (in which case it would be       an array with
                indices np, i, j).

                Contains a bit field for each pixel to signal dead,       blind or high or
                otherwise unwanted or undesirable pixels.       They have the following
                meaning:

                .. can't make a table here, a bullet list will have to do for now

                * bit 0: gap (pixel with no sensor)       * bit 1: dead       * bit 2:
                under responding       * bit 3: over responding       * bit 4: noisy
                * bit 5: -undefined-       * bit 6: pixel is part of a cluster of
                problematic pixels (bit set in addition to others)       * bit 7:
                -undefined-       * bit 8: user defined mask (e.g. around beamstop)
                * bits 9-30: -undefined-       * bit 31: virtual pixel (corner pixel with
                interpolated value)

                Normal data analysis software would       not take pixels into account
                when a bit in (mask & 0x0000FFFF) is       set. Tag bit in the upper
                two bytes would indicate special pixel       properties that normally
                would not be a sole reason to reject the       intensity value (unless
                lower bits are set.

                If the full bit depths is not required, providing a       mask with fewer
                bits is permissible.

                If needed, additional pixel masks can be specified by       including
                additional entries named pixel_mask_N, where       N is an integer. For
                example, a general bad pixel mask       could be specified in pixel_mask
                that indicates noisy       and dead pixels, and an additional pixel mask
                from       experiment-specific shadowing could be specified in
                pixel_mask_2. The cumulative mask is the bitwise OR       of pixel_mask
                and any pixel_mask_N entries.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-pixel-mask-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-pixel-mask-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_pixel_mask = SubSection(sub_section=nxp_pixel_mask.m_def,repeats=True)


    class nxp_countrate_correction_applied(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='countrate_correction_applied',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_BOOLEAN',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        True when a count-rate correction has already been applied in the
                electronics, false otherwise.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-countrate-correction-applied-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-countrate-correction-applied-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_countrate_correction_applied = SubSection(sub_section=nxp_countrate_correction_applied.m_def,repeats=True)


    class nxp_bit_depth_readout(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='bit_depth_readout',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        How many bits the electronics reads per pixel.       With CCD's and single
                photon counting detectors,       this must not align with traditional
                integer sizes.       This can be 4, 8, 12, 14, 16, ...
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-bit-depth-readout-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-bit-depth-readout-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_bit_depth_readout = SubSection(sub_section=nxp_bit_depth_readout.m_def,repeats=True)


    class nxp_detector_readout_time(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='detector_readout_time',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Time it takes to read the detector (typically milliseconds).       This is
                important to know for time resolved experiments.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-detector-readout-time-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-detector-readout-time-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_detector_readout_time = SubSection(sub_section=nxp_detector_readout_time.m_def,repeats=True)


    class nxp_trigger_delay_time(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='trigger_delay_time',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Time it takes to start exposure after a trigger signal has been received.
                This is the reaction time of the detector firmware after receiving the
                trigger signal       to when the detector starts to acquire the exposure,
                including any user set delay..       This is important to know for time
                resolved experiments.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-trigger-delay-time-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-trigger-delay-time-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_trigger_delay_time = SubSection(sub_section=nxp_trigger_delay_time.m_def,repeats=True)


    class nxp_trigger_delay_time_set(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='trigger_delay_time_set',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        User-specified trigger delay.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-trigger-delay-time-set-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-trigger-delay-time-set-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_trigger_delay_time_set = SubSection(sub_section=nxp_trigger_delay_time_set.m_def,repeats=True)


    class nxp_trigger_internal_delay_time(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='trigger_internal_delay_time',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Time it takes to start exposure after a trigger signal has been received.
                This is the reaction time of the detector hardware after receiving the
                trigger signal to when the detector starts to acquire the exposure.
                It forms the lower boundary of the trigger_delay_time when the user
                does not request an additional delay.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-trigger-internal-delay-time-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-trigger-internal-delay-time-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_trigger_internal_delay_time = SubSection(sub_section=nxp_trigger_internal_delay_time.m_def,repeats=True)


    class nxp_trigger_dead_time(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='trigger_dead_time',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Time during which no new trigger signal can be accepted.       Typically
                this is the       trigger_delay_time + exposure_time + readout_time.
                This is important to know for time resolved experiments.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-trigger-dead-time-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-trigger-dead-time-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_trigger_dead_time = SubSection(sub_section=nxp_trigger_dead_time.m_def,repeats=True)


    class nxp_frame_time(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='frame_time',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        This is time for each frame. This is exposure_time + readout time.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-frame-time-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-frame-time-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_frame_time = SubSection(sub_section=nxp_frame_time.m_def,repeats=True)


    class nxp_gain_setting(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='gain_setting',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CHAR',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        The gain setting of the detector. This influences background etc.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-gain-setting-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-gain-setting-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: high,standard,fast,auto''',
            default='high,standard,fast,auto',
        )
    nxp_gain_setting = SubSection(sub_section=nxp_gain_setting.m_def,repeats=True)


    class nxp_saturation_value(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='saturation_value',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The value at which the detector goes into saturation.       Especially
                common to CCD detectors, the data       is known to be invalid above this
                value.

                For example, given a saturation_value and an underload_value, the valid
                pixels are those less than or equal to the saturation_value and greater
                than or equal to the underload_value.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-saturation-value-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-saturation-value-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_saturation_value = SubSection(sub_section=nxp_saturation_value.m_def,repeats=True)


    class nxp_underload_value(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='underload_value',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The lowest value at which pixels for this detector would be reasonably
                measured. The data is known to be invalid below this value.

                For example, given a saturation_value and an underload_value, the valid
                pixels are those less than or equal to the saturation_value and greater
                than or equal to the underload_value.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-underload-value-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-underload-value-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_underload_value = SubSection(sub_section=nxp_underload_value.m_def,repeats=True)


    class nxp_number_of_cycles(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='number_of_cycles',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        CCD images are sometimes constructed by summing       together multiple
                short exposures in the       electronics. This reduces background etc.
                This is the number of short exposures used to sum       images for an
                image.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-number-of-cycles-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-number-of-cycles-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_number_of_cycles = SubSection(sub_section=nxp_number_of_cycles.m_def,repeats=True)


    class nxp_sensor_material(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='sensor_material',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CHAR',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        At times, radiation is not directly sensed by the detector.       Rather,
                the detector might sense the output from some       converter like a
                scintillator.       This is the name of this converter material.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-sensor-material-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-sensor-material-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_sensor_material = SubSection(sub_section=nxp_sensor_material.m_def,repeats=True)


    class nxp_sensor_thickness(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='sensor_thickness',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        At times, radiation is not directly sensed by the detector.        Rather,
                the detector might sense the output from some        converter like a
                scintillator.        This is the thickness of this converter material.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-sensor-thickness-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-sensor-thickness-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_sensor_thickness = SubSection(sub_section=nxp_sensor_thickness.m_def,repeats=True)


    class nxp_threshold_energy(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='threshold_energy',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ENERGY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Single photon counter detectors can be adjusted       for a certain energy
                range in which they       work optimally. This is the energy setting for
                this.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-threshold-energy-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-threshold-energy-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_threshold_energy = SubSection(sub_section=nxp_threshold_energy.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                      Declares which child group
                contains a path leading            to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute           to help
                define the path to the default dataset to be plotted.           See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXbeam_stop(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXbeam_stop',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                A device that blocks the beam completely, usually to protect a detector.
        Beamstops and their positions are important for SANS         and SAXS experiments.
        https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_GEOMETRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXgeometry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        engineering shape, orientation and position of the beam stop.
                https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-geometry-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-geometry-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_GEOMETRY = SubSection(sub_section=nxp_GEOMETRY.m_def,repeats=True)


    class nxp_description(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='description',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        description of beamstop
                https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-description-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-description-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: circular,rectangular''',
            default='circular,rectangular',
        )
    nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)


    class nxp_size(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='size',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        size of beamstop
                https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-size-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-size-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_size = SubSection(sub_section=nxp_size.m_def,repeats=True)


    class nxp_x(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='x',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        x position of the beamstop in relation to the detector
                https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-x-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-x-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_x = SubSection(sub_section=nxp_x.m_def,repeats=True)


    class nxp_y(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='y',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        y position of the beamstop in relation to the detector
                https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-y-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-y-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_y = SubSection(sub_section=nxp_y.m_def,repeats=True)


    class nxp_distance_to_detector(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='distance_to_detector',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        distance of the beamstop to the detector
                https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-distance-to-detector-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-distance-to-detector-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_distance_to_detector = SubSection(sub_section=nxp_distance_to_detector.m_def,repeats=True)


    class nxp_status(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='status',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-status-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-status-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: in,out''',
            default='in,out',
        )
    nxp_status = SubSection(sub_section=nxp_status.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXcrystal(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXcrystal',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                A crystal monochromator or analyzer.           Permits double bent
        monochromator comprised of multiple segments with anisotropic      Gaussian
        mosaic.          If curvatures are set to zero or are absent, array      is
        considered to be flat.          Scattering vector is perpendicular to surface.
        Crystal is oriented     parallel to beam incident on crystal before rotation, and
        lies in     vertical plane.
        https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_GEOMETRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXgeometry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Position of crystal
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-geometry-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-geometry-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_GEOMETRY = SubSection(sub_section=nxp_GEOMETRY.m_def,repeats=True)


    class nxp_temperature_log(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXlog',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='temperature_log',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        log file of crystal temperature
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-temperature-log-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-temperature-log-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_temperature_log = SubSection(sub_section=nxp_temperature_log.m_def,repeats=True)


    class nxp_reflectivity(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXdata',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='reflectivity',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        crystal reflectivity versus wavelength
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-reflectivity-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-reflectivity-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_reflectivity = SubSection(sub_section=nxp_reflectivity.m_def,repeats=True)


    class nxp_transmission(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXdata',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='transmission',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        crystal transmission versus wavelength
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-transmission-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-transmission-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_transmission = SubSection(sub_section=nxp_transmission.m_def,repeats=True)


    class nxp_shape(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXshape.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXshape',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='shape',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        A NXshape group describing the shape of the crystal arrangement
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-shape-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-shape-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_shape = SubSection(sub_section=nxp_shape.m_def,repeats=True)


    class nxp_usage(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='usage',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CHAR',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        How this crystal is used.  Choices are in the list.
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-usage-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-usage-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: Bragg,Laue''',
            default='Bragg,Laue',
        )
    nxp_usage = SubSection(sub_section=nxp_usage.m_def,repeats=True)


    class nxp_type(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='type',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Type or material of monochromating substance.         Chemical formula can
                be specified separately.       Use the "reflection" field to indicate the
                (hkl) orientation.       Use the "d_spacing" field to record the lattice
                plane spacing.              This field was changed (2010-11-17) from an
                enumeration to       a string since common usage showed a wider variety of
                use       than a simple list.  These are the items in the list at
                the time of the change: PG (Highly Oriented Pyrolytic Graphite) |       Ge
                | Si | Cu | Fe3Si | CoFe | Cu2MnAl (Heusler) | Multilayer |       Diamond.
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-type-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-type-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)


    class nxp_chemical_formula(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='chemical_formula',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The chemical formula specified using CIF conventions.       Abbreviated
                version of CIF standard:

                * Only recognized element symbols may be used.       * Each element symbol
                is followed by a 'count' number. A count of '1' may be omitted.       * A
                space or parenthesis must separate each cluster of (element symbol +
                count).       * Where a group of elements is enclosed in parentheses, the
                multiplier for the          group must follow the closing parentheses.
                That is, all element and group          multipliers are assumed to be
                printed as subscripted numbers.       * Unless the elements are ordered in
                a manner that corresponds to their chemical          structure, the order
                of the elements within any group or moiety depends on          whether or
                not carbon is present.       * If carbon is present, the order should be:
                C, then H, then the other elements in alphabetical order of their symbol.
                If carbon is not present, the elements are listed purely in alphabetic
                order of their symbol.        * This is the *Hill* system used by Chemical
                Abstracts.
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-chemical-formula-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-chemical-formula-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_chemical_formula = SubSection(sub_section=nxp_chemical_formula.m_def,repeats=True)


    class nxp_order_no(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='order_no',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        A number which describes if this is the first, second,..
                :math:`n^{th}` crystal in a multi crystal monochromator
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-order-no-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-order-no-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_order_no = SubSection(sub_section=nxp_order_no.m_def,repeats=True)


    class nxp_cut_angle(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='cut_angle',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Cut angle of reflecting Bragg plane and plane of crystal surface
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-cut-angle-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-cut-angle-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_cut_angle = SubSection(sub_section=nxp_cut_angle.m_def,repeats=True)


    class nxp_space_group(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='space_group',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Space group of crystal structure
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-space-group-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-space-group-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_space_group = SubSection(sub_section=nxp_space_group.m_def,repeats=True)


    class nxp_unit_cell(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='unit_cell',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Unit cell parameters (lengths and angles)
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_unit_cell = SubSection(sub_section=nxp_unit_cell.m_def,repeats=True)


    class nxp_unit_cell_a(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='unit_cell_a',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Unit cell lattice parameter: length of side a
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-a-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-a-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_unit_cell_a = SubSection(sub_section=nxp_unit_cell_a.m_def,repeats=True)


    class nxp_unit_cell_b(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='unit_cell_b',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Unit cell lattice parameter: length of side b
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-b-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-b-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_unit_cell_b = SubSection(sub_section=nxp_unit_cell_b.m_def,repeats=True)


    class nxp_unit_cell_c(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='unit_cell_c',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Unit cell lattice parameter: length of side c
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-c-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-c-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_unit_cell_c = SubSection(sub_section=nxp_unit_cell_c.m_def,repeats=True)


    class nxp_unit_cell_alpha(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='unit_cell_alpha',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Unit cell lattice parameter: angle alpha
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-alpha-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-alpha-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_unit_cell_alpha = SubSection(sub_section=nxp_unit_cell_alpha.m_def,repeats=True)


    class nxp_unit_cell_beta(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='unit_cell_beta',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Unit cell lattice parameter: angle beta
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-beta-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-beta-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_unit_cell_beta = SubSection(sub_section=nxp_unit_cell_beta.m_def,repeats=True)


    class nxp_unit_cell_gamma(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='unit_cell_gamma',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Unit cell lattice parameter: angle gamma
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-gamma-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-gamma-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_unit_cell_gamma = SubSection(sub_section=nxp_unit_cell_gamma.m_def,repeats=True)


    class nxp_unit_cell_volume(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='unit_cell_volume',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_VOLUME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Volume of the unit cell
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-volume-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-unit-cell-volume-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_unit_cell_volume = SubSection(sub_section=nxp_unit_cell_volume.m_def,repeats=True)


    class nxp_orientation_matrix(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='orientation_matrix',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Orientation matrix of single crystal sample using Busing-Levy convention:
                W. R. Busing and H. A. Levy (1967). Acta Cryst. 22, 457-464
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-orientation-matrix-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-orientation-matrix-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_orientation_matrix = SubSection(sub_section=nxp_orientation_matrix.m_def,repeats=True)


    class nxp_wavelength(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='wavelength',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_WAVELENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Optimum diffracted wavelength
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-wavelength-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-wavelength-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_wavelength = SubSection(sub_section=nxp_wavelength.m_def,repeats=True)


    class nxp_d_spacing(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='d_spacing',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        spacing between crystal planes of the reflection
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-d-spacing-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-d-spacing-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_d_spacing = SubSection(sub_section=nxp_d_spacing.m_def,repeats=True)


    class nxp_scattering_vector(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='scattering_vector',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_WAVENUMBER',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Scattering vector, Q, of nominal reflection
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-scattering-vector-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-scattering-vector-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_scattering_vector = SubSection(sub_section=nxp_scattering_vector.m_def,repeats=True)


    class nxp_reflection(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='reflection',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_UNITLESS',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Miller indices (hkl) values of nominal reflection
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-reflection-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-reflection-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_reflection = SubSection(sub_section=nxp_reflection.m_def,repeats=True)


    class nxp_thickness(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='thickness',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Thickness of the crystal.  (Required for Laue orientations - see "usage"
                field)
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-thickness-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-thickness-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_thickness = SubSection(sub_section=nxp_thickness.m_def,repeats=True)


    class nxp_density(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='density',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_MASS_DENSITY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        mass density of the crystal
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-density-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-density-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_density = SubSection(sub_section=nxp_density.m_def,repeats=True)


    class nxp_segment_width(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='segment_width',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Horizontal width of individual segment
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-segment-width-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-segment-width-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_segment_width = SubSection(sub_section=nxp_segment_width.m_def,repeats=True)


    class nxp_segment_height(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='segment_height',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Vertical height of individual segment
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-segment-height-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-segment-height-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_segment_height = SubSection(sub_section=nxp_segment_height.m_def,repeats=True)


    class nxp_segment_thickness(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='segment_thickness',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Thickness of individual segment
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-segment-thickness-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-segment-thickness-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_segment_thickness = SubSection(sub_section=nxp_segment_thickness.m_def,repeats=True)


    class nxp_segment_gap(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='segment_gap',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Typical gap between adjacent segments
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-segment-gap-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-segment-gap-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_segment_gap = SubSection(sub_section=nxp_segment_gap.m_def,repeats=True)


    class nxp_segment_columns(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='segment_columns',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        number of segment columns in horizontal direction
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-segment-columns-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-segment-columns-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_segment_columns = SubSection(sub_section=nxp_segment_columns.m_def,repeats=True)


    class nxp_segment_rows(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='segment_rows',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        number of segment rows in vertical direction
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-segment-rows-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-segment-rows-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_segment_rows = SubSection(sub_section=nxp_segment_rows.m_def,repeats=True)


    class nxp_mosaic_horizontal(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='mosaic_horizontal',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        horizontal mosaic Full Width Half Maximum
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-mosaic-horizontal-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-mosaic-horizontal-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_mosaic_horizontal = SubSection(sub_section=nxp_mosaic_horizontal.m_def,repeats=True)


    class nxp_mosaic_vertical(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='mosaic_vertical',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        vertical mosaic Full Width Half Maximum
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-mosaic-vertical-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-mosaic-vertical-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_mosaic_vertical = SubSection(sub_section=nxp_mosaic_vertical.m_def,repeats=True)


    class nxp_curvature_horizontal(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='curvature_horizontal',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Horizontal curvature of focusing crystal
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-curvature-horizontal-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-curvature-horizontal-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_curvature_horizontal = SubSection(sub_section=nxp_curvature_horizontal.m_def,repeats=True)


    class nxp_curvature_vertical(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='curvature_vertical',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Vertical curvature of focusing crystal
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-curvature-vertical-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-curvature-vertical-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_curvature_vertical = SubSection(sub_section=nxp_curvature_vertical.m_def,repeats=True)


    class nxp_is_cylindrical(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='is_cylindrical',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_BOOLEAN',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Is this crystal bent cylindrically?
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-is-cylindrical-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-is-cylindrical-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_is_cylindrical = SubSection(sub_section=nxp_is_cylindrical.m_def,repeats=True)


    class nxp_cylindrical_orientation_angle(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='cylindrical_orientation_angle',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        If cylindrical: cylinder orientation angle
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-cylindrical-orientation-angle-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-cylindrical-orientation-angle-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_cylindrical_orientation_angle = SubSection(sub_section=nxp_cylindrical_orientation_angle.m_def,repeats=True)


    class nxp_polar_angle(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='polar_angle',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Polar (scattering) angle at which crystal assembly is positioned.
                Note: some instrument geometries call this term 2theta.
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-polar-angle-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-polar-angle-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_polar_angle = SubSection(sub_section=nxp_polar_angle.m_def,repeats=True)


    class nxp_azimuthal_angle(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='azimuthal_angle',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Azimuthal angle at which crystal assembly is positioned
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-azimuthal-angle-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-azimuthal-angle-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_azimuthal_angle = SubSection(sub_section=nxp_azimuthal_angle.m_def,repeats=True)


    class nxp_bragg_angle(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='bragg_angle',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Bragg angle of nominal reflection
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-bragg-angle-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-bragg-angle-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_bragg_angle = SubSection(sub_section=nxp_bragg_angle.m_def,repeats=True)


    class nxp_temperature(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='temperature',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TEMPERATURE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        average/nominal crystal temperature
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-temperature-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-temperature-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_temperature = SubSection(sub_section=nxp_temperature.m_def,repeats=True)


    class nxp_temperature_coefficient(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='temperature_coefficient',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        how lattice parameter changes with temperature
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-temperature-coefficient-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-temperature-coefficient-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_temperature_coefficient = SubSection(sub_section=nxp_temperature_coefficient.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                      Declares which child group
                contains a path leading            to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute           to help
                define the path to the default dataset to be plotted.           See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXaperture(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXaperture',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        A beamline aperture.
        https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_GEOMETRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXgeometry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        location and shape of aperture                          .. TODO:
                documentation needs improvement, contributions welcome
                * description of terms is poor and leaves much to interpretation
                * Describe what is meant by translation _here_ and ...                 *
                Similar throughout base classes                 * Some base classes do
                this much better                 * Such as where is the gap written?
                https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-geometry-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-geometry-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_GEOMETRY = SubSection(sub_section=nxp_GEOMETRY.m_def,repeats=True)


    class nxp_BLADE_GEOMETRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='BLADE_GEOMETRY',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXgeometry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        location and shape of each blade
                https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-blade-geometry-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-blade-geometry-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_BLADE_GEOMETRY = SubSection(sub_section=nxp_BLADE_GEOMETRY.m_def,repeats=True)


    class nxp_NOTE(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXnote',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        describe any additional information in a note*
                https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-note-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-note-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_NOTE = SubSection(sub_section=nxp_NOTE.m_def,repeats=True)


    class nxp_material(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='material',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Absorbing material of the aperture
                https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-material-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-material-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_material = SubSection(sub_section=nxp_material.m_def,repeats=True)


    class nxp_description(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='description',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Description of aperture
                https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-description-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-description-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXinsertion_device(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXinsertion_device',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        An insertion device, as used in a synchrotron light source.
        https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device
        .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_spectrum(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXdata',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='spectrum',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        spectrum of insertion device
                https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-spectrum-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-spectrum-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_spectrum = SubSection(sub_section=nxp_spectrum.m_def,repeats=True)


    class nxp_GEOMETRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXgeometry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        "Engineering" position of insertion device
                https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-geometry-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-geometry-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_GEOMETRY = SubSection(sub_section=nxp_GEOMETRY.m_def,repeats=True)


    class nxp_type(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='type',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-type-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-type-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: undulator,wiggler''',
            default='undulator,wiggler',
        )
    nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)


    class nxp_gap(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='gap',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        separation between opposing pairs of magnetic poles
                https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-gap-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-gap-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_gap = SubSection(sub_section=nxp_gap.m_def,repeats=True)


    class nxp_taper(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='taper',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        angular of gap difference between upstream and downstream ends of the
                insertion device
                https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-taper-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-taper-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_taper = SubSection(sub_section=nxp_taper.m_def,repeats=True)


    class nxp_phase(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='phase',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-phase-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-phase-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_phase = SubSection(sub_section=nxp_phase.m_def,repeats=True)


    class nxp_poles(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='poles',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_UNITLESS',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        number of poles
                https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-poles-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-poles-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_poles = SubSection(sub_section=nxp_poles.m_def,repeats=True)


    class nxp_magnetic_wavelength(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='magnetic_wavelength',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_WAVELENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-magnetic-wavelength-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-magnetic-wavelength-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_magnetic_wavelength = SubSection(sub_section=nxp_magnetic_wavelength.m_def,repeats=True)


    class nxp_k(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='k',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_DIMENSIONLESS',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        beam displacement parameter
                https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-k-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-k-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_k = SubSection(sub_section=nxp_k.m_def,repeats=True)


    class nxp_length(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='length',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        length of insertion device
                https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-length-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-length-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_length = SubSection(sub_section=nxp_length.m_def,repeats=True)


    class nxp_power(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='power',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_POWER',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        total power delivered by insertion device
                https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-power-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-power-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_power = SubSection(sub_section=nxp_power.m_def,repeats=True)


    class nxp_energy(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='energy',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ENERGY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        energy of peak intensity in output spectrum
                https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-energy-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-energy-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_energy = SubSection(sub_section=nxp_energy.m_def,repeats=True)


    class nxp_bandwidth(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='bandwidth',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ENERGY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        bandwidth of peak energy
                https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-bandwidth-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-bandwidth-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_bandwidth = SubSection(sub_section=nxp_bandwidth.m_def,repeats=True)


    class nxp_harmonic(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='harmonic',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_UNITLESS',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        harmonic number of peak
                https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-harmonic-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-harmonic-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_harmonic = SubSection(sub_section=nxp_harmonic.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXdisk_chopper(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXdisk_chopper',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                A device blocking the beam in a temporal periodic pattern.

        A disk which blocks the beam but has one or more slits to periodically
        let neutrons through as the disk rotates. Often used in pairs, one
        NXdisk_chopper should be defined for each disk.

        The rotation of the disk is commonly monitored by recording a timestamp for
        each full rotation of disk, by having a sensor in the stationary disk housing
        sensing when it is aligned with a feature (such as a magnet) on the disk.
        We refer to this below as the "top-dead-center signal".

        Angles and positive rotation speeds are measured in an anticlockwise
        direction when facing away from the source.
        https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper
        .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_GEOMETRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXgeometry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-geometry-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-geometry-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_GEOMETRY = SubSection(sub_section=nxp_GEOMETRY.m_def,repeats=True)


    class nxp_type(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='type',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Type of the disk-chopper: only one from the enumerated list (match text
                exactly)
                https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-type-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-type-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: Chopper type single,contra_rotating_pair,synchro_pair''',
            default='Chopper type single,contra_rotating_pair,synchro_pair',
        )
    nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)


    class nxp_rotation_speed(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='rotation_speed',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FREQUENCY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Chopper rotation speed. Positive for anticlockwise rotation when
                facing away from the source, negative otherwise.
                https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-rotation-speed-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-rotation-speed-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_rotation_speed = SubSection(sub_section=nxp_rotation_speed.m_def,repeats=True)


    class nxp_slits(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='slits',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Number of slits
                https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-slits-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-slits-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_slits = SubSection(sub_section=nxp_slits.m_def,repeats=True)


    class nxp_slit_angle(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='slit_angle',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Angular opening
                https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-slit-angle-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-slit-angle-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_slit_angle = SubSection(sub_section=nxp_slit_angle.m_def,repeats=True)


    class nxp_pair_separation(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='pair_separation',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Disk spacing in direction of beam
                https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-pair-separation-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-pair-separation-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_pair_separation = SubSection(sub_section=nxp_pair_separation.m_def,repeats=True)


    class nxp_slit_edges(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='slit_edges',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Angle of each edge of every slit from the position of the
                top-dead-center timestamp sensor, anticlockwise when facing
                away from the source.                         The first edge must be the
                opening edge of a slit, thus the last edge                         may
                have an angle greater than 360 degrees.
                https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-slit-edges-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-slit-edges-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_slit_edges = SubSection(sub_section=nxp_slit_edges.m_def,repeats=True)


    class nxp_top_dead_center(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='top_dead_center',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Timestamps of the top-dead-center signal. The times are relative
                to the "start" attribute and in the units specified in the "units"
                attribute. Please note that absolute                         timestamps
                under unix are relative to ``1970-01-01T00:00:00.0Z``.
                https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-top-dead-center-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-top-dead-center-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_start(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-top-dead-center-start-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-top-dead-center-start-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start = SubSection(sub_section=nxp_start.m_def,repeats=True)
    nxp_top_dead_center = SubSection(sub_section=nxp_top_dead_center.m_def,repeats=True)


    class nxp_beam_position(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='beam_position',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Angular separation of the center of the beam and the
                top-dead-center timestamp sensor, anticlockwise when facing
                away from the source.
                https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-beam-position-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-beam-position-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_beam_position = SubSection(sub_section=nxp_beam_position.m_def,repeats=True)


    class nxp_radius(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='radius',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Radius of the disk
                https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-radius-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-radius-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_radius = SubSection(sub_section=nxp_radius.m_def,repeats=True)


    class nxp_slit_height(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='slit_height',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Total slit height
                https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-slit-height-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-slit-height-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_slit_height = SubSection(sub_section=nxp_slit_height.m_def,repeats=True)


    class nxp_phase(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='phase',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Chopper phase angle
                https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-phase-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-phase-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_phase = SubSection(sub_section=nxp_phase.m_def,repeats=True)


    class nxp_delay(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='delay',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Time difference between timing system t0 and chopper driving clock signal
                https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-delay-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-delay-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_delay = SubSection(sub_section=nxp_delay.m_def,repeats=True)


    class nxp_ratio(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='ratio',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Pulse reduction factor of this chopper in relation to other
                choppers/fastest pulse in the instrument
                https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-ratio-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-ratio-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_ratio = SubSection(sub_section=nxp_ratio.m_def,repeats=True)


    class nxp_distance(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='distance',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Effective distance to the origin
                https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-distance-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-distance-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)


    class nxp_wavelength_range(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='wavelength_range',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_WAVELENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Low and high values of wavelength range transmitted
                https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-wavelength-range-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-wavelength-range-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_wavelength_range = SubSection(sub_section=nxp_wavelength_range.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXmonitor(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXmonitor',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                A monitor of incident beam data.                   It is similar to the
        :ref:`NXdata` groups containing         monitor data and its associated dimension
        scale, e.g. time_of_flight or         wavelength in pulsed neutron instruments.
        However, it may also include         integrals, or scalar monitor counts, which
        are often used in both in both         pulsed and steady-state instrumentation.
        https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_integral_log(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='integral_log',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXlog',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Time variation of monitor counts
                https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-integral-log-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-integral-log-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_integral_log = SubSection(sub_section=nxp_integral_log.m_def,repeats=True)


    class nxp_GEOMETRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXgeometry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Geometry of the monitor
                https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-geometry-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-geometry-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_GEOMETRY = SubSection(sub_section=nxp_GEOMETRY.m_def,repeats=True)


    class nxp_mode(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='mode',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Count to a preset value based on either clock time (timer)             or
                received monitor counts (monitor).
                https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-mode-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-mode-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: monitor,timer''',
            default='monitor,timer',
        )
    nxp_mode = SubSection(sub_section=nxp_mode.m_def,repeats=True)


    class nxp_start_time(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='start_time',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_DATE_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Starting time of measurement
                https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-start-time-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-start-time-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_start_time = SubSection(sub_section=nxp_start_time.m_def,repeats=True)


    class nxp_end_time(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='end_time',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_DATE_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Ending time of measurement
                https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-end-time-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-end-time-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_end_time = SubSection(sub_section=nxp_end_time.m_def,repeats=True)


    class nxp_preset(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='preset',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        preset value for time or monitor
                https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-preset-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-preset-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_preset = SubSection(sub_section=nxp_preset.m_def,repeats=True)


    class nxp_distance(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='distance',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Distance of monitor from sample
                https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-distance-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-distance-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)


    class nxp_range(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='range',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Range (X-axis, Time-of-flight, etc.) over which the integral was
                calculated
                https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-range-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-range-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_range = SubSection(sub_section=nxp_range.m_def,repeats=True)


    class nxp_nominal(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='nominal',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Nominal reading to be used for normalisation purposes.
                https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-nominal-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-nominal-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_nominal = SubSection(sub_section=nxp_nominal.m_def,repeats=True)


    class nxp_integral(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='integral',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Total integral monitor counts
                https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-integral-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-integral-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_integral = SubSection(sub_section=nxp_integral.m_def,repeats=True)


    class nxp_type(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='type',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-type-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-type-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: Fission Chamber,Scintillator''',
            default='Fission Chamber,Scintillator',
        )
    nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)


    class nxp_time_of_flight(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='time_of_flight',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME_OF_FLIGHT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Time-of-flight
                https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-time-of-flight-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-time-of-flight-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_time_of_flight = SubSection(sub_section=nxp_time_of_flight.m_def,repeats=True)


    class nxp_efficiency(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='efficiency',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_DIMENSIONLESS',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Monitor efficiency
                https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-efficiency-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-efficiency-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_efficiency = SubSection(sub_section=nxp_efficiency.m_def,repeats=True)


    class nxp_data(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='data',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Monitor data
                https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-data-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-data-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)


    class nxp_sampled_fraction(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='sampled_fraction',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_DIMENSIONLESS',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Proportion of incident beam sampled by the monitor (0<x<1)
                https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-sampled-fraction-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-sampled-fraction-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_sampled_fraction = SubSection(sub_section=nxp_sampled_fraction.m_def,repeats=True)


    class nxp_count_time(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='count_time',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Elapsed actual counting time, can be an array of size ``np``
                when scanning. This is not the difference of the calendar time
                but the time the instrument was really counting, without
                pauses or times lost due beam unavailability
                https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-count-time-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-count-time-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_count_time = SubSection(sub_section=nxp_count_time.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXmonochromator(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXmonochromator',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                A  wavelength defining device.                  This is a base class for
        everything which         selects a wavelength or energy, be it a
        monochromator crystal, a velocity selector,         an undulator or whatever.
        The expected units are:                  * wavelength: angstrom         * energy:
        eV
        https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator
        .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_distribution(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXdata',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='distribution',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-distribution-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-distribution-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_distribution = SubSection(sub_section=nxp_distribution.m_def,repeats=True)


    class nxp_geometry(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXgeometry',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='geometry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-geometry-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-geometry-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_geometry = SubSection(sub_section=nxp_geometry.m_def,repeats=True)


    class nxp_CRYSTAL(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXcrystal.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXcrystal',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Use as many crystals as necessary to describe
                https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-crystal-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-crystal-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_CRYSTAL = SubSection(sub_section=nxp_CRYSTAL.m_def,repeats=True)


    class nxp_VELOCITY_SELECTOR(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXvelocity_selector.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXvelocity_selector',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-velocity-selector-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-velocity-selector-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_VELOCITY_SELECTOR = SubSection(sub_section=nxp_VELOCITY_SELECTOR.m_def,repeats=True)


    class nxp_GRATING(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXgrating.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXgrating',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        For diffraction grating based monochromators
                https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-grating-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-grating-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_GRATING = SubSection(sub_section=nxp_GRATING.m_def,repeats=True)


    class nxp_wavelength(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='wavelength',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_WAVELENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        wavelength selected
                https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-wavelength-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-wavelength-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_wavelength = SubSection(sub_section=nxp_wavelength.m_def,repeats=True)


    class nxp_wavelength_error(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='wavelength_error',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_WAVELENGTH',
        )
        nxp_deprecated= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='see https://github.com/nexusformat/definitions/issues/820',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        wavelength standard deviation
                https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-wavelength-error-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-wavelength-error-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_deprecated= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_wavelength_error = SubSection(sub_section=nxp_wavelength_error.m_def,repeats=True)


    class nxp_wavelength_errors(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='wavelength_errors',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_WAVELENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        wavelength standard deviation
                https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-wavelength-errors-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-wavelength-errors-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_wavelength_errors = SubSection(sub_section=nxp_wavelength_errors.m_def,repeats=True)


    class nxp_energy(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='energy',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ENERGY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        energy selected
                https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-energy-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-energy-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_energy = SubSection(sub_section=nxp_energy.m_def,repeats=True)


    class nxp_energy_error(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='energy_error',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ENERGY',
        )
        nxp_deprecated= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='see https://github.com/nexusformat/definitions/issues/820',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        energy standard deviation
                https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-energy-error-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-energy-error-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_deprecated= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_energy_error = SubSection(sub_section=nxp_energy_error.m_def,repeats=True)


    class nxp_energy_errors(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='energy_errors',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ENERGY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        energy standard deviation
                https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-energy-errors-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-energy-errors-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_energy_errors = SubSection(sub_section=nxp_energy_errors.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXxraylens(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXxraylens',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                An X-ray lens, typically at a synchrotron X-ray beam line.              Based on
        information provided by Gerd Wellenreuther (DESY).
        https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_cylinder_orientation(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='cylinder_orientation',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXnote',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Orientation of the cylinder axis.
                https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-cylinder-orientation-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-cylinder-orientation-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_cylinder_orientation = SubSection(sub_section=nxp_cylinder_orientation.m_def,repeats=True)


    class nxp_lens_geometry(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='lens_geometry',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CHAR',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Geometry of the lens
                https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-lens-geometry-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-lens-geometry-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: paraboloid,spherical,elliptical,hyperbolical''',
            default='paraboloid,spherical,elliptical,hyperbolical',
        )
    nxp_lens_geometry = SubSection(sub_section=nxp_lens_geometry.m_def,repeats=True)


    class nxp_symmetric(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='symmetric',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_BOOLEAN',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Is the device symmetric?
                https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-symmetric-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-symmetric-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_symmetric = SubSection(sub_section=nxp_symmetric.m_def,repeats=True)


    class nxp_cylindrical(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='cylindrical',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_BOOLEAN',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Is the device cylindrical?
                https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-cylindrical-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-cylindrical-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_cylindrical = SubSection(sub_section=nxp_cylindrical.m_def,repeats=True)


    class nxp_focus_type(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='focus_type',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CHAR',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The type of focus of the lens
                https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-focus-type-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-focus-type-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: line,point''',
            default='line,point',
        )
    nxp_focus_type = SubSection(sub_section=nxp_focus_type.m_def,repeats=True)


    class nxp_lens_thickness(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='lens_thickness',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Thickness of the lens
                https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-lens-thickness-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-lens-thickness-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_lens_thickness = SubSection(sub_section=nxp_lens_thickness.m_def,repeats=True)


    class nxp_lens_length(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='lens_length',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Length of the lens
                https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-lens-length-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-lens-length-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_lens_length = SubSection(sub_section=nxp_lens_length.m_def,repeats=True)


    class nxp_curvature(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='curvature',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Radius of the curvature as measured in the middle of the lens
                https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-curvature-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-curvature-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_curvature = SubSection(sub_section=nxp_curvature.m_def,repeats=True)


    class nxp_aperture(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='aperture',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Diameter of the lens.
                https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-aperture-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-aperture-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_aperture = SubSection(sub_section=nxp_aperture.m_def,repeats=True)


    class nxp_number_of_lenses(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='number_of_lenses',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Number of lenses that make up the compound lens.
                https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-number-of-lenses-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-number-of-lenses-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_number_of_lenses = SubSection(sub_section=nxp_number_of_lenses.m_def,repeats=True)


    class nxp_lens_material(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='lens_material',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CHAR',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Material used to make the lens.
                https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-lens-material-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-lens-material-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_lens_material = SubSection(sub_section=nxp_lens_material.m_def,repeats=True)


    class nxp_gas(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='gas',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CHAR',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Gas used to fill the lens
                https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-gas-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-gas-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_gas = SubSection(sub_section=nxp_gas.m_def,repeats=True)


    class nxp_gas_pressure(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='gas_pressure',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_PRESSURE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Gas pressure in the lens
                https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-gas-pressure-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-gas-pressure-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_gas_pressure = SubSection(sub_section=nxp_gas_pressure.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXprocess(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXprocess',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        Document an event of data processing, reconstruction, or analysis for this data.
        https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_NOTE(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXnote',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The note will contain information about how the data was processed
                or anything about the data provenance.              The contents of the
                note can be anything that the processing code              can understand,
                or simple text.                          The name will be numbered to
                allow for ordering of steps.
                https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-note-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-note-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_NOTE = SubSection(sub_section=nxp_NOTE.m_def,repeats=True)


    class nxp_program(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='program',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CHAR',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Name of the program used
                https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-program-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-program-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_program = SubSection(sub_section=nxp_program.m_def,repeats=True)


    class nxp_sequence_index(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_POSINT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='sequence_index',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_POSINT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Sequence index of processing,              for determining the order of
                multiple **NXprocess** steps.               Starts with 1.
                https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-sequence-index-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-sequence-index-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_sequence_index = SubSection(sub_section=nxp_sequence_index.m_def,repeats=True)


    class nxp_version(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='version',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CHAR',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Version of the program used
                https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-version-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-version-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_version = SubSection(sub_section=nxp_version.m_def,repeats=True)


    class nxp_date(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='date',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_DATE_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Date and time of processing.
                https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-date-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-date-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_date = SubSection(sub_section=nxp_date.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXsolid_geometry(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXsolid_geometry',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='contributed',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                the head node for constructively defined geometry
        https://manual.nexusformat.org/classes/contributed_definitions/NXsolid_geometry.html#nxsolid-geometry
        .
        ''',
        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsolid_geometry.html#nxsolid-geometry',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_QUADRIC(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXquadric.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXquadric',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Instances of :ref:`NXquadric` making up elements of the geometry.
                https://manual.nexusformat.org/classes/contributed_definitions/NXsolid_geometry.html#nxsolid-geometry-quadric-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsolid_geometry.html#nxsolid-geometry-quadric-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_QUADRIC = SubSection(sub_section=nxp_QUADRIC.m_def,repeats=True)


    class nxp_OFF_GEOMETRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXoff_geometry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXoff_geometry',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Instances of :ref:`NXoff_geometry` making up elements of the geometry.
                https://manual.nexusformat.org/classes/contributed_definitions/NXsolid_geometry.html#nxsolid-geometry-off-geometry-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsolid_geometry.html#nxsolid-geometry-off-geometry-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_OFF_GEOMETRY = SubSection(sub_section=nxp_OFF_GEOMETRY.m_def,repeats=True)


    class nxp_CSG(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXcsg.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXcsg',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='0',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The geometries defined, made up of instances of :ref:`NXquadric` and
                :ref:`NXoff_geometry`.
                https://manual.nexusformat.org/classes/contributed_definitions/NXsolid_geometry.html#nxsolid-geometry-csg-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsolid_geometry.html#nxsolid-geometry-csg-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_CSG = SubSection(sub_section=nxp_CSG.m_def,repeats=True)



class NXmoderator(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXmoderator',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        A neutron moderator
        https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_GEOMETRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXgeometry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        "Engineering" position of moderator
                https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-geometry-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-geometry-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_GEOMETRY = SubSection(sub_section=nxp_GEOMETRY.m_def,repeats=True)


    class nxp_temperature_log(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXlog',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='temperature_log',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        log file of moderator temperature
                https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-temperature-log-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-temperature-log-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_temperature_log = SubSection(sub_section=nxp_temperature_log.m_def,repeats=True)


    class nxp_pulse_shape(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXdata',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='pulse_shape',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        moderator pulse shape
                https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-pulse-shape-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-pulse-shape-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_pulse_shape = SubSection(sub_section=nxp_pulse_shape.m_def,repeats=True)


    class nxp_distance(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='distance',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Effective distance as seen by measuring radiation
                https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-distance-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-distance-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)


    class nxp_type(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='type',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-type-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-type-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: H20,D20,Liquid H2,Liquid CH4,Liquid D2,Solid D2,C,Solid
                CH4,Solid H2''',
            default='H20,D20,Liquid H2,Liquid CH4,Liquid D2,Solid D2,C,Solid CH4,Solid H2',
        )
    nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)


    class nxp_poison_depth(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='poison_depth',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-poison-depth-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-poison-depth-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_poison_depth = SubSection(sub_section=nxp_poison_depth.m_def,repeats=True)


    class nxp_coupled(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='coupled',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_BOOLEAN',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        whether the moderator is coupled
                https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-coupled-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-coupled-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_coupled = SubSection(sub_section=nxp_coupled.m_def,repeats=True)


    class nxp_coupling_material(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='coupling_material',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        The material used for coupling. Usually Cd.
                https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-coupling-material-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-coupling-material-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_coupling_material = SubSection(sub_section=nxp_coupling_material.m_def,repeats=True)


    class nxp_poison_material(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='poison_material',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-poison-material-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-poison-material-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: Gd,Cd''',
            default='Gd,Cd',
        )
    nxp_poison_material = SubSection(sub_section=nxp_poison_material.m_def,repeats=True)


    class nxp_temperature(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='temperature',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TEMPERATURE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        average/nominal moderator temperature
                https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-temperature-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-temperature-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_temperature = SubSection(sub_section=nxp_temperature.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXguide(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXguide',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                A neutron optical element to direct the path of the beam.
        :ref:`NXguide` is used by neutron instruments to describe         a guide consists
        of several mirrors building a shape through which          neutrons can be guided
        or directed. The simplest such form is box shaped         although elliptical
        guides are gaining in popularity.          The individual parts of a guide usually
        have common characteristics          but there are cases where they are different.
        For example,  a neutron guide might consist of 2 or 4 coated walls or         a
        supermirror bender with multiple, coated vanes.

        To describe polarizing supermirrors such as used in neutron reflection,         it
        may be necessary to revise this definition of :ref:`NXguide`         to include
        :ref:`NXpolarizer` and/or :ref:`NXmirror`.

        When even greater complexity exists in the definition of what         constitutes
        a *guide*,  it has been suggested that :ref:`NXguide`          be redefined as a
        :ref:`NXcollection` of :ref:`NXmirror` each          having their own
        :ref:`NXgeometry` describing their location(s).

        For the more general case when describing mirrors, consider using
        :ref:`NXmirror`.

        NOTE: The NeXus International Advisory Committee welcomes          comments for
        revision and improvement of          this definition of :ref:`NXguide`.

        https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_GEOMETRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXgeometry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        TODO:  Explain what this NXgeometry group means.  What is intended here?
                https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-geometry-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-geometry-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_GEOMETRY = SubSection(sub_section=nxp_GEOMETRY.m_def,repeats=True)


    class nxp_reflectivity(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXdata',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='reflectivity',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Reflectivity as function of reflecting surface and wavelength
                https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_signal(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='signal',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-signal-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-signal-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: data''',
                default='data',
            )
        nxp_signal = SubSection(sub_section=nxp_signal.m_def,repeats=True)
        class nxp_axes(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='axes',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-axes-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-axes-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: surface wavelength''',
                default='surface wavelength',
            )
        nxp_axes = SubSection(sub_section=nxp_axes.m_def,repeats=True)
        class nxp_surface_indices(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='surface_indices',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-surface-indices-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-surface-indices-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: 0''',
                default='0',
            )
        nxp_surface_indices = SubSection(sub_section=nxp_surface_indices.m_def,repeats=True)
        class nxp_wavelength_indices(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='wavelength_indices',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-wavelength-indices-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-wavelength-indices-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: 1''',
                default='1',
            )
        nxp_wavelength_indices = SubSection(sub_section=nxp_wavelength_indices.m_def,repeats=True)
        class nxp_data(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='data',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_NUMBER',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            reflectivity of each surface as a function of wavelength
                https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-data-field
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-data-field',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
        class nxp_surface(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='surface',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_NUMBER',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_ANY',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            List of surfaces.  Probably best to use index                      numbers
                but the specification is very loose.
                https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-surface-field
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-surface-field',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_surface = SubSection(sub_section=nxp_surface.m_def,repeats=True)
        class nxp_wavelength(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='wavelength',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_NUMBER',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_WAVELENGTH',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            wavelengths at which reflectivity was measured
                https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-wavelength-field
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-wavelength-field',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_wavelength = SubSection(sub_section=nxp_wavelength.m_def,repeats=True)
    nxp_reflectivity = SubSection(sub_section=nxp_reflectivity.m_def,repeats=True)


    class nxp_description(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='description',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        A description of this particular instance of ``NXguide``.
                https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-description-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-description-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)


    class nxp_incident_angle(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='incident_angle',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        TODO: documentation needed
                https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-incident-angle-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-incident-angle-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_incident_angle = SubSection(sub_section=nxp_incident_angle.m_def,repeats=True)


    class nxp_bend_angle_x(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='bend_angle_x',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        TODO: documentation needed
                https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-bend-angle-x-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-bend-angle-x-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_bend_angle_x = SubSection(sub_section=nxp_bend_angle_x.m_def,repeats=True)


    class nxp_bend_angle_y(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='bend_angle_y',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        TODO: documentation needed
                https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-bend-angle-y-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-bend-angle-y-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_bend_angle_y = SubSection(sub_section=nxp_bend_angle_y.m_def,repeats=True)


    class nxp_interior_atmosphere(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='interior_atmosphere',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-interior-atmosphere-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-interior-atmosphere-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: vacuum,helium,argon''',
            default='vacuum,helium,argon',
        )
    nxp_interior_atmosphere = SubSection(sub_section=nxp_interior_atmosphere.m_def,repeats=True)


    class nxp_external_material(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='external_material',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        external material outside substrate
                https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-external-material-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-external-material-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_external_material = SubSection(sub_section=nxp_external_material.m_def,repeats=True)


    class nxp_m_value(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='m_value',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The ``m`` value for a supermirror, which defines the supermirror
                regime in multiples of the critical angle of Nickel.
                https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-m-value-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-m-value-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_m_value = SubSection(sub_section=nxp_m_value.m_def,repeats=True)


    class nxp_substrate_material(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='substrate_material',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        TODO: documentation needed
                https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-substrate-material-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-substrate-material-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_substrate_material = SubSection(sub_section=nxp_substrate_material.m_def,repeats=True)


    class nxp_substrate_thickness(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='substrate_thickness',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        TODO: documentation needed
                https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-substrate-thickness-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-substrate-thickness-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_substrate_thickness = SubSection(sub_section=nxp_substrate_thickness.m_def,repeats=True)


    class nxp_coating_material(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='coating_material',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        TODO: documentation needed
                https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-coating-material-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-coating-material-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_coating_material = SubSection(sub_section=nxp_coating_material.m_def,repeats=True)


    class nxp_substrate_roughness(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='substrate_roughness',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        TODO: documentation needed
                https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-substrate-roughness-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-substrate-roughness-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_substrate_roughness = SubSection(sub_section=nxp_substrate_roughness.m_def,repeats=True)


    class nxp_coating_roughness(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='coating_roughness',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        TODO: documentation needed
                https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-coating-roughness-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-coating-roughness-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_coating_roughness = SubSection(sub_section=nxp_coating_roughness.m_def,repeats=True)


    class nxp_number_sections(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='number_sections',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_UNITLESS',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        number of substrate sections (also called ``nsurf`` as an
                index in the ``NXguide`` specification)
                https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-number-sections-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-number-sections-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_number_sections = SubSection(sub_section=nxp_number_sections.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXenvironment(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXenvironment',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        Parameters for controlling external conditions
        https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment
        .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_position(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='position',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXgeometry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        The position and orientation of the apparatus
                https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-position-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-position-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_position = SubSection(sub_section=nxp_position.m_def,repeats=True)


    class nxp_NOTE(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXnote',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Additional information, LabView logs, digital photographs, etc
                https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-note-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-note-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_NOTE = SubSection(sub_section=nxp_NOTE.m_def,repeats=True)


    class nxp_SENSOR(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXsensor.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXsensor',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-sensor-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-sensor-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_SENSOR = SubSection(sub_section=nxp_SENSOR.m_def,repeats=True)


    class nxp_name(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='name',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Apparatus identification code/model number; e.g. OC100 011
                https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-name-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-name-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)


    class nxp_short_name(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='short_name',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Alternative short name, perhaps for dashboard display like a present
                Seblock name
                https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-short-name-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-short-name-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_short_name = SubSection(sub_section=nxp_short_name.m_def,repeats=True)


    class nxp_type(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='type',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Type of apparatus. This could be the SE codes in scheduling database; e.g.
                OC/100
                https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-type-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-type-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)


    class nxp_description(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='description',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Description of the apparatus; e.g. 100mm bore orange cryostat with Roots
                pump
                https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-description-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-description-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)


    class nxp_program(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='program',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Program controlling the apparatus; e.g. LabView VI name
                https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-program-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-program-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_program = SubSection(sub_section=nxp_program.m_def,repeats=True)



class NXsource(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXsource',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        The neutron or x-ray storage ring/facility.
        https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_notes(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='notes',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXnote',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        any source/facility related messages/events that
                occurred during the experiment
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-notes-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-notes-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_notes = SubSection(sub_section=nxp_notes.m_def,repeats=True)


    class nxp_bunch_pattern(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='bunch_pattern',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXdata',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        For storage rings, description of the bunch pattern.
                This is useful to describe irregular bunch patterns.
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-bunch-pattern-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-bunch-pattern-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            name of the bunch pattern
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-bunch-pattern-title-field
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-bunch-pattern-title-field',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
    nxp_bunch_pattern = SubSection(sub_section=nxp_bunch_pattern.m_def,repeats=True)


    class nxp_pulse_shape(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='pulse_shape',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXdata',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        source pulse shape
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-pulse-shape-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-pulse-shape-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_pulse_shape = SubSection(sub_section=nxp_pulse_shape.m_def,repeats=True)


    class nxp_geometry(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='geometry',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXgeometry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        "Engineering" location of source
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-geometry-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-geometry-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_geometry = SubSection(sub_section=nxp_geometry.m_def,repeats=True)


    class nxp_distribution(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXdata',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='distribution',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        The wavelength or energy distribution of the source
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-distribution-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-distribution-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_distribution = SubSection(sub_section=nxp_distribution.m_def,repeats=True)


    class nxp_distance(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='distance',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Effective distance from sample                         Distance as seen by
                radiation from sample. This number should be negative
                to signify that it is upstream of the sample.
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-distance-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-distance-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)


    class nxp_name(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='name',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Name of source
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-name-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-name-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_short_name(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='short_name',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            short name for source, perhaps the acronym
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-name-short-name-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-name-short-name-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_short_name = SubSection(sub_section=nxp_short_name.m_def,repeats=True)
    nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)


    class nxp_type(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='type',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        type of radiation source (pick one from the enumerated list and spell
                exactly)
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-type-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-type-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: Spallation Neutron Source,Pulsed Reactor Neutron
                Source,Reactor Neutron Source,Synchrotron X-ray Source,Pulsed Muon
                Source,Rotating Anode X-ray,Fixed Tube X-ray,UV Laser,Free-Electron
                Laser,Optical Laser,Ion Source,UV Plasma Source''',
            default='Spallation Neutron Source,Pulsed Reactor Neutron Source,Reactor Neutron Source,Synchrotron X-ray Source,Pulsed Muon Source,Rotating Anode X-ray,Fixed Tube X-ray,UV Laser,Free-Electron Laser,Optical Laser,Ion Source,UV Plasma Source',
        )
    nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)


    class nxp_probe(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='probe',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        type of radiation probe (pick one from the enumerated list and spell
                exactly)
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-probe-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-probe-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: neutron,x-ray,muon,electron,ultraviolet,visible
                light,positron,proton''',
            default='neutron,x-ray,muon,electron,ultraviolet,visible light,positron,proton',
        )
    nxp_probe = SubSection(sub_section=nxp_probe.m_def,repeats=True)


    class nxp_power(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='power',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_POWER',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Source power
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-power-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-power-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_power = SubSection(sub_section=nxp_power.m_def,repeats=True)


    class nxp_emittance_x(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='emittance_x',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_EMITTANCE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Source emittance (nm-rad) in X (horizontal) direction.
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-emittance-x-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-emittance-x-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_emittance_x = SubSection(sub_section=nxp_emittance_x.m_def,repeats=True)


    class nxp_emittance_y(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='emittance_y',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_EMITTANCE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Source emittance (nm-rad) in Y (horizontal) direction.
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-emittance-y-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-emittance-y-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_emittance_y = SubSection(sub_section=nxp_emittance_y.m_def,repeats=True)


    class nxp_sigma_x(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='sigma_x',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        particle beam size in x
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-sigma-x-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-sigma-x-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_sigma_x = SubSection(sub_section=nxp_sigma_x.m_def,repeats=True)


    class nxp_sigma_y(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='sigma_y',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        particle beam size in y
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-sigma-y-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-sigma-y-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_sigma_y = SubSection(sub_section=nxp_sigma_y.m_def,repeats=True)


    class nxp_flux(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='flux',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLUX',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Source intensity/area (example: s-1 cm-2)
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-flux-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-flux-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_flux = SubSection(sub_section=nxp_flux.m_def,repeats=True)


    class nxp_energy(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='energy',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ENERGY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Source energy.                           For storage rings, this would be
                the particle beam energy.                         For X-ray tubes, this
                would be the excitation voltage.
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-energy-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-energy-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_energy = SubSection(sub_section=nxp_energy.m_def,repeats=True)


    class nxp_current(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='current',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CURRENT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Accelerator, X-ray tube, or storage ring current
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-current-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-current-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_current = SubSection(sub_section=nxp_current.m_def,repeats=True)


    class nxp_voltage(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='voltage',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_VOLTAGE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Accelerator voltage
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-voltage-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-voltage-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_voltage = SubSection(sub_section=nxp_voltage.m_def,repeats=True)


    class nxp_frequency(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='frequency',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FREQUENCY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Frequency of pulsed source
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-frequency-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-frequency-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_frequency = SubSection(sub_section=nxp_frequency.m_def,repeats=True)


    class nxp_period(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='period',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_PERIOD',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Period of pulsed source
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-period-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-period-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_period = SubSection(sub_section=nxp_period.m_def,repeats=True)


    class nxp_target_material(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='target_material',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Pulsed source target material
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-target-material-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-target-material-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: Ta,W,depleted_U,enriched_U,Hg,Pb,C''',
            default='Ta,W,depleted_U,enriched_U,Hg,Pb,C',
        )
    nxp_target_material = SubSection(sub_section=nxp_target_material.m_def,repeats=True)


    class nxp_number_of_bunches(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='number_of_bunches',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        For storage rings, the number of bunches in use.
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-number-of-bunches-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-number-of-bunches-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_number_of_bunches = SubSection(sub_section=nxp_number_of_bunches.m_def,repeats=True)


    class nxp_bunch_length(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='bunch_length',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        For storage rings, temporal length of the bunch
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-bunch-length-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-bunch-length-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_bunch_length = SubSection(sub_section=nxp_bunch_length.m_def,repeats=True)


    class nxp_bunch_distance(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='bunch_distance',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        For storage rings, time between bunches
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-bunch-distance-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-bunch-distance-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_bunch_distance = SubSection(sub_section=nxp_bunch_distance.m_def,repeats=True)


    class nxp_pulse_width(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='pulse_width',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        temporal width of source pulse
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-pulse-width-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-pulse-width-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_pulse_width = SubSection(sub_section=nxp_pulse_width.m_def,repeats=True)


    class nxp_mode(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='mode',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        source operating mode
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-mode-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-mode-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: Single Bunch,Multi Bunch''',
            default='Single Bunch,Multi Bunch',
        )
    nxp_mode = SubSection(sub_section=nxp_mode.m_def,repeats=True)


    class nxp_top_up(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='top_up',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_BOOLEAN',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Is the synchrotron operating in top_up mode?
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-top-up-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-top-up-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_top_up = SubSection(sub_section=nxp_top_up.m_def,repeats=True)


    class nxp_last_fill(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='last_fill',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_CURRENT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        For storage rings, the current at the end of the most recent injection.
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-last-fill-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-last-fill-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            date and time of the most recent injection.
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-last-fill-time-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-last-fill-time-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_time = SubSection(sub_section=nxp_time.m_def,repeats=True)
    nxp_last_fill = SubSection(sub_section=nxp_last_fill.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXmirror(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXmirror',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        A beamline mirror or supermirror.
        https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_GEOMETRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXgeometry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-geometry-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-geometry-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_GEOMETRY = SubSection(sub_section=nxp_GEOMETRY.m_def,repeats=True)


    class nxp_reflectivity(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXdata',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='reflectivity',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Reflectivity as function of wavelength
                https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-reflectivity-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-reflectivity-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_reflectivity = SubSection(sub_section=nxp_reflectivity.m_def,repeats=True)


    class nxp_shape(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXshape.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXshape',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='shape',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        A NXshape group describing the shape of the mirror
                https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-shape-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-shape-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_shape = SubSection(sub_section=nxp_shape.m_def,repeats=True)


    class nxp_figure_data(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='figure_data',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXdata',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Numerical description of the surface figure of the mirror.
                https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-figure-data-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-figure-data-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_figure_data = SubSection(sub_section=nxp_figure_data.m_def,repeats=True)


    class nxp_type(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='type',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-type-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-type-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: single,multi''',
            default='single,multi',
        )
    nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)


    class nxp_description(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='description',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        description of this mirror
                https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-description-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-description-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)


    class nxp_incident_angle(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='incident_angle',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-incident-angle-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-incident-angle-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_incident_angle = SubSection(sub_section=nxp_incident_angle.m_def,repeats=True)


    class nxp_bend_angle_x(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='bend_angle_x',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-bend-angle-x-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-bend-angle-x-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_bend_angle_x = SubSection(sub_section=nxp_bend_angle_x.m_def,repeats=True)


    class nxp_bend_angle_y(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='bend_angle_y',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-bend-angle-y-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-bend-angle-y-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_bend_angle_y = SubSection(sub_section=nxp_bend_angle_y.m_def,repeats=True)


    class nxp_interior_atmosphere(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='interior_atmosphere',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-interior-atmosphere-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-interior-atmosphere-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: vacuum,helium,argon''',
            default='vacuum,helium,argon',
        )
    nxp_interior_atmosphere = SubSection(sub_section=nxp_interior_atmosphere.m_def,repeats=True)


    class nxp_external_material(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='external_material',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        external material outside substrate
                https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-external-material-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-external-material-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_external_material = SubSection(sub_section=nxp_external_material.m_def,repeats=True)


    class nxp_m_value(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='m_value',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_UNITLESS',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The m value for a supermirror, which defines the supermirror
                regime in multiples of the critical angle of Nickel.
                https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-m-value-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-m-value-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_m_value = SubSection(sub_section=nxp_m_value.m_def,repeats=True)


    class nxp_substrate_material(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='substrate_material',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-substrate-material-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-substrate-material-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_substrate_material = SubSection(sub_section=nxp_substrate_material.m_def,repeats=True)


    class nxp_substrate_density(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='substrate_density',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_MASS_DENSITY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-substrate-density-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-substrate-density-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_substrate_density = SubSection(sub_section=nxp_substrate_density.m_def,repeats=True)


    class nxp_substrate_thickness(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='substrate_thickness',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-substrate-thickness-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-substrate-thickness-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_substrate_thickness = SubSection(sub_section=nxp_substrate_thickness.m_def,repeats=True)


    class nxp_coating_material(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='coating_material',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-coating-material-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-coating-material-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_coating_material = SubSection(sub_section=nxp_coating_material.m_def,repeats=True)


    class nxp_substrate_roughness(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='substrate_roughness',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-substrate-roughness-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-substrate-roughness-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_substrate_roughness = SubSection(sub_section=nxp_substrate_roughness.m_def,repeats=True)


    class nxp_coating_roughness(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='coating_roughness',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-coating-roughness-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-coating-roughness-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_coating_roughness = SubSection(sub_section=nxp_coating_roughness.m_def,repeats=True)


    class nxp_even_layer_material(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='even_layer_material',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-even-layer-material-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-even-layer-material-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_even_layer_material = SubSection(sub_section=nxp_even_layer_material.m_def,repeats=True)


    class nxp_even_layer_density(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='even_layer_density',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_MASS_DENSITY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-even-layer-density-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-even-layer-density-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_even_layer_density = SubSection(sub_section=nxp_even_layer_density.m_def,repeats=True)


    class nxp_odd_layer_material(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='odd_layer_material',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-odd-layer-material-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-odd-layer-material-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_odd_layer_material = SubSection(sub_section=nxp_odd_layer_material.m_def,repeats=True)


    class nxp_odd_layer_density(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='odd_layer_density',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_MASS_DENSITY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-odd-layer-density-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-odd-layer-density-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_odd_layer_density = SubSection(sub_section=nxp_odd_layer_density.m_def,repeats=True)


    class nxp_layer_thickness(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='layer_thickness',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        An array describing the thickness of each layer
                https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-layer-thickness-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-layer-thickness-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_layer_thickness = SubSection(sub_section=nxp_layer_thickness.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXcollimator(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXcollimator',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        A beamline collimator.
        https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator
        .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_GEOMETRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXgeometry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        position, shape and size
                https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-geometry-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-geometry-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_GEOMETRY = SubSection(sub_section=nxp_GEOMETRY.m_def,repeats=True)


    class nxp_frequency_log(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXlog',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='frequency_log',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Log of frequency
                https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-frequency-log-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-frequency-log-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_frequency_log = SubSection(sub_section=nxp_frequency_log.m_def,repeats=True)


    class nxp_type(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='type',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-type-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-type-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: Soller,radial,oscillating,honeycomb''',
            default='Soller,radial,oscillating,honeycomb',
        )
    nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)


    class nxp_soller_angle(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='soller_angle',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Angular divergence of Soller collimator
                https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-soller-angle-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-soller-angle-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_soller_angle = SubSection(sub_section=nxp_soller_angle.m_def,repeats=True)


    class nxp_divergence_x(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='divergence_x',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        divergence of collimator in local x direction
                https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-divergence-x-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-divergence-x-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_divergence_x = SubSection(sub_section=nxp_divergence_x.m_def,repeats=True)


    class nxp_divergence_y(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='divergence_y',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        divergence of collimator in local y direction
                https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-divergence-y-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-divergence-y-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_divergence_y = SubSection(sub_section=nxp_divergence_y.m_def,repeats=True)


    class nxp_frequency(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='frequency',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FREQUENCY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Frequency of oscillating collimator
                https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-frequency-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-frequency-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_frequency = SubSection(sub_section=nxp_frequency.m_def,repeats=True)


    class nxp_blade_thickness(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='blade_thickness',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        blade thickness
                https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-blade-thickness-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-blade-thickness-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_blade_thickness = SubSection(sub_section=nxp_blade_thickness.m_def,repeats=True)


    class nxp_blade_spacing(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='blade_spacing',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        blade spacing
                https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-blade-spacing-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-blade-spacing-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_blade_spacing = SubSection(sub_section=nxp_blade_spacing.m_def,repeats=True)


    class nxp_absorbing_material(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='absorbing_material',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        name of absorbing material
                https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-absorbing-material-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-absorbing-material-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_absorbing_material = SubSection(sub_section=nxp_absorbing_material.m_def,repeats=True)


    class nxp_transmitting_material(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='transmitting_material',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        name of transmitting material
                https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-transmitting-material-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-transmitting-material-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_transmitting_material = SubSection(sub_section=nxp_transmitting_material.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXfilter(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXfilter',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                For band pass beam filters.                                  If uncertain whether
        to use :ref:`NXfilter` (band-pass filter)                 or :ref:`NXattenuator`
        (reduces beam intensity), then use                  :ref:`NXattenuator`.
        https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_GEOMETRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXgeometry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Geometry of the filter
                https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-geometry-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-geometry-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_GEOMETRY = SubSection(sub_section=nxp_GEOMETRY.m_def,repeats=True)


    class nxp_transmission(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='transmission',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXdata',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Wavelength transmission profile of filter
                https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-transmission-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-transmission-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_transmission = SubSection(sub_section=nxp_transmission.m_def,repeats=True)


    class nxp_temperature_log(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='temperature_log',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXlog',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Linked temperature_log for the filter
                https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-temperature-log-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-temperature-log-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_temperature_log = SubSection(sub_section=nxp_temperature_log.m_def,repeats=True)


    class nxp_sensor_type(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXsensor.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='sensor_type',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXsensor',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Sensor(s)used to monitor the filter temperature
                https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-sensor-type-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-sensor-type-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_sensor_type = SubSection(sub_section=nxp_sensor_type.m_def,repeats=True)


    class nxp_description(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='description',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Composition of the filter.  Chemical formula can be specified separately.

                This field was changed (2010-11-17) from an enumeration to             a
                string since common usage showed a wider variety of use             than a
                simple list.  These are the items in the list at              the time of
                the change: Beryllium | Pyrolytic Graphite |             Graphite |
                Sapphire | Silicon | Supermirror.
                https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-description-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-description-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)


    class nxp_status(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='status',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        position with respect to in or out of the beam (choice of only "in" or
                "out")
                https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-status-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-status-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: in,out''',
            default='in,out',
        )
    nxp_status = SubSection(sub_section=nxp_status.m_def,repeats=True)


    class nxp_temperature(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='temperature',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TEMPERATURE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        average/nominal filter temperature
                https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-temperature-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-temperature-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_temperature = SubSection(sub_section=nxp_temperature.m_def,repeats=True)


    class nxp_thickness(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='thickness',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Thickness of the filter
                https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-thickness-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-thickness-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_thickness = SubSection(sub_section=nxp_thickness.m_def,repeats=True)


    class nxp_density(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='density',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_NUMBER',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_MASS_DENSITY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        mass density of the filter
                https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-density-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-density-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_density = SubSection(sub_section=nxp_density.m_def,repeats=True)


    class nxp_chemical_formula(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='chemical_formula',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The chemical formula specified using CIF conventions.
                Abbreviated version of CIF standard:
                * Only recognized element symbols may be used.                         *
                Each element symbol is followed by a 'count' number. A count of '1' may be
                omitted.                         * A space or parenthesis must separate
                each cluster of (element symbol + count).                         * Where
                a group of elements is enclosed in parentheses, the multiplier for the
                group must follow the closing parentheses. That is, all element and group
                multipliers are assumed to be printed as subscripted numbers.
                * Unless the elements are ordered in a manner that corresponds to their
                chemical                            structure, the order of the elements
                within any group or moiety depends on                            whether
                or not carbon is present.                         * If carbon is present,
                the order should be:                                                     *
                C, then H, then the other elements in alphabetical order of their symbol.
                * If carbon is not present, the elements are listed purely in alphabetic
                order of their symbol.
                * This is the *Hill* system used by Chemical Abstracts.
                https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-chemical-formula-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-chemical-formula-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_chemical_formula = SubSection(sub_section=nxp_chemical_formula.m_def,repeats=True)


    class nxp_unit_cell_a(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='unit_cell_a',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Unit cell lattice parameter: length of side a
                https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-unit-cell-a-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-unit-cell-a-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_unit_cell_a = SubSection(sub_section=nxp_unit_cell_a.m_def,repeats=True)


    class nxp_unit_cell_b(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='unit_cell_b',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Unit cell lattice parameter: length of side b
                https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-unit-cell-b-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-unit-cell-b-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_unit_cell_b = SubSection(sub_section=nxp_unit_cell_b.m_def,repeats=True)


    class nxp_unit_cell_c(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='unit_cell_c',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Unit cell lattice parameter: length of side c
                https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-unit-cell-c-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-unit-cell-c-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_unit_cell_c = SubSection(sub_section=nxp_unit_cell_c.m_def,repeats=True)


    class nxp_unit_cell_alpha(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='unit_cell_alpha',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Unit cell lattice parameter: angle alpha
                https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-unit-cell-alpha-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-unit-cell-alpha-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_unit_cell_alpha = SubSection(sub_section=nxp_unit_cell_alpha.m_def,repeats=True)


    class nxp_unit_cell_beta(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='unit_cell_beta',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Unit cell lattice parameter: angle beta
                https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-unit-cell-beta-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-unit-cell-beta-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_unit_cell_beta = SubSection(sub_section=nxp_unit_cell_beta.m_def,repeats=True)


    class nxp_unit_cell_gamma(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='unit_cell_gamma',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Unit cell lattice parameter: angle gamma
                https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-unit-cell-gamma-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-unit-cell-gamma-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_unit_cell_gamma = SubSection(sub_section=nxp_unit_cell_gamma.m_def,repeats=True)


    class nxp_unit_cell_volume(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='unit_cell_volume',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_VOLUME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Unit cell
                https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-unit-cell-volume-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-unit-cell-volume-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_unit_cell_volume = SubSection(sub_section=nxp_unit_cell_volume.m_def,repeats=True)


    class nxp_orientation_matrix(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='orientation_matrix',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Orientation matrix of single crystal filter using Busing-Levy convention:
                W. R. Busing and H. A. Levy (1967). Acta Cryst. 22, 457-464
                https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-orientation-matrix-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-orientation-matrix-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_orientation_matrix = SubSection(sub_section=nxp_orientation_matrix.m_def,repeats=True)


    class nxp_m_value(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='m_value',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_DIMENSIONLESS',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        m value of supermirror filter
                https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-m-value-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-m-value-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_m_value = SubSection(sub_section=nxp_m_value.m_def,repeats=True)


    class nxp_substrate_material(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='substrate_material',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        substrate material of supermirror filter
                https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-substrate-material-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-substrate-material-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_substrate_material = SubSection(sub_section=nxp_substrate_material.m_def,repeats=True)


    class nxp_substrate_thickness(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='substrate_thickness',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        substrate thickness of supermirror filter
                https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-substrate-thickness-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-substrate-thickness-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_substrate_thickness = SubSection(sub_section=nxp_substrate_thickness.m_def,repeats=True)


    class nxp_coating_material(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='coating_material',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        coating material of supermirror filter
                https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-coating-material-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-coating-material-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_coating_material = SubSection(sub_section=nxp_coating_material.m_def,repeats=True)


    class nxp_substrate_roughness(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='substrate_roughness',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        substrate roughness (RMS) of supermirror filter
                https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-substrate-roughness-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-substrate-roughness-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_substrate_roughness = SubSection(sub_section=nxp_substrate_roughness.m_def,repeats=True)


    class nxp_coating_roughness(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='coating_roughness',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        coating roughness (RMS) of supermirror filter
                https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-coating-roughness-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-coating-roughness-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_coating_roughness = SubSection(sub_section=nxp_coating_roughness.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXsample(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXsample',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                Any information on the sample.                                   This could
        include scanned variables that                 are associated with one of the data
        dimensions, e.g. the magnetic field, or                 logged data, e.g.
        monitored temperature vs elapsed time.
        https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_geometry(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='geometry',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXgeometry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        The position and orientation of the center of mass of the sample
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-geometry-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-geometry-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_geometry = SubSection(sub_section=nxp_geometry.m_def,repeats=True)


    class nxp_BEAM(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXbeam.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXbeam',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Details of beam incident on sample - used to calculate sample/beam
                interaction point
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-beam-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-beam-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_BEAM = SubSection(sub_section=nxp_BEAM.m_def,repeats=True)


    class nxp_SAMPLE_COMPONENT(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXsample_component.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXsample_component',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        One group per sample component                         This is the
                perferred way of recording per component information over the n_comp
                arrays
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-sample-component-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-sample-component-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_SAMPLE_COMPONENT = SubSection(sub_section=nxp_SAMPLE_COMPONENT.m_def,repeats=True)


    class nxp_transmission(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='transmission',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXdata',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        As a function of Wavelength
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-transmission-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-transmission-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_transmission = SubSection(sub_section=nxp_transmission.m_def,repeats=True)


    class nxp_temperature(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='temperature',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXlog',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        temperature.value is a link to e.g. temperature_env.sensor1.value
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-temperature-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-temperature-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_temperature = SubSection(sub_section=nxp_temperature.m_def,repeats=True)


    class nxp_temperature_log(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='temperature_log',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXlog',
        )
        nxp_deprecated= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='use ``temperature``, see: https://github.com/nexusformat/definitions/issues/816',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        temperature_log.value is a link to e.g.
                temperature_env.sensor1.value_log.value
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-temperature-log-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-temperature-log-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_deprecated= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_temperature_log = SubSection(sub_section=nxp_temperature_log.m_def,repeats=True)


    class nxp_temperature_env(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXenvironment.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='temperature_env',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXenvironment',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Additional sample temperature environment information
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-temperature-env-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-temperature-env-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_temperature_env = SubSection(sub_section=nxp_temperature_env.m_def,repeats=True)


    class nxp_magnetic_field(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='magnetic_field',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXlog',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        magnetic_field.value is a link to e.g. magnetic_field_env.sensor1.value
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-magnetic-field-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-magnetic-field-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_magnetic_field = SubSection(sub_section=nxp_magnetic_field.m_def,repeats=True)


    class nxp_magnetic_field_log(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='magnetic_field_log',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXlog',
        )
        nxp_deprecated= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='use ``magnetic_field``, see: https://github.com/nexusformat/definitions/issues/816',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        magnetic_field_log.value is a link to e.g.
                magnetic_field_env.sensor1.value_log.value
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-magnetic-field-log-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-magnetic-field-log-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_deprecated= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_magnetic_field_log = SubSection(sub_section=nxp_magnetic_field_log.m_def,repeats=True)


    class nxp_magnetic_field_env(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXenvironment.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='magnetic_field_env',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXenvironment',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Additional sample magnetic environment information
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-magnetic-field-env-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-magnetic-field-env-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_magnetic_field_env = SubSection(sub_section=nxp_magnetic_field_env.m_def,repeats=True)


    class nxp_external_ADC(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='external_ADC',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXlog',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        logged value (or logic state) read from user's setup
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-external-adc-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-external-adc-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_external_ADC = SubSection(sub_section=nxp_external_ADC.m_def,repeats=True)


    class nxp_POSITIONER(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXpositioner.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXpositioner',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Any positioner (motor, PZT, ...) used to locate the sample
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-positioner-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-positioner-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_POSITIONER = SubSection(sub_section=nxp_POSITIONER.m_def,repeats=True)


    class nxp_name(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='name',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Descriptive name of sample
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-name-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-name-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)


    class nxp_chemical_formula(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='chemical_formula',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The chemical formula specified using CIF conventions.
                Abbreviated version of CIF standard:
                * Only recognized element symbols may be used.                         *
                Each element symbol is followed by a 'count' number. A count of '1' may be
                omitted.                         * A space or parenthesis must separate
                each cluster of (element symbol + count).                         * Where
                a group of elements is enclosed in parentheses, the multiplier for the
                group must follow the closing parentheses. That is, all element and group
                multipliers are assumed to be printed as subscripted numbers.
                * Unless the elements are ordered in a manner that corresponds to their
                chemical                            structure, the order of the elements
                within any group or moiety depends on                            whether
                or not carbon is present.                         * If carbon is present,
                the order should be:                                                     -
                C, then H, then the other elements in alphabetical order of their symbol.
                - If carbon is not present, the elements are listed purely in alphabetic
                order of their symbol.
                * This is the *Hill* system used by Chemical Abstracts.
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-chemical-formula-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-chemical-formula-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_chemical_formula = SubSection(sub_section=nxp_chemical_formula.m_def,repeats=True)


    class nxp_temperature(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='temperature',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TEMPERATURE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Sample temperature. This could be a scanned variable
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-temperature-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-temperature-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_temperature = SubSection(sub_section=nxp_temperature.m_def,repeats=True)


    class nxp_electric_field(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='electric_field',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_VOLTAGE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Applied electric field
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-electric-field-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-electric-field-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_direction(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='direction',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-electric-field-direction-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-electric-field-direction-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: x,y,z''',
                default='x,y,z',
            )
        nxp_direction = SubSection(sub_section=nxp_direction.m_def,repeats=True)
    nxp_electric_field = SubSection(sub_section=nxp_electric_field.m_def,repeats=True)


    class nxp_magnetic_field(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='magnetic_field',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Applied magnetic field
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-magnetic-field-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-magnetic-field-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_direction(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='direction',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-magnetic-field-direction-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-magnetic-field-direction-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: x,y,z''',
                default='x,y,z',
            )
        nxp_direction = SubSection(sub_section=nxp_direction.m_def,repeats=True)
    nxp_magnetic_field = SubSection(sub_section=nxp_magnetic_field.m_def,repeats=True)


    class nxp_stress_field(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='stress_field',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Applied external stress field
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-stress-field-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-stress-field-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_direction(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='direction',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-stress-field-direction-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-stress-field-direction-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: x,y,z''',
                default='x,y,z',
            )
        nxp_direction = SubSection(sub_section=nxp_direction.m_def,repeats=True)
    nxp_stress_field = SubSection(sub_section=nxp_stress_field.m_def,repeats=True)


    class nxp_pressure(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='pressure',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_PRESSURE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Applied pressure
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-pressure-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-pressure-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_pressure = SubSection(sub_section=nxp_pressure.m_def,repeats=True)


    class nxp_changer_position(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='changer_position',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_UNITLESS',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Sample changer position
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-changer-position-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-changer-position-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_changer_position = SubSection(sub_section=nxp_changer_position.m_def,repeats=True)


    class nxp_unit_cell_abc(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='unit_cell_abc',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Crystallography unit cell parameters a, b, and c
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-unit-cell-abc-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-unit-cell-abc-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_unit_cell_abc = SubSection(sub_section=nxp_unit_cell_abc.m_def,repeats=True)


    class nxp_unit_cell_alphabetagamma(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='unit_cell_alphabetagamma',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Crystallography unit cell parameters alpha, beta, and gamma
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-unit-cell-alphabetagamma-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-unit-cell-alphabetagamma-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_unit_cell_alphabetagamma = SubSection(sub_section=nxp_unit_cell_alphabetagamma.m_def,repeats=True)


    class nxp_unit_cell(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='unit_cell',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Unit cell parameters (lengths and angles)
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-unit-cell-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-unit-cell-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_unit_cell = SubSection(sub_section=nxp_unit_cell.m_def,repeats=True)


    class nxp_unit_cell_volume(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='unit_cell_volume',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_VOLUME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Volume of the unit cell
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-unit-cell-volume-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-unit-cell-volume-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_unit_cell_volume = SubSection(sub_section=nxp_unit_cell_volume.m_def,repeats=True)


    class nxp_sample_orientation(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='sample_orientation',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        This will follow the Busing-Levy convention:                         W. R.
                Busing and H. A. Levy (1967). Acta Cryst. 22, 457-464
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-sample-orientation-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-sample-orientation-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_sample_orientation = SubSection(sub_section=nxp_sample_orientation.m_def,repeats=True)


    class nxp_orientation_matrix(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='orientation_matrix',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Orientation matrix of single crystal sample using Busing-Levy convention:
                W. R. Busing and H. A. Levy (1967). Acta Cryst. 22, 457-464
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-orientation-matrix-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-orientation-matrix-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_orientation_matrix = SubSection(sub_section=nxp_orientation_matrix.m_def,repeats=True)


    class nxp_ub_matrix(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='ub_matrix',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        UB matrix of single crystal sample using Busing-Levy convention:
                W. R. Busing and H. A. Levy (1967). Acta Cryst. 22, 457-464. This is
                the multiplication of the orientation_matrix, given above,
                with the :math:`B` matrix which                          can be derived
                from the lattice constants.
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-ub-matrix-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-ub-matrix-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_ub_matrix = SubSection(sub_section=nxp_ub_matrix.m_def,repeats=True)


    class nxp_mass(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='mass',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_MASS',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Mass of sample
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-mass-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-mass-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_mass = SubSection(sub_section=nxp_mass.m_def,repeats=True)


    class nxp_density(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='density',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_MASS_DENSITY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Density of sample
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-density-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-density-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_density = SubSection(sub_section=nxp_density.m_def,repeats=True)


    class nxp_relative_molecular_mass(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='relative_molecular_mass',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_MASS',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Relative Molecular Mass of sample
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-relative-molecular-mass-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-relative-molecular-mass-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_relative_molecular_mass = SubSection(sub_section=nxp_relative_molecular_mass.m_def,repeats=True)


    class nxp_type(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='type',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-type-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-type-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: sample,sample+can,can,sample+buffer,buffer,calibration
                sample,normalisation sample,simulated data,none,sample environment''',
            default='sample,sample+can,can,sample+buffer,buffer,calibration sample,normalisation sample,simulated data,none,sample environment',
        )
    nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)


    class nxp_situation(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='situation',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The atmosphere will be one of the components, which is where
                its details will be stored; the relevant components will be
                indicated by the entry in the sample_component member.
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-situation-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-situation-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: air,vacuum,inert atmosphere,oxidising atmosphere,reducing
                atmosphere,sealed can,other''',
            default='air,vacuum,inert atmosphere,oxidising atmosphere,reducing atmosphere,sealed can,other',
        )
    nxp_situation = SubSection(sub_section=nxp_situation.m_def,repeats=True)


    class nxp_description(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='description',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Description of the sample
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-description-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-description-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)


    class nxp_preparation_date(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='preparation_date',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_DATE_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Date of preparation of the sample
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-preparation-date-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-preparation-date-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_preparation_date = SubSection(sub_section=nxp_preparation_date.m_def,repeats=True)


    class nxp_component(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='component',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Details of the component of the sample and/or can
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-component-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-component-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_component = SubSection(sub_section=nxp_component.m_def,repeats=True)


    class nxp_sample_component(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='sample_component',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Type of component
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-sample-component-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-sample-component-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: sample,can,atmosphere,kit''',
            default='sample,can,atmosphere,kit',
        )
    nxp_sample_component = SubSection(sub_section=nxp_sample_component.m_def,repeats=True)


    class nxp_concentration(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='concentration',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_MASS_DENSITY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Concentration of each component
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-concentration-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-concentration-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_concentration = SubSection(sub_section=nxp_concentration.m_def,repeats=True)


    class nxp_volume_fraction(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='volume_fraction',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Volume fraction of each component
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-volume-fraction-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-volume-fraction-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_volume_fraction = SubSection(sub_section=nxp_volume_fraction.m_def,repeats=True)


    class nxp_scattering_length_density(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='scattering_length_density',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_SCATTERING_LENGTH_DENSITY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Scattering length density of each component
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-scattering-length-density-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-scattering-length-density-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_scattering_length_density = SubSection(sub_section=nxp_scattering_length_density.m_def,repeats=True)


    class nxp_unit_cell_class(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='unit_cell_class',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        In case it is all we know and we want to record/document it
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-unit-cell-class-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-unit-cell-class-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values:
                triclinic,monoclinic,orthorhombic,tetragonal,rhombohedral,hexagonal,cubic''',
            default='triclinic,monoclinic,orthorhombic,tetragonal,rhombohedral,hexagonal,cubic',
        )
    nxp_unit_cell_class = SubSection(sub_section=nxp_unit_cell_class.m_def,repeats=True)


    class nxp_space_group(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='space_group',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Crystallographic space group
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-space-group-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-space-group-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_space_group = SubSection(sub_section=nxp_space_group.m_def,repeats=True)


    class nxp_point_group(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='point_group',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Crystallographic point group, deprecated if space_group present
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-point-group-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-point-group-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_point_group = SubSection(sub_section=nxp_point_group.m_def,repeats=True)


    class nxp_path_length(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='path_length',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Path length through sample/can for simple case when
                it does not vary with scattering direction
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-path-length-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-path-length-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_path_length = SubSection(sub_section=nxp_path_length.m_def,repeats=True)


    class nxp_path_length_window(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='path_length_window',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Thickness of a beam entry/exit window on the can (mm)
                - assumed same for entry and exit
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-path-length-window-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-path-length-window-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_path_length_window = SubSection(sub_section=nxp_path_length_window.m_def,repeats=True)


    class nxp_thickness(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='thickness',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        sample thickness
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-thickness-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-thickness-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_thickness = SubSection(sub_section=nxp_thickness.m_def,repeats=True)


    class nxp_external_DAC(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='external_DAC',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANY',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        value sent to user's sample setup
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-external-dac-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-external-dac-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_external_DAC = SubSection(sub_section=nxp_external_DAC.m_def,repeats=True)


    class nxp_short_title(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='short_title',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        20 character fixed length sample description for legends
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-short-title-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-short-title-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_short_title = SubSection(sub_section=nxp_short_title.m_def,repeats=True)


    class nxp_rotation_angle(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='rotation_angle',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_ANGLE',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Optional rotation angle for the case when the powder diagram has
                been obtained through an omega-2theta scan like from a traditional
                single detector powder diffractometer
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-rotation-angle-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-rotation-angle-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_rotation_angle = SubSection(sub_section=nxp_rotation_angle.m_def,repeats=True)


    class nxp_x_translation(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='x_translation',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Translation of the sample along the X-direction of the laboratory
                coordinate system
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-x-translation-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-x-translation-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_x_translation = SubSection(sub_section=nxp_x_translation.m_def,repeats=True)


    class nxp_distance(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='distance',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Translation of the sample along the Z-direction of the laboratory
                coordinate system
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-distance-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-distance-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXinstrument(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXinstrument',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                Collection of the components of the instrument or beamline.
        Template of instrument descriptions comprising various beamline components.
        Each component will also be a NeXus group defined by its distance from the
        sample. Negative distances represent beamline components that are before the
        sample while positive distances represent components that are after the sample.
        This device allows the unique identification of beamline components in a way
        that is valid for both reactor and pulsed instrumentation.
        https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument
        .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_APERTURE(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXaperture.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXaperture',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-aperture-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-aperture-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_APERTURE = SubSection(sub_section=nxp_APERTURE.m_def,repeats=True)


    class nxp_ATTENUATOR(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXattenuator.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXattenuator',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-attenuator-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-attenuator-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_ATTENUATOR = SubSection(sub_section=nxp_ATTENUATOR.m_def,repeats=True)


    class nxp_BEAM(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXbeam.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXbeam',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-beam-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-beam-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_BEAM = SubSection(sub_section=nxp_BEAM.m_def,repeats=True)


    class nxp_BEAM_STOP(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXbeam_stop.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXbeam_stop',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-beam-stop-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-beam-stop-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_BEAM_STOP = SubSection(sub_section=nxp_BEAM_STOP.m_def,repeats=True)


    class nxp_BENDING_MAGNET(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXbending_magnet.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXbending_magnet',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-bending-magnet-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-bending-magnet-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_BENDING_MAGNET = SubSection(sub_section=nxp_BENDING_MAGNET.m_def,repeats=True)


    class nxp_COLLIMATOR(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXcollimator.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXcollimator',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-collimator-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-collimator-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_COLLIMATOR = SubSection(sub_section=nxp_COLLIMATOR.m_def,repeats=True)


    class nxp_COLLECTION(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXcollection.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXcollection',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-collection-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-collection-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_COLLECTION = SubSection(sub_section=nxp_COLLECTION.m_def,repeats=True)


    class nxp_CAPILLARY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXcapillary.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXcapillary',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-capillary-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-capillary-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_CAPILLARY = SubSection(sub_section=nxp_CAPILLARY.m_def,repeats=True)


    class nxp_CRYSTAL(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXcrystal.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXcrystal',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-crystal-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-crystal-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_CRYSTAL = SubSection(sub_section=nxp_CRYSTAL.m_def,repeats=True)


    class nxp_DETECTOR(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXdetector',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-detector-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-detector-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_DETECTOR = SubSection(sub_section=nxp_DETECTOR.m_def,repeats=True)


    class nxp_DETECTOR_GROUP(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXdetector_group.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXdetector_group',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-detector-group-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-detector-group-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_DETECTOR_GROUP = SubSection(sub_section=nxp_DETECTOR_GROUP.m_def,repeats=True)


    class nxp_DISK_CHOPPER(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXdisk_chopper.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXdisk_chopper',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-disk-chopper-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-disk-chopper-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_DISK_CHOPPER = SubSection(sub_section=nxp_DISK_CHOPPER.m_def,repeats=True)


    class nxp_EVENT_DATA(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXevent_data.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXevent_data',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-event-data-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-event-data-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_EVENT_DATA = SubSection(sub_section=nxp_EVENT_DATA.m_def,repeats=True)


    class nxp_FERMI_CHOPPER(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXfermi_chopper.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXfermi_chopper',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-fermi-chopper-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-fermi-chopper-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_FERMI_CHOPPER = SubSection(sub_section=nxp_FERMI_CHOPPER.m_def,repeats=True)


    class nxp_FILTER(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXfilter.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXfilter',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-filter-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-filter-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_FILTER = SubSection(sub_section=nxp_FILTER.m_def,repeats=True)


    class nxp_FLIPPER(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXflipper.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXflipper',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-flipper-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-flipper-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_FLIPPER = SubSection(sub_section=nxp_FLIPPER.m_def,repeats=True)


    class nxp_GUIDE(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXguide.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXguide',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-guide-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-guide-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_GUIDE = SubSection(sub_section=nxp_GUIDE.m_def,repeats=True)


    class nxp_INSERTION_DEVICE(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXinsertion_device.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXinsertion_device',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-insertion-device-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-insertion-device-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_INSERTION_DEVICE = SubSection(sub_section=nxp_INSERTION_DEVICE.m_def,repeats=True)


    class nxp_MIRROR(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXmirror.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXmirror',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-mirror-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-mirror-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_MIRROR = SubSection(sub_section=nxp_MIRROR.m_def,repeats=True)


    class nxp_MODERATOR(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXmoderator.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXmoderator',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-moderator-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-moderator-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_MODERATOR = SubSection(sub_section=nxp_MODERATOR.m_def,repeats=True)


    class nxp_MONOCHROMATOR(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXmonochromator.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXmonochromator',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-monochromator-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-monochromator-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_MONOCHROMATOR = SubSection(sub_section=nxp_MONOCHROMATOR.m_def,repeats=True)


    class nxp_POLARIZER(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXpolarizer.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXpolarizer',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-polarizer-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-polarizer-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_POLARIZER = SubSection(sub_section=nxp_POLARIZER.m_def,repeats=True)


    class nxp_POSITIONER(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXpositioner.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXpositioner',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-positioner-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-positioner-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_POSITIONER = SubSection(sub_section=nxp_POSITIONER.m_def,repeats=True)


    class nxp_SOURCE(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXsource',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-source-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-source-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_SOURCE = SubSection(sub_section=nxp_SOURCE.m_def,repeats=True)


    class nxp_DIFFRACTOMETER(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXtransformations.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXtransformations',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='DIFFRACTOMETER',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-diffractometer-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-diffractometer-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_DIFFRACTOMETER = SubSection(sub_section=nxp_DIFFRACTOMETER.m_def,repeats=True)


    class nxp_VELOCITY_SELECTOR(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXvelocity_selector.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXvelocity_selector',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-velocity-selector-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-velocity-selector-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_VELOCITY_SELECTOR = SubSection(sub_section=nxp_VELOCITY_SELECTOR.m_def,repeats=True)


    class nxp_XRAYLENS(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXxraylens.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXxraylens',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-xraylens-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-xraylens-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_XRAYLENS = SubSection(sub_section=nxp_XRAYLENS.m_def,repeats=True)


    class nxp_name(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='name',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Name of instrument
                https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-name-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-name-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_short_name(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='short_name',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            short name for instrument, perhaps the acronym
                https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-name-short-name-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-name-short-name-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_short_name = SubSection(sub_section=nxp_short_name.m_def,repeats=True)
    nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



class NXsubentry(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXsubentry',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                Group of multiple application definitions for "multi-modal" (e.g. SAXS/WAXS)
        measurements.                                  ``NXsubentry`` is a base class
        virtually identical to :ref:`NXentry`                 and is used as the (overlay)
        location for application definitions.                 Use a separate
        ``NXsubentry`` for each application definition.
        To use ``NXsubentry`` with a hypothetical application definition
        called ``NXmyappdef``:

        * Create a group with attribute ``NX_class="NXsubentry"``                 * Within
        that group, create a field called ``definition="NXmyappdef"``.                 *
        There are two optional attributes of definition: ``version`` and ``URL``

        The intended use is to define application definitions for a
        multi-modal (a.k.a. multi-technique) :ref:`NXentry`.                  Previously,
        an application definition                  replaced :ref:`NXentry` with its own
        definition.                  With the increasing popularity of instruments
        combining                  multiple techniques for data collection (such as
        SAXS/WAXS instruments),                  it was recognized the application
        definitions must be entered in the NeXus                 data file tree as
        children of :ref:`NXentry`.
        https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_experiment_documentation(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXnote',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='experiment_documentation',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Description of the full experiment (document in pdf, latex, ...)
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-experiment-documentation-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-experiment-documentation-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_experiment_documentation = SubSection(sub_section=nxp_experiment_documentation.m_def,repeats=True)


    class nxp_notes(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='notes',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXnote',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Notes describing entry
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-notes-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-notes-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_notes = SubSection(sub_section=nxp_notes.m_def,repeats=True)


    class nxp_thumbnail(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='thumbnail',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXnote',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        A small image that is representative of the entry. An example of this is a
                640x480                         jpeg image automatically produced by a low
                resolution plot of the NXdata.
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-thumbnail-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-thumbnail-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_mime_type(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='mime_type',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            The value should be an ``image/*``
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-thumbnail-mime-type-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-thumbnail-mime-type-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: image/*''',
                default='image/*',
            )
        nxp_mime_type = SubSection(sub_section=nxp_mime_type.m_def,repeats=True)
    nxp_thumbnail = SubSection(sub_section=nxp_thumbnail.m_def,repeats=True)


    class nxp_USER(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXuser.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXuser',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-user-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-user-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_USER = SubSection(sub_section=nxp_USER.m_def,repeats=True)


    class nxp_SAMPLE(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXsample',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-sample-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-sample-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_SAMPLE = SubSection(sub_section=nxp_SAMPLE.m_def,repeats=True)


    class nxp_INSTRUMENT(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXinstrument',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-instrument-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-instrument-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_INSTRUMENT = SubSection(sub_section=nxp_INSTRUMENT.m_def,repeats=True)


    class nxp_COLLECTION(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXcollection.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXcollection',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-collection-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-collection-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_COLLECTION = SubSection(sub_section=nxp_COLLECTION.m_def,repeats=True)


    class nxp_MONITOR(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXmonitor',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-monitor-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-monitor-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_MONITOR = SubSection(sub_section=nxp_MONITOR.m_def,repeats=True)


    class nxp_DATA(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXdata',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-data-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-data-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_DATA = SubSection(sub_section=nxp_DATA.m_def,repeats=True)


    class nxp_PARAMETERS(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXparameters.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXparameters',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-parameters-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-parameters-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_PARAMETERS = SubSection(sub_section=nxp_PARAMETERS.m_def,repeats=True)


    class nxp_PROCESS(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXprocess.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXprocess',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-process-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-process-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_PROCESS = SubSection(sub_section=nxp_PROCESS.m_def,repeats=True)


    class nxp_title(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='title',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Extended title for entry
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-title-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-title-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)


    class nxp_experiment_identifier(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='experiment_identifier',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Unique identifier for the experiment, defined by                     the
                facility, possibly linked to the proposals
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-experiment-identifier-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-experiment-identifier-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_experiment_identifier = SubSection(sub_section=nxp_experiment_identifier.m_def,repeats=True)


    class nxp_experiment_description(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='experiment_description',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Brief summary of the experiment, including key objectives.
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-experiment-description-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-experiment-description-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_experiment_description = SubSection(sub_section=nxp_experiment_description.m_def,repeats=True)


    class nxp_collection_identifier(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='collection_identifier',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        User or Data Acquisition defined group of NeXus files or :ref:`NXentry`
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-collection-identifier-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-collection-identifier-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_collection_identifier = SubSection(sub_section=nxp_collection_identifier.m_def,repeats=True)


    class nxp_collection_description(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='collection_description',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Brief summary of the collection, including grouping criteria.
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-collection-description-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-collection-description-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_collection_description = SubSection(sub_section=nxp_collection_description.m_def,repeats=True)


    class nxp_entry_identifier(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='entry_identifier',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        unique identifier for the measurement, defined by the facility.
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-entry-identifier-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-entry-identifier-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_entry_identifier = SubSection(sub_section=nxp_entry_identifier.m_def,repeats=True)


    class nxp_definition(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='definition',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Official NeXus NXDL schema to which this subentry conforms
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-definition-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-definition-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_version(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='version',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            NXDL version number
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-definition-version-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-definition-version-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_version = SubSection(sub_section=nxp_version.m_def,repeats=True)
        class nxp_URL(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='URL',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            URL of NXDL file
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-definition-url-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-definition-url-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_URL = SubSection(sub_section=nxp_URL.m_def,repeats=True)
    nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)


    class nxp_definition_local(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='definition_local',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Local NXDL schema extended from the subentry
                specified in the ``definition`` field.                          This
                contains any locally-defined,                         additional fields in
                the subentry.
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-definition-local-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-definition-local-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_version(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='version',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            NXDL version number
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-definition-local-version-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-definition-local-version-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_version = SubSection(sub_section=nxp_version.m_def,repeats=True)
        class nxp_URL(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='URL',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            URL of NXDL file
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-definition-local-url-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-definition-local-url-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_URL = SubSection(sub_section=nxp_URL.m_def,repeats=True)
    nxp_definition_local = SubSection(sub_section=nxp_definition_local.m_def,repeats=True)


    class nxp_start_time(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='start_time',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_DATE_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Starting time of measurement
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-start-time-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-start-time-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_start_time = SubSection(sub_section=nxp_start_time.m_def,repeats=True)


    class nxp_end_time(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='end_time',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_DATE_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Ending time of measurement
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-end-time-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-end-time-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_end_time = SubSection(sub_section=nxp_end_time.m_def,repeats=True)


    class nxp_duration(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='duration',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Duration of measurement
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-duration-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-duration-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_duration = SubSection(sub_section=nxp_duration.m_def,repeats=True)


    class nxp_collection_time(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='collection_time',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Time transpired actually collecting data i.e. taking out time when
                collection was                         suspended due to e.g. temperature
                out of range
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-collection-time-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-collection-time-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_collection_time = SubSection(sub_section=nxp_collection_time.m_def,repeats=True)


    class nxp_run_cycle(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='run_cycle',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Such as "2007-3". Some user facilities organize their beam time into run
                cycles.
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-run-cycle-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-run-cycle-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_run_cycle = SubSection(sub_section=nxp_run_cycle.m_def,repeats=True)


    class nxp_program_name(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='program_name',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Name of program used to generate this file
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-program-name-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-program-name-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_version(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='version',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Program version number
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-program-name-version-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-program-name-version-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_version = SubSection(sub_section=nxp_version.m_def,repeats=True)
        class nxp_configuration(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='configuration',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            configuration of the program
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-program-name-configuration-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-program-name-configuration-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_configuration = SubSection(sub_section=nxp_configuration.m_def,repeats=True)
    nxp_program_name = SubSection(sub_section=nxp_program_name.m_def,repeats=True)


    class nxp_revision(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='revision',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Revision id of the file due to re-calibration, reprocessing, new analysis,
                new                         instrument definition format, ...
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-revision-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-revision-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_comment(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='comment',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-revision-comment-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-revision-comment-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_comment = SubSection(sub_section=nxp_comment.m_def,repeats=True)
    nxp_revision = SubSection(sub_section=nxp_revision.m_def,repeats=True)


    class nxp_pre_sample_flightpath(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='pre_sample_flightpath',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        This is the flightpath before the sample position. This can be determined
                by a chopper,                         by the moderator or the source
                itself. In other words: it the distance to the component
                which gives the T0 signal to the detector electronics. If another
                component in the                         NXinstrument hierarchy provides
                this information, this should be a link.
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-pre-sample-flightpath-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-pre-sample-flightpath-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_pre_sample_flightpath = SubSection(sub_section=nxp_pre_sample_flightpath.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting
                Declares which :ref:`NXdata` group contains the data
                to be shown by default.                         It is needed to resolve
                ambiguity when more than                          one :ref:`NXdata` group
                exists.                          The value is the name of the default
                :ref:`NXdata` group.                                                  It
                is recommended (as of NIAC2014) to use this attribute
                to help define the path to the default dataset to be plotted.
                See https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)


    class nxp_IDF_Version(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='IDF_Version',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        ISIS Muon IDF_Version
                https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-idf-version-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-idf-version-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_IDF_Version = SubSection(sub_section=nxp_IDF_Version.m_def,repeats=True)



class NXentry(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXentry',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                (**required**) :ref:`NXentry` describes the measurement.
        The top-level NeXus group which contains all the data and associated
        information that comprise a single measurement.                  It is mandatory
        that there is at least one                 group of this type in the NeXus file.
        https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_DATA(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXdata',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The data group                                          .. note:: Before
                the NIAC2016 meeting [#]_, at least one
                :ref:`NXdata` group was required in each :ref:`NXentry` group.
                At the NIAC2016 meeting, it was decided to make :ref:`NXdata`
                an optional group in :ref:`NXentry` groups for data files that
                do not use an application definition.                            It is
                recommended strongly that all NeXus data files provide
                a NXdata group.                              It is permissable to omit the
                NXdata group only when                             defining the default
                plot is not practical or possible                            from the
                available data.                                                        For
                example, neutron event data may not have anything that
                makes a useful plot without extensive processing.
                Certain application definitions override this decision and
                require an :ref:`NXdata` group                            in the
                :ref:`NXentry` group.  The ``minOccurs=0`` attribute
                in the application definition will indicate the
                :ref:`NXdata` group                            is optional, otherwise, it
                is required.                                     .. [#] NIAC2016:
                https://www.nexusformat.org/NIAC2016.html,
                https://github.com/nexusformat/NIAC/issues/16

                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-data-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-data-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_DATA = SubSection(sub_section=nxp_DATA.m_def,repeats=True)


    class nxp_experiment_documentation(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXnote',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='experiment_documentation',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Description of the full experiment (document in pdf, latex, ...)
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-experiment-documentation-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-experiment-documentation-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_experiment_documentation = SubSection(sub_section=nxp_experiment_documentation.m_def,repeats=True)


    class nxp_notes(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='notes',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXnote',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Notes describing entry
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-notes-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-notes-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_notes = SubSection(sub_section=nxp_notes.m_def,repeats=True)


    class nxp_thumbnail(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='thumbnail',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXnote',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        A small image that is representative of the entry. An example of this is a
                640x480                         jpeg image automatically produced by a low
                resolution plot of the NXdata.
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-thumbnail-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-thumbnail-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_type(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='type',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            The mime type should be an ``image/*``
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-thumbnail-type-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-thumbnail-type-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: image/*''',
                default='image/*',
            )
        nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)
    nxp_thumbnail = SubSection(sub_section=nxp_thumbnail.m_def,repeats=True)


    class nxp_USER(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXuser.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXuser',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-user-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-user-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_USER = SubSection(sub_section=nxp_USER.m_def,repeats=True)


    class nxp_SAMPLE(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXsample',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-sample-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-sample-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_SAMPLE = SubSection(sub_section=nxp_SAMPLE.m_def,repeats=True)


    class nxp_INSTRUMENT(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXinstrument',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-instrument-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-instrument-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_INSTRUMENT = SubSection(sub_section=nxp_INSTRUMENT.m_def,repeats=True)


    class nxp_COLLECTION(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXcollection.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXcollection',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-collection-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-collection-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_COLLECTION = SubSection(sub_section=nxp_COLLECTION.m_def,repeats=True)


    class nxp_MONITOR(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXmonitor',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-monitor-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-monitor-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_MONITOR = SubSection(sub_section=nxp_MONITOR.m_def,repeats=True)


    class nxp_PARAMETERS(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXparameters.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXparameters',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-parameters-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-parameters-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_PARAMETERS = SubSection(sub_section=nxp_PARAMETERS.m_def,repeats=True)


    class nxp_PROCESS(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXprocess.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXprocess',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-process-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-process-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_PROCESS = SubSection(sub_section=nxp_PROCESS.m_def,repeats=True)


    class nxp_SUBENTRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXsubentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXsubentry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-subentry-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-subentry-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_SUBENTRY = SubSection(sub_section=nxp_SUBENTRY.m_def,repeats=True)


    class nxp_title(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='title',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Extended title for entry
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-title-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-title-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)


    class nxp_experiment_identifier(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='experiment_identifier',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Unique identifier for the experiment,                          defined by
                the facility,                          possibly linked to the proposals
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-experiment-identifier-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-experiment-identifier-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_experiment_identifier = SubSection(sub_section=nxp_experiment_identifier.m_def,repeats=True)


    class nxp_experiment_description(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='experiment_description',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Brief summary of the experiment, including key objectives.
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-experiment-description-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-experiment-description-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_experiment_description = SubSection(sub_section=nxp_experiment_description.m_def,repeats=True)


    class nxp_collection_identifier(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='collection_identifier',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        User or Data Acquisition defined group of NeXus files or NXentry
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-collection-identifier-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-collection-identifier-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_collection_identifier = SubSection(sub_section=nxp_collection_identifier.m_def,repeats=True)


    class nxp_collection_description(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='collection_description',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Brief summary of the collection, including grouping criteria.
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-collection-description-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-collection-description-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_collection_description = SubSection(sub_section=nxp_collection_description.m_def,repeats=True)


    class nxp_entry_identifier(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='entry_identifier',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        unique identifier for the measurement, defined by the facility.
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-entry-identifier-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-entry-identifier-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_entry_identifier = SubSection(sub_section=nxp_entry_identifier.m_def,repeats=True)


    class nxp_entry_identifier_uuid(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='entry_identifier_uuid',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        UUID identifier for the measurement.
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-entry-identifier-uuid-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-entry-identifier-uuid-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_version(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='version',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Version of UUID used
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-entry-identifier-uuid-version-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-entry-identifier-uuid-version-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_version = SubSection(sub_section=nxp_version.m_def,repeats=True)
    nxp_entry_identifier_uuid = SubSection(sub_section=nxp_entry_identifier_uuid.m_def,repeats=True)


    class nxp_features(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='features',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Reserved for future use by NIAC.

                See https://github.com/nexusformat/definitions/issues/382
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-features-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-features-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_features = SubSection(sub_section=nxp_features.m_def,repeats=True)


    class nxp_definition(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='definition',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        (alternate use: see same field in :ref:`NXsubentry` for preferred)
                Official NeXus NXDL schema to which this entry conforms.
                This field is provided so that :ref:`NXentry` can be the overlay position
                in a NeXus data file for an application definition and its
                set of groups, fields, and attributes.
                *It is advised* to use :ref:`NXsubentry`, instead, as the overlay
                position.
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-definition-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-definition-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_version(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='version',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            NXDL version number
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-definition-version-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-definition-version-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_version = SubSection(sub_section=nxp_version.m_def,repeats=True)
        class nxp_URL(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='URL',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            URL of NXDL file
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-definition-url-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-definition-url-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_URL = SubSection(sub_section=nxp_URL.m_def,repeats=True)
    nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)


    class nxp_definition_local(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='definition_local',
        )
        nxp_deprecated= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='see same field in :ref:`NXsubentry` for preferred use',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Local NXDL schema extended from the entry
                specified in the ``definition`` field.                          This
                contains any locally-defined,                         additional fields in
                the entry.
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-definition-local-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-definition-local-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_deprecated= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_version(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='version',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            NXDL version number
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-definition-local-version-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-definition-local-version-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_version = SubSection(sub_section=nxp_version.m_def,repeats=True)
        class nxp_URL(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='URL',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            URL of NXDL file
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-definition-local-url-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-definition-local-url-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_URL = SubSection(sub_section=nxp_URL.m_def,repeats=True)
    nxp_definition_local = SubSection(sub_section=nxp_definition_local.m_def,repeats=True)


    class nxp_start_time(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='start_time',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_DATE_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Starting time of measurement
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-start-time-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-start-time-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_start_time = SubSection(sub_section=nxp_start_time.m_def,repeats=True)


    class nxp_end_time(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='end_time',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_DATE_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Ending time of measurement
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-end-time-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-end-time-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_end_time = SubSection(sub_section=nxp_end_time.m_def,repeats=True)


    class nxp_duration(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='duration',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Duration of measurement
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-duration-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-duration-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_duration = SubSection(sub_section=nxp_duration.m_def,repeats=True)


    class nxp_collection_time(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='collection_time',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Time transpired actually collecting data i.e. taking out time when
                collection was                         suspended due to e.g. temperature
                out of range
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-collection-time-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-collection-time-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_collection_time = SubSection(sub_section=nxp_collection_time.m_def,repeats=True)


    class nxp_run_cycle(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='run_cycle',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Such as "2007-3". Some user facilities organize their beam time into run
                cycles.
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-run-cycle-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-run-cycle-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_run_cycle = SubSection(sub_section=nxp_run_cycle.m_def,repeats=True)


    class nxp_program_name(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='program_name',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Name of program used to generate this file
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-program-name-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-program-name-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_version(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='version',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Program version number
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-program-name-version-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-program-name-version-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_version = SubSection(sub_section=nxp_version.m_def,repeats=True)
        class nxp_configuration(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='configuration',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            configuration of the program
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-program-name-configuration-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-program-name-configuration-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_configuration = SubSection(sub_section=nxp_configuration.m_def,repeats=True)
    nxp_program_name = SubSection(sub_section=nxp_program_name.m_def,repeats=True)


    class nxp_revision(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='revision',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Revision id of the file due to re-calibration, reprocessing, new analysis,
                new                         instrument definition format, ...
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-revision-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-revision-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_comment(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='comment',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-revision-comment-attribute
                .''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-revision-comment-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_comment = SubSection(sub_section=nxp_comment.m_def,repeats=True)
    nxp_revision = SubSection(sub_section=nxp_revision.m_def,repeats=True)


    class nxp_pre_sample_flightpath(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='pre_sample_flightpath',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_FLOAT',
        )
        nxp_units= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_LENGTH',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        This is the flightpath before the sample position. This can be determined
                by a chopper,                         by the moderator or the source
                itself. In other words: it the distance to the component
                which gives the T0 signal to the detector electronics. If another
                component in the                         NXinstrument hierarchy provides
                this information, this should be a link.
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-pre-sample-flightpath-field
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-pre-sample-flightpath-field',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_pre_sample_flightpath = SubSection(sub_section=nxp_pre_sample_flightpath.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting
                Declares which :ref:`NXdata` (or :ref:`NXsubentry`) group
                contains the data to be shown by default.                         It is
                needed to resolve ambiguity when more than one :ref:`NXdata` group exists.
                The value is the name of the default :ref:`NXdata` group.
                It is recommended (as of NIAC2014 [#]_) to use this attribute
                to help define the path to the default dataset to be plotted.
                .. [#] NIAC2014 discussion summary:
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)


    class nxp_IDF_Version(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='IDF_Version',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        ISIS Muon IDF_Version
                https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-idf-version-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-idf-version-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_IDF_Version = SubSection(sub_section=nxp_IDF_Version.m_def,repeats=True)



class NXxas(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXxas',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                This is an application definition for raw data from an X-ray absorption
        spectroscopy experiment.               This is essentially a scan on energy versus
        incoming/        absorbed beam.
        https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_ENTRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_entry(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='entry',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            NeXus convention is to use "entry1", "entry2", ...                 for
                analysis software to locate each entry.
                https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-entry-attribute
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-entry-attribute',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_entry = SubSection(sub_section=nxp_entry.m_def,repeats=True)
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-title-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-title-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_start_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-start-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-start-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start_time = SubSection(sub_section=nxp_start_time.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXxas''',
                default='NXxas',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_INSTRUMENT(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_SOURCE(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXsource',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-source-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-source-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_type(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='type',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-source-type-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-source-type-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)
                class nxp_name(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='name',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-source-name-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-source-name-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
                class nxp_probe(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='probe',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-source-probe-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-source-probe-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: x-ray''',
                        default='x-ray',
                    )
                nxp_probe = SubSection(sub_section=nxp_probe.m_def,repeats=True)
            nxp_SOURCE = SubSection(sub_section=nxp_SOURCE.m_def,repeats=True)
            class nxp_monochromator(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXmonochromator.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXmonochromator',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='monochromator',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-monochromator-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-monochromator-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_energy(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='energy',
                    )
                    nxp_axis= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-monochromator-energy-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-monochromator-energy-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_energy = SubSection(sub_section=nxp_energy.m_def,repeats=True)
            nxp_monochromator = SubSection(sub_section=nxp_monochromator.m_def,repeats=True)
            class nxp_incoming_beam(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='incoming_beam',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-incoming-beam-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-incoming-beam-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_data(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-incoming-beam-data-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-incoming-beam-data-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
            nxp_incoming_beam = SubSection(sub_section=nxp_incoming_beam.m_def,repeats=True)
            class nxp_absorbed_beam(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='absorbed_beam',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-absorbed-beam-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-absorbed-beam-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_data(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    mark this field with attribute  ``signal=1``
                https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-absorbed-beam-data-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-absorbed-beam-data-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
            nxp_absorbed_beam = SubSection(sub_section=nxp_absorbed_beam.m_def,repeats=True)
        nxp_INSTRUMENT = SubSection(sub_section=nxp_INSTRUMENT.m_def,repeats=True)
        class nxp_SAMPLE(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Descriptive name of sample
                https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-sample-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-sample-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
        nxp_SAMPLE = SubSection(sub_section=nxp_SAMPLE.m_def,repeats=True)
        class nxp_MONITOR(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXmonitor',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-monitor-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-monitor-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_mode(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='mode',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Count to a preset value based on either clock time (timer)
                or received monitor counts (monitor).
                https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-monitor-mode-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-monitor-mode-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                nxp_enumeration= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Possible values: monitor,timer''',
                    default='monitor,timer',
                )
            nxp_mode = SubSection(sub_section=nxp_mode.m_def,repeats=True)
            class nxp_preset(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='preset',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                preset value for time or monitor
                https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-monitor-preset-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-monitor-preset-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_preset = SubSection(sub_section=nxp_preset.m_def,repeats=True)
            class nxp_data(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='data',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_INT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-monitor-data-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-monitor-data-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
        nxp_MONITOR = SubSection(sub_section=nxp_MONITOR.m_def,repeats=True)
        class nxp_DATA(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-data-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-data-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_DATA = SubSection(sub_section=nxp_DATA.m_def,repeats=True)
    nxp_ENTRY = SubSection(sub_section=nxp_ENTRY.m_def,repeats=True)



class NXxbase(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXxbase',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                This definition covers the common parts of all monochromatic single crystal raw
        data application definitions.
        https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_entry(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='entry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-title-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-title-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_start_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-start-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-start-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start_time = SubSection(sub_section=nxp_start_time.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXxbase''',
                default='NXxbase',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_instrument(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='instrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_source(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXsource',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='source',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-source-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-source-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_type(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='type',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-source-type-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-source-type-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)
                class nxp_name(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='name',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-source-name-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-source-name-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
                class nxp_probe(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='probe',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-source-probe-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-source-probe-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: neutron,x-ray,electron''',
                        default='neutron,x-ray,electron',
                    )
                nxp_probe = SubSection(sub_section=nxp_probe.m_def,repeats=True)
            nxp_source = SubSection(sub_section=nxp_source.m_def,repeats=True)
            class nxp_monochromator(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXmonochromator.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXmonochromator',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='monochromator',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-monochromator-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-monochromator-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_wavelength(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='wavelength',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_WAVELENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-monochromator-wavelength-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-monochromator-wavelength-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_wavelength = SubSection(sub_section=nxp_wavelength.m_def,repeats=True)
            nxp_monochromator = SubSection(sub_section=nxp_monochromator.m_def,repeats=True)
            class nxp_detector(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='detector',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='unbounded',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                The name of the group is detector if there is only one detector,
                if there are several,  names have to be detector1,              detector2,
                ...detectorn.
                https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_data(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_signal= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    The area detector data, the first dimension is always the
                number of scan points, the second and third are the number
                of pixels in x and y. The origin is always assumed to be               in
                the center of the detector. maxOccurs is limited to the               the
                number of detectors on your instrument.
                https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-data-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-data-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    class nxp_signal(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NX_POSINT.m_def,repeats=True)
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='signal',
                        )
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NX_POSINT',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-data-signal-attribute
                .''',
                            default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-data-signal-attribute',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                        nxp_enumeration= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        Possible values: 1''',
                            default='1',
                        )
                    nxp_signal = SubSection(sub_section=nxp_signal.m_def,repeats=True)
                nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
                class nxp_x_pixel_size(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='x_pixel_size',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-x-pixel-size-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-x-pixel-size-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_x_pixel_size = SubSection(sub_section=nxp_x_pixel_size.m_def,repeats=True)
                class nxp_y_pixel_size(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='y_pixel_size',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-y-pixel-size-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-y-pixel-size-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_y_pixel_size = SubSection(sub_section=nxp_y_pixel_size.m_def,repeats=True)
                class nxp_distance(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='distance',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-distance-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-distance-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
                class nxp_frame_start_number(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='frame_start_number',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    This is the start number of the first frame of a scan. In PX one often
                scans a couple                of frames on a give sample, then does
                something else, then returns to the same sample                and scans
                some more frames. Each time with a new data file.               This
                number helps concatenating such measurements.
                https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-frame-start-number-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-frame-start-number-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_frame_start_number = SubSection(sub_section=nxp_frame_start_number.m_def,repeats=True)
            nxp_detector = SubSection(sub_section=nxp_detector.m_def,repeats=True)
        nxp_instrument = SubSection(sub_section=nxp_instrument.m_def,repeats=True)
        class nxp_sample(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='sample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Descriptive name of sample
                https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_orientation_matrix(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='orientation_matrix',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                The orientation matrix according to Busing and              Levy
                conventions. This is not strictly necessary as              the UB can
                always be derived from the data.  But              let us bow to common
                usage which includes the              UB nearly always.
                https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-orientation-matrix-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-orientation-matrix-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_orientation_matrix = SubSection(sub_section=nxp_orientation_matrix.m_def,repeats=True)
            class nxp_unit_cell(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='unit_cell',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                The unit cell, a, b, c, alpha, beta, gamma.              Again, not
                strictly necessary, but normally written.
                https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-unit-cell-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-unit-cell-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_unit_cell = SubSection(sub_section=nxp_unit_cell.m_def,repeats=True)
            class nxp_temperature(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='temperature',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                The sample temperature or whatever sensor represents this value best
                https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-temperature-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-temperature-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_temperature = SubSection(sub_section=nxp_temperature.m_def,repeats=True)
            class nxp_x_translation(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='x_translation',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_LENGTH',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Translation of the sample along the X-direction of the laboratory
                coordinate system
                https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-x-translation-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-x-translation-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_x_translation = SubSection(sub_section=nxp_x_translation.m_def,repeats=True)
            class nxp_y_translation(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='y_translation',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_LENGTH',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Translation of the sample along the Y-direction of the laboratory
                coordinate system
                https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-y-translation-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-y-translation-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_y_translation = SubSection(sub_section=nxp_y_translation.m_def,repeats=True)
            class nxp_distance(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='distance',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_LENGTH',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Translation of the sample along the Z-direction of the laboratory
                coordinate system
                https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-distance-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-distance-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
        nxp_sample = SubSection(sub_section=nxp_sample.m_def,repeats=True)
        class nxp_control(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXmonitor',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='control',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-control-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-control-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_mode(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='mode',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Count to a preset value based on either clock time (timer)             or
                received monitor counts (monitor).
                https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-control-mode-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-control-mode-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                nxp_enumeration= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Possible values: monitor,timer''',
                    default='monitor,timer',
                )
            nxp_mode = SubSection(sub_section=nxp_mode.m_def,repeats=True)
            class nxp_preset(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='preset',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                preset value for time or monitor
                https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-control-preset-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-control-preset-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_preset = SubSection(sub_section=nxp_preset.m_def,repeats=True)
            class nxp_integral(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='integral',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANY',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Total integral monitor counts
                https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-control-integral-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-control-integral-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_integral = SubSection(sub_section=nxp_integral.m_def,repeats=True)
        nxp_control = SubSection(sub_section=nxp_control.m_def,repeats=True)
        class nxp_DATA(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            The name of this group id data if there is only              one detector;
                if there are several the names will              be data1, data2, data3
                and will point              to the corresponding detector groups in the
                instrument hierarchy.
                https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-data-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-data-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_DATA = SubSection(sub_section=nxp_DATA.m_def,repeats=True)
    nxp_entry = SubSection(sub_section=nxp_entry.m_def,repeats=True)



class NXscan(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXscan',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                Application definition for a generic scan instrument.           This definition is
        more an      example then a stringent definition as the content of a given NeXus
        scan file needs to      differ for different types of scans. This example
        definition shows a scan like done      on a rotation camera: the sample is rotated
        and a detector image, the rotation angle     and a monitor value is stored at each
        step in the scan. In the following, the symbol      ``NP`` is used to represent
        the number of scan points. These are the rules for      storing scan data in NeXus
        files which are implemented in this example:          * Each value varied
        throughout a scan is stored as an array of        length ``NP`` at its respective
        location within the NeXus hierarchy.     * For area detectors, ``NP`` is the first
        dimension,        example for a detector of 256x256:  ``data[NP,256,256]``     *
        The NXdata group contains links to all variables varied in the scan and the data.
        This to give an equivalent to the more familiar classical tabular representation
        of scans.           These rules exist for a reason: HDF allows the first dimension
        of a data set to be      unlimited. This means the data can be appended too. Thus
        a NeXus file built according      to the rules given above can be used in the
        following way:          * At the start of a scan, write all the static
        information.     * At each scan point, append new data from varied variables
        and the detector to the file.
        https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_ENTRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-title-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-title-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_start_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-start-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-start-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start_time = SubSection(sub_section=nxp_start_time.m_def,repeats=True)
        class nxp_end_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='end_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-end-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-end-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_end_time = SubSection(sub_section=nxp_end_time.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXscan''',
                default='NXscan',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_INSTRUMENT(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_DETECTOR(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-instrument-detector-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-instrument-detector-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_data(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_signal= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-instrument-detector-data-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-instrument-detector-data-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
            nxp_DETECTOR = SubSection(sub_section=nxp_DETECTOR.m_def,repeats=True)
        nxp_INSTRUMENT = SubSection(sub_section=nxp_INSTRUMENT.m_def,repeats=True)
        class nxp_SAMPLE(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_rotation_angle(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='rotation_angle',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-sample-rotation-angle-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-sample-rotation-angle-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_rotation_angle = SubSection(sub_section=nxp_rotation_angle.m_def,repeats=True)
        nxp_SAMPLE = SubSection(sub_section=nxp_SAMPLE.m_def,repeats=True)
        class nxp_MONITOR(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXmonitor',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-monitor-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-monitor-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_data(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='data',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_INT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-monitor-data-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-monitor-data-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
        nxp_MONITOR = SubSection(sub_section=nxp_MONITOR.m_def,repeats=True)
        class nxp_DATA(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-data-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-data-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_DATA = SubSection(sub_section=nxp_DATA.m_def,repeats=True)
    nxp_ENTRY = SubSection(sub_section=nxp_ENTRY.m_def,repeats=True)



class NXtomoproc(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXtomoproc',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        This is an application definition for the final result of a tomography experiment:
        a 3D construction of some volume of physical properties.
        https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_entry(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='entry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-title-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-title-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXtomoproc''',
                default='NXtomoproc',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_INSTRUMENT(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_SOURCE(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXsource',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-instrument-source-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-instrument-source-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_type(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='type',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-instrument-source-type-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-instrument-source-type-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)
                class nxp_name(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='name',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-instrument-source-name-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-instrument-source-name-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
                class nxp_probe(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='probe',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-instrument-source-probe-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-instrument-source-probe-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: neutron,x-ray,electron''',
                        default='neutron,x-ray,electron',
                    )
                nxp_probe = SubSection(sub_section=nxp_probe.m_def,repeats=True)
            nxp_SOURCE = SubSection(sub_section=nxp_SOURCE.m_def,repeats=True)
        nxp_INSTRUMENT = SubSection(sub_section=nxp_INSTRUMENT.m_def,repeats=True)
        class nxp_SAMPLE(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Descriptive name of sample
                https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-sample-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-sample-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
        nxp_SAMPLE = SubSection(sub_section=nxp_SAMPLE.m_def,repeats=True)
        class nxp_reconstruction(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXprocess.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXprocess',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='reconstruction',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-reconstruction-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-reconstruction-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_program(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='program',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Name of the program used for reconstruction
                https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-reconstruction-program-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-reconstruction-program-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_program = SubSection(sub_section=nxp_program.m_def,repeats=True)
            class nxp_version(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='version',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Version of the program used
                https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-reconstruction-version-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-reconstruction-version-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_version = SubSection(sub_section=nxp_version.m_def,repeats=True)
            class nxp_date(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='date',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_DATE_TIME',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Date and time of reconstruction processing.
                https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-reconstruction-date-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-reconstruction-date-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_date = SubSection(sub_section=nxp_date.m_def,repeats=True)
            class nxp_parameters(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXparameters.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXparameters',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='parameters',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-reconstruction-parameters-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-reconstruction-parameters-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_raw_file(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='raw_file',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_CHAR',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Original raw data file this data was derived from
                https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-reconstruction-parameters-raw-file-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-reconstruction-parameters-raw-file-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_raw_file = SubSection(sub_section=nxp_raw_file.m_def,repeats=True)
            nxp_parameters = SubSection(sub_section=nxp_parameters.m_def,repeats=True)
        nxp_reconstruction = SubSection(sub_section=nxp_reconstruction.m_def,repeats=True)
        class nxp_data(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='data',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_data(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='data',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_INT',
                )
                nxp_signal= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                This is the reconstructed volume. This can be different
                things. Please indicate in the unit attribute what physical
                quantity this really is.
                https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-data-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-data-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_transform(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='transform',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-data-transform-attribute
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-data-transform-attribute',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_transform = SubSection(sub_section=nxp_transform.m_def,repeats=True)
                class nxp_offset(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='offset',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-data-offset-attribute
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-data-offset-attribute',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_offset = SubSection(sub_section=nxp_offset.m_def,repeats=True)
                class nxp_scaling(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='scaling',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-data-scaling-attribute
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-data-scaling-attribute',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_scaling = SubSection(sub_section=nxp_scaling.m_def,repeats=True)
            nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
            class nxp_x(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='x',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANY',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                This is an array holding the values to use for the x-axis of
                data. The units must be appropriate for the measurement.
                https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-x-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-x-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_x = SubSection(sub_section=nxp_x.m_def,repeats=True)
            class nxp_y(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='y',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANY',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='2',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                This is an array holding the values to use for the y-axis of
                data. The units must be appropriate for the measurement.
                https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-y-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-y-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_y = SubSection(sub_section=nxp_y.m_def,repeats=True)
            class nxp_z(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='z',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANY',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='3',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                This is an array holding the values to use for the z-axis of
                data. The units must be appropriate for the measurement.
                https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-z-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-z-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_z = SubSection(sub_section=nxp_z.m_def,repeats=True)
        nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
    nxp_entry = SubSection(sub_section=nxp_entry.m_def,repeats=True)



class NXxlaue(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXxlaue',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXxrot',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                raw data from a single crystal laue camera, extends :ref:`NXxrot`          This is
        the application definition for raw data from a single crystal laue      camera. It
        extends :ref:`NXxrot`.
        https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_entry(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='entry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXxlaue''',
                default='NXxlaue',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_instrument(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='instrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_source(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXsource',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='source',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-instrument-source-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-instrument-source-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_distribution(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NXdata',
                    )
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='distribution',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    This is the wavelength distribution of the beam
                https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-instrument-source-distribution-group
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-instrument-source-distribution-group',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    class nxp_data(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='data',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        expect  ``signal=1 axes="energy"``
                https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-instrument-source-distribution-data-field
                .''',
                            default='https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-instrument-source-distribution-data-field',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                    nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
                    class nxp_wavelength(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='wavelength',
                        )
                        nxp_units= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NX_WAVELENGTH',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-instrument-source-distribution-wavelength-field
                .''',
                            default='https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-instrument-source-distribution-wavelength-field',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                    nxp_wavelength = SubSection(sub_section=nxp_wavelength.m_def,repeats=True)
                nxp_distribution = SubSection(sub_section=nxp_distribution.m_def,repeats=True)
            nxp_source = SubSection(sub_section=nxp_source.m_def,repeats=True)
        nxp_instrument = SubSection(sub_section=nxp_instrument.m_def,repeats=True)
    nxp_entry = SubSection(sub_section=nxp_entry.m_def,repeats=True)



class NXtomo(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXtomo',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                This is the application definition for x-ray or neutron tomography raw data.
        In tomography            a number of dark field images are measured, some bright
        field images and, of course the sample.            In order to distinguish between
        them images carry a image_key.
        https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_entry(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='entry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='0',
            )
            nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='1',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-title-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-title-field',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_start_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='0',
            )
            nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='1',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-start-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-start-time-field',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start_time = SubSection(sub_section=nxp_start_time.m_def,repeats=True)
        class nxp_end_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='end_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='0',
            )
            nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='1',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-end-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-end-time-field',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_end_time = SubSection(sub_section=nxp_end_time.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXtomo''',
                default='NXtomo',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_instrument(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='instrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_SOURCE(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXsource',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-source-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-source-group',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_type(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='type',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-source-type-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-source-type-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)
                class nxp_name(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='name',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-source-name-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-source-name-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
                class nxp_probe(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='probe',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-source-probe-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-source-probe-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: neutron,x-ray,electron''',
                        default='neutron,x-ray,electron',
                    )
                nxp_probe = SubSection(sub_section=nxp_probe.m_def,repeats=True)
            nxp_SOURCE = SubSection(sub_section=nxp_SOURCE.m_def,repeats=True)
            class nxp_detector(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='detector',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_data(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_signal= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-data-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-data-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
                class nxp_image_key(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='image_key',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    In order                  to distinguish between sample projections, dark
                and flat                  images, a magic number is recorded per frame.
                The key is as follows:

                * projection = 0                  * flat field = 1                  * dark
                field = 2                  * invalid = 3
                https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-image-key-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-image-key-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_image_key = SubSection(sub_section=nxp_image_key.m_def,repeats=True)
                class nxp_x_pixel_size(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='x_pixel_size',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-x-pixel-size-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-x-pixel-size-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_x_pixel_size = SubSection(sub_section=nxp_x_pixel_size.m_def,repeats=True)
                class nxp_y_pixel_size(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='y_pixel_size',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-y-pixel-size-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-y-pixel-size-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_y_pixel_size = SubSection(sub_section=nxp_y_pixel_size.m_def,repeats=True)
                class nxp_distance(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='distance',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Distance between detector and sample
                https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-distance-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-distance-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
                class nxp_x_rotation_axis_pixel_position(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='x_rotation_axis_pixel_position',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-x-rotation-axis-pixel-position-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-x-rotation-axis-pixel-position-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_x_rotation_axis_pixel_position = SubSection(sub_section=nxp_x_rotation_axis_pixel_position.m_def,repeats=True)
                class nxp_y_rotation_axis_pixel_position(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='y_rotation_axis_pixel_position',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-y-rotation-axis-pixel-position-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-y-rotation-axis-pixel-position-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_y_rotation_axis_pixel_position = SubSection(sub_section=nxp_y_rotation_axis_pixel_position.m_def,repeats=True)
            nxp_detector = SubSection(sub_section=nxp_detector.m_def,repeats=True)
        nxp_instrument = SubSection(sub_section=nxp_instrument.m_def,repeats=True)
        class nxp_sample(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='sample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Descriptive name of sample
                https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-sample-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-sample-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_rotation_angle(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='rotation_angle',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                In practice this axis is always aligned along one pixel direction on the
                detector and usually vertical.                  There are experiments with
                horizontal rotation axes, so this would need to be indicated somehow.
                For now the best way for that is an open question.
                https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-sample-rotation-angle-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-sample-rotation-angle-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_rotation_angle = SubSection(sub_section=nxp_rotation_angle.m_def,repeats=True)
            class nxp_x_translation(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='x_translation',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_LENGTH',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-sample-x-translation-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-sample-x-translation-field',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_x_translation = SubSection(sub_section=nxp_x_translation.m_def,repeats=True)
            class nxp_y_translation(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='y_translation',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_LENGTH',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-sample-y-translation-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-sample-y-translation-field',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_y_translation = SubSection(sub_section=nxp_y_translation.m_def,repeats=True)
            class nxp_z_translation(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='z_translation',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_LENGTH',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-sample-z-translation-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-sample-z-translation-field',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_z_translation = SubSection(sub_section=nxp_z_translation.m_def,repeats=True)
        nxp_sample = SubSection(sub_section=nxp_sample.m_def,repeats=True)
        class nxp_control(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXmonitor',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='control',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='0',
            )
            nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='1',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-control-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-control-group',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_data(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='data',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANY',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Total integral monitor counts for each measured frame. Allows a to
                correction for           fluctuations in the beam between frames.
                https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-control-data-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-control-data-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
        nxp_control = SubSection(sub_section=nxp_control.m_def,repeats=True)
        class nxp_data(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='data',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-data-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-data-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
    nxp_entry = SubSection(sub_section=nxp_entry.m_def,repeats=True)



class NXlauetof(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXlauetof',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                This is the application definition for a TOF laue diffractometer
        https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_entry(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='entry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXlauetof''',
                default='NXlauetof',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_instrument(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='instrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_detector(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='detector',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                This assumes a planar 2D detector. All angles and distances refer to the
                center of the            detector.
                https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_polar_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='polar_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    The polar_angle (two theta) where the detector is placed.
                https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-polar-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-polar-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_polar_angle = SubSection(sub_section=nxp_polar_angle.m_def,repeats=True)
                class nxp_azimuthal_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='azimuthal_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    The azimuthal angle where the detector is placed.
                https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-azimuthal-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-azimuthal-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_azimuthal_angle = SubSection(sub_section=nxp_azimuthal_angle.m_def,repeats=True)
                class nxp_data(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_signal= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-data-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-data-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    class nxp_signal(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NX_POSINT.m_def,repeats=True)
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='signal',
                        )
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NX_POSINT',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-data-signal-attribute
                .''',
                            default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-data-signal-attribute',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                        nxp_enumeration= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        Possible values: 1''',
                            default='1',
                        )
                    nxp_signal = SubSection(sub_section=nxp_signal.m_def,repeats=True)
                nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
                class nxp_x_pixel_size(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='x_pixel_size',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-x-pixel-size-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-x-pixel-size-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_x_pixel_size = SubSection(sub_section=nxp_x_pixel_size.m_def,repeats=True)
                class nxp_y_pixel_size(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='y_pixel_size',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-y-pixel-size-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-y-pixel-size-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_y_pixel_size = SubSection(sub_section=nxp_y_pixel_size.m_def,repeats=True)
                class nxp_distance(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='distance',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-distance-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-distance-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
                class nxp_time_of_flight(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='time_of_flight',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_TIME_OF_FLIGHT',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-time-of-flight-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-time-of-flight-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_time_of_flight = SubSection(sub_section=nxp_time_of_flight.m_def,repeats=True)
            nxp_detector = SubSection(sub_section=nxp_detector.m_def,repeats=True)
        nxp_instrument = SubSection(sub_section=nxp_instrument.m_def,repeats=True)
        class nxp_sample(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='sample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Descriptive name of sample
                https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-sample-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-sample-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_orientation_matrix(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='orientation_matrix',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                The orientation matrix according to Busing and             Levy
                conventions. This is not strictly necessary as             the UB can
                always be derived from the data.  But             let us bow to common
                usage which includes thie             UB nearly always.
                https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-sample-orientation-matrix-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-sample-orientation-matrix-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_orientation_matrix = SubSection(sub_section=nxp_orientation_matrix.m_def,repeats=True)
            class nxp_unit_cell(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='unit_cell',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                The unit cell, a, b, c, alpha, beta, gamma.             Again, not
                strictly necessary, but normally written.
                https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-sample-unit-cell-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-sample-unit-cell-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_unit_cell = SubSection(sub_section=nxp_unit_cell.m_def,repeats=True)
        nxp_sample = SubSection(sub_section=nxp_sample.m_def,repeats=True)
        class nxp_control(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXmonitor',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='control',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-control-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-control-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_mode(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='mode',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Count to a preset value based on either clock time (timer) or received
                monitor counts           (monitor).
                https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-control-mode-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-control-mode-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                nxp_enumeration= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Possible values: monitor,timer''',
                    default='monitor,timer',
                )
            nxp_mode = SubSection(sub_section=nxp_mode.m_def,repeats=True)
            class nxp_preset(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='preset',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                preset value for time or monitor
                https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-control-preset-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-control-preset-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_preset = SubSection(sub_section=nxp_preset.m_def,repeats=True)
            class nxp_data(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='data',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_INT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                use these attributes  ``primary=1 signal=1``
                https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-control-data-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-control-data-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
            class nxp_time_of_flight(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='time_of_flight',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_TIME_OF_FLIGHT',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-control-time-of-flight-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-control-time-of-flight-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_time_of_flight = SubSection(sub_section=nxp_time_of_flight.m_def,repeats=True)
        nxp_control = SubSection(sub_section=nxp_control.m_def,repeats=True)
        class nxp_name(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='name',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-name-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-name-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
    nxp_entry = SubSection(sub_section=nxp_entry.m_def,repeats=True)



class NXxnb(NXxbase):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXxnb',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXxbase',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                raw data from a single crystal diffractometer, extends :ref:`NXxbase`
        This is the application definition for raw data from      a single crystal
        diffractometer     measuring in normal beam mode. It extends :ref:`NXxbase`,
        so the full definition is the content of     :ref:`NXxbase` plus the data defined
        here. All angles are      logged in order to support arbitrary scans in
        reciprocal space.
        https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_entry(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='entry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXxnb''',
                default='NXxnb',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_instrument(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='instrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_detector(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='detector',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-instrument-detector-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-instrument-detector-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_polar_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='polar_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_axis= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    The polar_angle (gamma) of the detector for each scan point.
                https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-instrument-detector-polar-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-instrument-detector-polar-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_polar_angle = SubSection(sub_section=nxp_polar_angle.m_def,repeats=True)
                class nxp_tilt_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='tilt_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_axis= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    The angle by which the detector has been tilted out of the
                scattering plane.
                https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-instrument-detector-tilt-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-instrument-detector-tilt-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_tilt_angle = SubSection(sub_section=nxp_tilt_angle.m_def,repeats=True)
            nxp_detector = SubSection(sub_section=nxp_detector.m_def,repeats=True)
        nxp_instrument = SubSection(sub_section=nxp_instrument.m_def,repeats=True)
        class nxp_sample(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='sample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_rotation_angle(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='rotation_angle',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_primary= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                This is an array holding the sample rotation angle at each           scan
                point
                https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-sample-rotation-angle-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-sample-rotation-angle-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_rotation_angle = SubSection(sub_section=nxp_rotation_angle.m_def,repeats=True)
        nxp_sample = SubSection(sub_section=nxp_sample.m_def,repeats=True)
        class nxp_name(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='name',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-name-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-name-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
    nxp_entry = SubSection(sub_section=nxp_entry.m_def,repeats=True)



class NXxasproc(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXxasproc',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                Processed data from XAS. This is energy versus I(incoming)/I(absorbed).
        https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_ENTRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_entry(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='entry',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            NeXus convention is to use "entry1", "entry2", ...                  for
                analysis software to locate each entry.
                https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-entry-attribute
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-entry-attribute',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_entry = SubSection(sub_section=nxp_entry.m_def,repeats=True)
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-title-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-title-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXxasproc''',
                default='NXxasproc',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_SAMPLE(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Descriptive name of sample
                https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-sample-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-sample-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
        nxp_SAMPLE = SubSection(sub_section=nxp_SAMPLE.m_def,repeats=True)
        class nxp_XAS_data_reduction(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXprocess.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXprocess',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='XAS_data_reduction',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-xas-data-reduction-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-xas-data-reduction-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_program(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='program',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Name of the program used for reconstruction
                https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-xas-data-reduction-program-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-xas-data-reduction-program-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_program = SubSection(sub_section=nxp_program.m_def,repeats=True)
            class nxp_version(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='version',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Version of the program used
                https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-xas-data-reduction-version-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-xas-data-reduction-version-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_version = SubSection(sub_section=nxp_version.m_def,repeats=True)
            class nxp_date(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='date',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_DATE_TIME',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Date and time of reconstruction processing.
                https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-xas-data-reduction-date-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-xas-data-reduction-date-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_date = SubSection(sub_section=nxp_date.m_def,repeats=True)
            class nxp_parameters(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXparameters.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXparameters',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='parameters',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-xas-data-reduction-parameters-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-xas-data-reduction-parameters-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_raw_file(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='raw_file',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_CHAR',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Original raw data file this data was derived from
                https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-xas-data-reduction-parameters-raw-file-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-xas-data-reduction-parameters-raw-file-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_raw_file = SubSection(sub_section=nxp_raw_file.m_def,repeats=True)
            nxp_parameters = SubSection(sub_section=nxp_parameters.m_def,repeats=True)
        nxp_XAS_data_reduction = SubSection(sub_section=nxp_XAS_data_reduction.m_def,repeats=True)
        class nxp_DATA(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-data-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-data-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_energy(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='energy',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-data-energy-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-data-energy-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_energy = SubSection(sub_section=nxp_energy.m_def,repeats=True)
            class nxp_data(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='data',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                This is corrected and calibrated I(incoming)/I(absorbed). So it is the
                absorption.                     Expect attribute  ``signal=1``
                https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-data-data-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-data-data-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
        nxp_DATA = SubSection(sub_section=nxp_DATA.m_def,repeats=True)
    nxp_ENTRY = SubSection(sub_section=nxp_ENTRY.m_def,repeats=True)



class NXstxm(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXstxm',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                Application definition for a STXM instrument.                       The
        interferometer           position measurements, monochromator photon energy values
        and           detector measurements are all treated as NXdetectors and stored
        within the NXinstrument group as lists of values stored in
        chronological order. The NXdata group then holds another version           of the
        data in a regular 3D array (NumE by NumY by NumX, for a           total of nP
        points in a sample image stack type scan). The former           data values should
        be stored with a minimum loss of precision, while           the latter values can
        be simplified and/or approximated in order to           fit the constraints of a
        regular 3D array. 'Line scans' and 'point spectra'           are just sample_image
        scan types with reduced dimensions in the same way            as single images
        have reduced E dimensions compared to image 'stacks'.
        https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_ENTRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-title-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-title-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_start_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-start-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-start-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start_time = SubSection(sub_section=nxp_start_time.m_def,repeats=True)
        class nxp_end_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='end_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-end-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-end-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_end_time = SubSection(sub_section=nxp_end_time.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='1',
            )
            nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='1',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXstxm''',
                default='NXstxm',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_INSTRUMENT(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='1',
            )
            nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='1',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_SOURCE(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXsource',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-source-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-source-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_type(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='type',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-source-type-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-source-type-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)
                class nxp_name(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='name',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-source-name-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-source-name-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
                class nxp_probe(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='probe',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-source-probe-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-source-probe-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_probe = SubSection(sub_section=nxp_probe.m_def,repeats=True)
            nxp_SOURCE = SubSection(sub_section=nxp_SOURCE.m_def,repeats=True)
            class nxp_monochromator(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXmonochromator.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXmonochromator',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='monochromator',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-monochromator-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-monochromator-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_energy(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='energy',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-monochromator-energy-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-monochromator-energy-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_energy = SubSection(sub_section=nxp_energy.m_def,repeats=True)
            nxp_monochromator = SubSection(sub_section=nxp_monochromator.m_def,repeats=True)
            class nxp_DETECTOR(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-detector-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-detector-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_data(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-detector-data-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-detector-data-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
            nxp_DETECTOR = SubSection(sub_section=nxp_DETECTOR.m_def,repeats=True)
            class nxp_sample_x(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='sample_x',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Measurements of the sample position from the x-axis interferometer.
                https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-sample-x-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-sample-x-group',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_data(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-sample-x-data-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-sample-x-data-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
            nxp_sample_x = SubSection(sub_section=nxp_sample_x.m_def,repeats=True)
            class nxp_sample_y(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='sample_y',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Measurements of the sample position from the y-axis interferometer.
                https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-sample-y-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-sample-y-group',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_data(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-sample-y-data-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-sample-y-data-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
            nxp_sample_y = SubSection(sub_section=nxp_sample_y.m_def,repeats=True)
            class nxp_sample_z(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='sample_z',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Measurements of the sample position from the z-axis interferometer.
                https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-sample-z-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-sample-z-group',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_data(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-sample-z-data-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-sample-z-data-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
            nxp_sample_z = SubSection(sub_section=nxp_sample_z.m_def,repeats=True)
        nxp_INSTRUMENT = SubSection(sub_section=nxp_INSTRUMENT.m_def,repeats=True)
        class nxp_SAMPLE(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_rotation_angle(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='rotation_angle',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-sample-rotation-angle-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-sample-rotation-angle-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_rotation_angle = SubSection(sub_section=nxp_rotation_angle.m_def,repeats=True)
        nxp_SAMPLE = SubSection(sub_section=nxp_SAMPLE.m_def,repeats=True)
        class nxp_DATA(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-data-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-data-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_stxm_scan_type(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='stxm_scan_type',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Label for typical scan types as a convenience for humans.
                Each label corresponds to a specific set of axes being scanned
                to produce a data array of shape:                                  *
                sample point spectrum: (photon_energy,)                 * sample line
                spectrum: (photon_energy, sample_y/sample_x)                 * sample
                image: (sample_y, sample_x)                 * sample image stack:
                (photon_energy, sample_y, sample_x)                 * sample focus:
                (zoneplate_z, sample_y/sample_x)                 * osa image: (osa_y,
                osa_x)                 * osa focus: (zoneplate_z, osa_y/osa_x)
                * detector image: (detector_y, detector_x)
                The "generic scan" string is to be used when none of the
                other choices are appropriate.
                https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-data-stxm-scan-type-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-data-stxm-scan-type-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                nxp_enumeration= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Possible values: sample point spectrum,sample line spectrum,sample
                image,sample image stack,sample focus,osa image,osa focus,detector
                image,generic scan''',
                    default='sample point spectrum,sample line spectrum,sample image,sample image stack,sample focus,osa image,osa focus,detector image,generic scan',
                )
            nxp_stxm_scan_type = SubSection(sub_section=nxp_stxm_scan_type.m_def,repeats=True)
            class nxp_data(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='data',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_signal= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Detectors that provide more than one value per scan point should be
                summarised               to a single value per scan point for this array
                in order to simplify plotting.                              Note that
                'Line scans' and focus type scans measure along one spatial dimension
                but are not restricted to being parallel to the X or Y axes. Such scans
                should therefore use a single dimension for the positions along the
                spatial               line. The 'sample_x' and 'sample_y' fields should
                then contain lists of the               x- and y-positions and should both
                have the 'axis' attribute pointing to the same dimension.
                https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-data-data-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-data-data-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
            class nxp_energy(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='energy',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                List of photon energies of the X-ray beam. If scanned through multiple
                values,               then an 'axis' attribute will be required to link
                the field to the appropriate data array dimension.
                https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-data-energy-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-data-energy-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_energy = SubSection(sub_section=nxp_energy.m_def,repeats=True)
            class nxp_sample_y(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='sample_y',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                List of Y positions on the sample. If scanned through multiple values,
                then an 'axis' attribute will be required to link the field to the
                appropriate data array dimension.
                https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-data-sample-y-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-data-sample-y-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_sample_y = SubSection(sub_section=nxp_sample_y.m_def,repeats=True)
            class nxp_sample_x(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='sample_x',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                List of X positions on the sample. If scanned through multiple values,
                then an 'axis' attribute will be required to link the field to the
                appropriate data array dimension.
                https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-data-sample-x-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-data-sample-x-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_sample_x = SubSection(sub_section=nxp_sample_x.m_def,repeats=True)
        nxp_DATA = SubSection(sub_section=nxp_DATA.m_def,repeats=True)
        class nxp_control(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXmonitor',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='control',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='0',
            )
            nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='1',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-control-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-control-group',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_data(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='data',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Values to use to normalise for time-variations in photon flux. Typically,
                the synchrotron storage ring               electron beam current is used
                as a proxy for the X-ray beam intensity. Array must have same shape as the
                NXdata groups.
                https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-control-data-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-control-data-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
        nxp_control = SubSection(sub_section=nxp_control.m_def,repeats=True)
    nxp_ENTRY = SubSection(sub_section=nxp_ENTRY.m_def,repeats=True)



class NXiqproc(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXiqproc',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        Application definition for any :math:`I(Q)` data.
        https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_ENTRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_entry(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='entry',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-entry-attribute
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-entry-attribute',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_entry = SubSection(sub_section=nxp_entry.m_def,repeats=True)
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-title-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-title-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXiqproc''',
                default='NXiqproc',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_instrument(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='instrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Name of the instrument from which this data was reduced.
                https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-instrument-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-instrument-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_SOURCE(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXsource',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-instrument-source-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-instrument-source-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_type(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='type',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-instrument-source-type-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-instrument-source-type-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)
                class nxp_name(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='name',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-instrument-source-name-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-instrument-source-name-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
                class nxp_probe(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='probe',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-instrument-source-probe-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-instrument-source-probe-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: neutron,x-ray,electron''',
                        default='neutron,x-ray,electron',
                    )
                nxp_probe = SubSection(sub_section=nxp_probe.m_def,repeats=True)
            nxp_SOURCE = SubSection(sub_section=nxp_SOURCE.m_def,repeats=True)
        nxp_instrument = SubSection(sub_section=nxp_instrument.m_def,repeats=True)
        class nxp_SAMPLE(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Descriptive name of sample
                https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-sample-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-sample-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
        nxp_SAMPLE = SubSection(sub_section=nxp_SAMPLE.m_def,repeats=True)
        class nxp_reduction(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXprocess.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXprocess',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='reduction',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-reduction-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-reduction-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_program(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='program',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-reduction-program-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-reduction-program-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_program = SubSection(sub_section=nxp_program.m_def,repeats=True)
            class nxp_version(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='version',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-reduction-version-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-reduction-version-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_version = SubSection(sub_section=nxp_version.m_def,repeats=True)
            class nxp_input(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXparameters.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXparameters',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='input',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Input parameters for the reduction program used
                https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-reduction-input-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-reduction-input-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_filenames(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='filenames',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_CHAR',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Raw data files used to generate this I(Q)
                https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-reduction-input-filenames-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-reduction-input-filenames-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_filenames = SubSection(sub_section=nxp_filenames.m_def,repeats=True)
            nxp_input = SubSection(sub_section=nxp_input.m_def,repeats=True)
            class nxp_output(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXparameters.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXparameters',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='output',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Eventual output parameters from the data reduction program used
                https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-reduction-output-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-reduction-output-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_output = SubSection(sub_section=nxp_output.m_def,repeats=True)
        nxp_reduction = SubSection(sub_section=nxp_reduction.m_def,repeats=True)
        class nxp_DATA(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-data-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-data-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_data(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='data',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_INT',
                )
                nxp_signal= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                This is I(Q). The client has to analyse the dimensions                 of
                I(Q). Often, multiple I(Q) for various environment
                conditions are measured; that would be the first
                dimension. Q can be multidimensional, this accounts for
                the further dimensions in the data
                https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-data-data-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-data-data-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
            class nxp_variable(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='variable',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-data-variable-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-data-variable-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_varied_variable(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='varied_variable',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    The real name of the varied variable in the first dim of data,
                temperature, P, MF etc...
                https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-data-variable-varied-variable-attribute
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-data-variable-varied-variable-attribute',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_varied_variable = SubSection(sub_section=nxp_varied_variable.m_def,repeats=True)
            nxp_variable = SubSection(sub_section=nxp_variable.m_def,repeats=True)
            class nxp_qx(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='qx',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='2',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Values for the first dimension of Q
                https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-data-qx-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-data-qx-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_qx = SubSection(sub_section=nxp_qx.m_def,repeats=True)
            class nxp_qy(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='qy',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='3',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Values for the second dimension of Q
                https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-data-qy-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-data-qy-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_qy = SubSection(sub_section=nxp_qy.m_def,repeats=True)
        nxp_DATA = SubSection(sub_section=nxp_DATA.m_def,repeats=True)
    nxp_ENTRY = SubSection(sub_section=nxp_ENTRY.m_def,repeats=True)



class NXcanSAS(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXcanSAS',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                Implementation of the canSAS standard to store reduced small-angle scattering data
        of any dimension.                  .. index:: canSAS                  For more
        details, see:                  * http://www.cansas.org/         *
        http://www.cansas.org/formats/canSAS1d/1.1/doc/         *
        http://cansas-org.github.io/canSAS2012/         *
        https://github.com/canSAS-org/NXcanSAS_examples                  The minimum
        requirements for *reduced* small-angle scattering data          as described by
        canSAS are summarized in the following figure:                  ..
        _canSAS_2012_minimum:                  .. figure:: canSAS/2012-minimum.png
        :width: 60%                        The minimum requirements for *reduced*
        small-angle scattering data.            (:download:`full image
        <canSAS/2012-minimum.png>`)            See :ref:`below <NXcanSAS_minimum>` for the
        minimum required             information for a NeXus data file            written
        to the NXcanSAS specification.                  .. rubric::  Implementation of
        canSAS standard in NeXus                  This application definition is an
        implementation of the canSAS         standard for storing both one-dimensional and
        multi-dimensional          *reduced* small-angle scattering data.

        * NXcanSAS is for reduced SAS data and metadata to be stored together in one file.
        * *Reduced* SAS data consists of :math:`I(\\vec{Q})` or :math:`I(|\\vec{Q}|)`
        * External file links are not to be used for the reduced data.          * A good
        practice/practise is, at least, to include a reference to how the data was
        acquired and processed.  Yet this is not a requirement.         * There is no need
        for NXcanSAS to refer to any raw data.

        The canSAS data format has a structure similar to NeXus, not identical.         To
        allow canSAS data to be expressed in NeXus, yet identifiable         by the canSAS
        standard, an additional group attribute ``canSAS_class``         was introduced.
        Here is the mapping of some common groups.                  ===============
        ============  ==========================         group (*)        NX_class
        canSAS_class         ===============  ============  ==========================
        sasentry         NXentry       SASentry         sasdata          NXdata
        SASdata         sasdetector      NXdetector    SASdetector         sasinstrument
        NXinstrument  SASinstrument         sasnote          NXnote        SASnote
        sasprocess       NXprocess     SASprocess         sasprocessnote   NXcollection
        SASprocessnote         sastransmission  NXdata        SAStransmission_spectrum
        sassample        NXsample      SASsample         sassource        NXsource
        SASsource         ===============  ============  ==========================
        (*) The name of each group is a suggestion,         not a fixed requirement and is
        chosen as fits each data file.           See the section on defining
        :ref:`NXDL group and field names <RegExpName>`.                  Refer to the
        NeXus Coordinate System drawing (:ref:`Design-CoordinateSystem`)         for
        choice and direction of :math:`x`, :math:`y`, and :math:`z` axes.
        .. _NXcanSAS_minimum:                  .. rubric:: The minimum required
        information for a NeXus data file            written to the NXcanSAS
        specification.                  .. literalinclude:: canSAS/minimum-required.txt
        :tab-width: 4            :linenos:            :language: text

        https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_ENTRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: NXcanSAS (applications); SASentry              Place the canSAS
                ``SASentry`` group as a child of a NeXus ``NXentry`` group       (when
                data from multiple techniques are being stored)       or as a replacement
                for the ``NXentry`` group.

                Note: It is required for all numerical objects to provide       a *units*
                attribute that describes the engineering units.        Use the Unidata
                UDunits [#]_ specification        as this is compatible with various
                community standards.              .. [#] The UDunits specification also
                includes instructions for derived units.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_default(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='default',
            )
            nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='true',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            .. index:: plotting
                Declares which :ref:`NXdata` group                          contains the
                data to be shown by default.                         It is needed to
                resolve ambiguity when more than one :ref:`NXdata` group exists.
                The value is the name of the default :ref:`NXdata` group.
                Usually, this will be the name of the first *SASdata* group.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-default-attribute
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-default-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)
        class nxp_canSAS_class(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='canSAS_class',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Official canSAS group: **SASentry**
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-cansas-class-attribute
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-cansas-class-attribute',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: SASentry''',
                default='SASentry',
            )
        nxp_canSAS_class = SubSection(sub_section=nxp_canSAS_class.m_def,repeats=True)
        class nxp_version(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='version',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Describes the version of the canSAS standard used to write this data.
                This must be a text (not numerical) representation. Such as::
                @version="1.1"

                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-version-attribute
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-version-attribute',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: 1.1''',
                default='1.1',
            )
        nxp_version = SubSection(sub_section=nxp_version.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this subentry conforms.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXcanSAS''',
                default='NXcanSAS',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='1',
            )
            nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='1',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Title of this *SASentry*.           Make it so that you can recognize the
                data by its title.         Could be the name of the sample,         the
                name for the measured data, or something else representative.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-title-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-title-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_run(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='run',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='1',
            )
            nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='unbounded',
            )
            nxp_nameType= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='any',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Run identification for this *SASentry*.          For many facilities, this
                is an integer, such as en experiment number.          Use multiple
                instances of ``run`` as needed, keeping         in mind that HDF5 requires
                unique names for all entities         in a group.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-run-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-run-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_optional= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='true',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Optional string attribute to identify this particular *run*.
                Could use this to associate (correlate) multiple *SASdata* elements with
                *run* elements.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-run-name-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-run-name-attribute',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
        nxp_run = SubSection(sub_section=nxp_run.m_def,repeats=True)
        class nxp_DATA(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            A *SASData* group contains a single reduced small-angle scattering data
                set          that can be represented as :math:`I(\\vec{Q})` or
                :math:`I(|\\vec{Q}|)`.                  *Q* can be either a vector
                (:math:`\\vec{Q}`) or a vector magnitude (:math:`|\\vec{Q}|`)
                The name of each *SASdata* group must be unique within a SASentry group.
                Suggest using names such as ``sasdata01``.                  NOTE:  For the
                first *SASdata* group, be sure to write the chosen name          into the
                `SASentry/@default` attribute, as in::
                SASentry/@default="sasdata01"                  A *SASdata* group has
                several attributes:                  * I_axes         * Q_indices
                * Mask_indices                  To indicate the dependency relationships
                of other varied parameters,          use attributes similar to
                ``@Mask_indices`` (such as ``@Temperature_indices``         or
                ``@Pressure_indices``).
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_canSAS_class(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='canSAS_class',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Official canSAS group: :index:`NXcanSAS (applications); SASdata`
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-cansas-class-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-cansas-class-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                nxp_enumeration= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Possible values: SASdata''',
                    default='SASdata',
                )
            nxp_canSAS_class = SubSection(sub_section=nxp_canSAS_class.m_def,repeats=True)
            class nxp_signal(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='signal',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Name of the default data field.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-signal-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-signal-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                nxp_enumeration= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Possible values: I''',
                    default='I',
                )
            nxp_signal = SubSection(sub_section=nxp_signal.m_def,repeats=True)
            class nxp_I_axes(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='I_axes',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                String array that defines the independent data fields used in
                the default plot for all of the dimensions of the *signal* field
                (the *signal* field is the field in this group that is named by
                the ``signal`` attribute of this group).            One entry is provided
                for every dimension of the ``I`` data object.             Such as::
                @I_axes="Temperature", "Time", "Pressure", "Q", "Q"
                Since there are five items in the list, the intensity field of this
                example           ``I`` must be a five-dimensional array (rank=5).
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-i-axes-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-i-axes-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_I_axes = SubSection(sub_section=nxp_I_axes.m_def,repeats=True)
            class nxp_Q_indices(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='Q_indices',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_INT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Integer or integer array that describes which indices            (of the
                :math:`I` data object) are used to            reference the ``Q`` data
                object. The items in this array            use zero-based indexing.  Such
                as::                          @Q_indices=1,3,4                      which
                indicates that ``Q`` requires three indices           from the :math:`I`
                data object: one for time and           two for Q position.   Thus, in
                this example, the           ``Q`` data is time-dependent:
                :math:`\\vec{Q}(t)`.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-q-indices-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-q-indices-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_Q_indices = SubSection(sub_section=nxp_Q_indices.m_def,repeats=True)
            class nxp_mask(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='mask',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Name of the data mask field.                      .. see:
                https://github.com/nexusformat/definitions/issues/533
                The data *mask* must have the same shape as the *data* field.
                Positions in the mask correspond to positions in the *data* field.
                The value of the mask field may be either a boolean array            where
                ``false`` means *no mask* and ``true`` means *mask*           or a more
                descriptive array as as defined in :ref:`NXdetector`.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-mask-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-mask-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_mask = SubSection(sub_section=nxp_mask.m_def,repeats=True)
            class nxp_Mask_indices(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='Mask_indices',
                )
                nxp_optional= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='true',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Integer or integer array that describes which indices           (of the
                :math:`I` data object) are used to            reference the ``Mask`` data
                object.  The items in this           array use zero-based indexing.  Such
                as::                          @Mask_indices=3,4                      which
                indicates that Q requires two indices           from the :math:`I` data
                object for Q position.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-mask-indices-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-mask-indices-attribute',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_Mask_indices = SubSection(sub_section=nxp_Mask_indices.m_def,repeats=True)
            class nxp_timestamp(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='timestamp',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_DATE_TIME',
                )
                nxp_optional= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='true',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                ISO-8601 time [#iso8601]_
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-timestamp-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-timestamp-attribute',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_timestamp = SubSection(sub_section=nxp_timestamp.m_def,repeats=True)
            class nxp_Q(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='Q',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_PER_LENGTH',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                .. index:: NXcanSAS (applications); Q
                Array of :math:`Q` data to accompany :math:`I`.                      ..
                figure:: canSAS/Q-geometry.jpg                 :width: 60%
                The :math:`\\vec{Q}` geometry.                 (:download:`full image
                <canSAS/Q-geometry.jpg>`)                      :math:`Q` may be
                represented as either           the three-dimensional scattering vector
                :math:`\\vec{Q}`           or the magnitude of the scattering vector,
                :math:`|\\vec{Q}|`.                      .. math::  |\\vec{Q}| =
                (4\\pi/\\lambda) sin(\\theta)                       When we write :math:`Q`,
                we may refer to either or both of            :math:`|\\vec{Q}|`
                or :math:`\\vec{Q}`,  depending on the context.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-q-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-q-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_units(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='units',
                    )
                    nxp_optional= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='false',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Engineering units to use when expressing             :math:`Q` and related
                terms.                          Data expressed in other units will
                generate             a warning from validation software and may not
                be processed by some analysis software packages.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-q-units-attribute
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-q-units-attribute',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: 1/m,1/nm,1/angstrom''',
                        default='1/m,1/nm,1/angstrom',
                    )
                nxp_units = SubSection(sub_section=nxp_units.m_def,repeats=True)
                class nxp_uncertainties(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='uncertainties',
                    )
                    nxp_optional= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='true',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    (optional: for numerical arrays)                           Names the
                dataset (in this SASdata group) that provides the              uncertainty
                to be used for data analysis.               The name of the dataset
                containing the :math:`Q` uncertainty             is flexible.  The name
                must be unique in the *SASdata* group.                          .. comment
                see: https://github.com/canSAS-org/canSAS2012/issues/7
                Such as::                              @uncertainties="Q_uncertainties"
                The *uncertainties* field will have the same *shape* (dimensions)
                as the Q field.                          These values are the estimates of
                uncertainty of each Q. By default,              this will be interpreted
                to be the estimated standard deviation.              In special cases,
                when a standard deviation cannot possibly be used,              its value
                can specify another measure of distribution width.
                There may also be a subdirectory (optional) with constituent
                components.

                .. note:: To report distribution in reported :math:`Q` values,
                use the ``@resolutions`` attribute.  It is possible for both
                ``@resolutions`` and ``uncertainties`` to be reported.

                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-q-uncertainties-attribute
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-q-uncertainties-attribute',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_uncertainties = SubSection(sub_section=nxp_uncertainties.m_def,repeats=True)
                class nxp_resolutions(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='resolutions',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_CHAR',
                    )
                    nxp_optional= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='true',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    .. index:: NXcanSAS (applications); resolutions
                (optional: for numerical arrays)                           Names the
                dataset (in this SASdata group) containing the :math:`Q` resolution.
                The name of the dataset containing the :math:`Q` resolution             is
                flexible.  The name must be unique in the *SASdata* group.
                .. comment                see:
                https://github.com/canSAS-org/canSAS2012/issues/7
                The *resolutions* field will have the same *shape* (dimensions)
                as the Q field.                          Generally, this is the principal
                resolution of each :math:`Q`.             Names the data object (in this
                SASdata group) that provides the              :math:`Q` resolution to be
                used for data analysis.  Such as::
                @resolutions="Qdev"                          To specify two-dimensional
                resolution for slit-smearing geometry,              such as (*dQw*,
                *dQl*), use a string array, such as::
                @resolutions="dQw", "dQl"                          There may also be a
                subdirectory (optional) with constituent              components.
                This pattern will demonstrate how to introduce further as-yet
                unanticipated terms related to the data.                          ..
                comment                 see:
                https://github.com/nexusformat/definitions/issues/492#issuecomment-262813907
                By default, the values of the resolutions data object are assumed to be
                one standard deviation of any function used to approximate the
                resolution function. This equates to the width of the gaussian
                distribution if a Gaussian is chosen.  See the
                ``@resolutions_description``             attribute.
                .. note:: To report uncertainty in reported :math:`Q` values,
                use the ``@uncertainties`` attribute.  It is possible for both
                ``@resolutions`` and ``uncertainties`` to be reported.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-q-resolutions-attribute
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-q-resolutions-attribute',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_resolutions = SubSection(sub_section=nxp_resolutions.m_def,repeats=True)
                class nxp_resolutions_description(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='resolutions_description',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_CHAR',
                    )
                    nxp_optional= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='true',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    (optional)              Generally, this describes the :math:`Q`
                ``@resolutions`` data object.             By default, the value is assumed
                to be "Gaussian".  These are             suggestions:
                * Gaussian             * Lorentzian             * Square :
                note that the full width of the square would be ~2.9 times
                the standard deviation specified in the vector             * Triangular
                * Sawtooth-outward : vertical edge pointing to larger Q             *
                Sawtooth-inward vertical edge pointing to smaller Q             * Bin :
                range of values contributing               (for example, when 2-D detector
                data have been reduced                to a 1-D :math:`I(|Q|)` dataset)
                For other meanings, it may be necessary to provide further details
                such as the function used to assess the resolution.             In such
                cases, use additional datasets or a :ref:`NXnote` subgroup             to
                include that detail.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-q-resolutions-description-attribute
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-q-resolutions-description-attribute',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_resolutions_description = SubSection(sub_section=nxp_resolutions_description.m_def,repeats=True)
            nxp_Q = SubSection(sub_section=nxp_Q.m_def,repeats=True)
            class nxp_I(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='I',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                .. index:: NXcanSAS (applications); I
                Array of intensity (:math:`I`) data.                      The intensity
                may be represented in one of these forms:                      **absolute
                units**: :math:`d\\Sigma/d\\Omega(Q)`           differential cross-section
                per unit volume per unit solid angle (such as: 1/cm/sr or 1/m/sr)
                **absolute units**: :math:`d\\sigma/d\\Omega(Q)`           differential
                cross-section           per unit atom per unit solid angle (such as: cm^2
                or m^2)                      **arbitrary units**: :math:`I(Q)`
                usually a ratio of two detectors            but units are meaningless
                (such as: a.u. or counts)                      This presents a few
                problems            for analysis software to sort out when reading the
                data.           Fortunately, it is possible to analyze the *units* to
                determine which type of           intensity is being reported and make
                choices at the time the file is read. But this is           an area for
                consideration and possible improvement.                      One problem
                arises with software that automatically converts data into some canonical
                units used by that software. The software should not convert units between
                these different           types of intensity indiscriminately.
                A second problem is that when arbitrary units are used, then the set of
                possible           analytical results is restricted.  With such units, no
                meaningful volume fraction            or number density can be determined
                directly from :math:`I(Q)`.                      In some cases, it is
                possible to apply a factor to convert the arbitrary            units to an
                absolute scale.  This should be considered as a possibility            of
                the analysis process.                      Where this documentation says
                *typical units*, it is possible that small-angle           data may be
                presented in other units and still be consistent with NeXus.           See
                the :ref:`design-units` section.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-i-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-i-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_units(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='units',
                    )
                    nxp_optional= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='false',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Engineering units to use when expressing             :math:`I` and
                intensity-related terms.                          Data expressed in other
                units (or missing a ``@units`` attribute)             will be treated as
                ``arbitrary`` by some software packages.                          For
                software using the UDUNITS-2 library, ``arbitrary`` will be
                changed to ``unknown`` for handling with that library.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-i-units-attribute
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-i-units-attribute',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: 1/m,1/cm,m2/g,cm2/g,arbitrary''',
                        default='1/m,1/cm,m2/g,cm2/g,arbitrary',
                    )
                nxp_units = SubSection(sub_section=nxp_units.m_def,repeats=True)
                class nxp_uncertainties(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='uncertainties',
                    )
                    nxp_optional= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='true',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    (optional: for numerical arrays)                           Names the
                dataset (in this SASdata group) that provides the              uncertainty
                of :math:`I` to be used for data analysis.               The name of the
                dataset containing the :math:`I` uncertainty             is flexible.  The
                name must be unique in the *SASdata* group.                          ..
                comment                see:
                https://github.com/canSAS-org/canSAS2012/issues/7
                Generally, this is the estimate of the uncertainty of each :math:`I`.
                Typically the estimated standard deviation.
                *Idev* is the canonical name from the 1D standard.               The
                NXcanSAS standard allows for the name to be described using this
                attribute.             Such as::
                @uncertainties="Idev"
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-i-uncertainties-attribute
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-i-uncertainties-attribute',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_uncertainties = SubSection(sub_section=nxp_uncertainties.m_def,repeats=True)
                class nxp_scaling_factor(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='scaling_factor',
                    )
                    nxp_optional= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='true',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    (optional)              Names the field (a.k.a. dataset) that contains a
                factor             to multiply ``I``.  By default, this value is unity.
                Should an uncertainty be associated with the scaling factor
                field, the field containing that uncertainty would be
                designated via the ``uncertainties`` attribute.               Such as::
                I : NX_NUMBER                   @uncertainties="Idev" : NX_CHAR
                @scaling_factor="I_scaling" : NX_CHAR               Idev : NX_NUMBER
                I_scaling : NX_NUMBER                   @uncertainties="I_scaling_dev" :
                NX_CHAR               I_scaling_dev : NX_NUMBER
                The exact names for ``I_scaling`` and ``I_scaling_dev`` are not
                defined by NXcanSAS.  The user has the flexibility to use names
                different than those shown in this example.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-i-scaling-factor-attribute
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-i-scaling-factor-attribute',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_scaling_factor = SubSection(sub_section=nxp_scaling_factor.m_def,repeats=True)
            nxp_I = SubSection(sub_section=nxp_I.m_def,repeats=True)
            class nxp_Idev(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='Idev',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                .. index:: NXcanSAS (applications); Idev                      Estimated
                **uncertainty** (usually standard deviation)           in :math:`I`.  Must
                have the same units as :math:`I`.

                When present, the name of this field is also            recorded in the
                *uncertainties* attribute of *I*, as in::
                I/@uncertainties="Idev"

                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-idev-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-idev-field',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_units(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='units',
                    )
                    nxp_optional= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='false',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Engineering units to use when expressing             :math:`I` and
                intensity-related terms.                          Data expressed in other
                units (or missing a ``@units`` attribute)             will generate a
                warning from any validation process             and will be treated as
                ``arbitrary`` by some analysis software packages.
                For software using the UDUNITS-2 library, ``arbitrary`` will be
                changed to ``unknown`` for handling with that library.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-idev-units-attribute
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-idev-units-attribute',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: 1/m,1/cm,m2/g,cm2/g,arbitrary''',
                        default='1/m,1/cm,m2/g,cm2/g,arbitrary',
                    )
                nxp_units = SubSection(sub_section=nxp_units.m_def,repeats=True)
            nxp_Idev = SubSection(sub_section=nxp_Idev.m_def,repeats=True)
            class nxp_Qdev(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='Qdev',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_PER_LENGTH',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                .. index:: NXcanSAS (applications); Qdev                      Estimated
                :math:`Q` **resolution** (usually standard deviation).             Must
                have the same units as :math:`Q`.                      When present, the
                name of this field is also            recorded in the *resolutions*
                attribute of *Q*,            as in::
                Q/@resolutions="Qdev"

                or::

                Q/@resolutions="dQw", "dQl"

                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-qdev-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-qdev-field',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_units(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='units',
                    )
                    nxp_optional= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='false',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Engineering units to use when expressing             :math:`Q` and related
                terms.                          Data expressed in other units may not be
                processed by some              software packages.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-qdev-units-attribute
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-qdev-units-attribute',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: 1/m,1/nm,1/angstrom''',
                        default='1/m,1/nm,1/angstrom',
                    )
                nxp_units = SubSection(sub_section=nxp_units.m_def,repeats=True)
            nxp_Qdev = SubSection(sub_section=nxp_Qdev.m_def,repeats=True)
            class nxp_dQw(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='dQw',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_PER_LENGTH',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                .. index:: NXcanSAS (applications); dQw                      :math:`Q`
                **resolution** along the axis of scanning            (the high-resolution
                *slit width* direction).            Useful for defining resolution data
                from            slit-smearing instruments such as Bonse-Hart geometry.
                Must have the same units as :math:`Q`.                      When present,
                the name of this field is also            recorded in the *resolutions*
                attribute of *Q*,            as in::
                Q/@resolutions="dQw", "dQl"
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-dqw-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-dqw-field',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_units(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='units',
                    )
                    nxp_optional= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='false',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Engineering units to use when expressing             :math:`Q` and related
                terms.                          Data expressed in other units may not be
                processed by some              software packages.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-dqw-units-attribute
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-dqw-units-attribute',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: 1/m,1/nm,1/angstrom''',
                        default='1/m,1/nm,1/angstrom',
                    )
                nxp_units = SubSection(sub_section=nxp_units.m_def,repeats=True)
            nxp_dQw = SubSection(sub_section=nxp_dQw.m_def,repeats=True)
            class nxp_dQl(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='dQl',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_PER_LENGTH',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                .. index:: NXcanSAS (applications); dQl                      :math:`Q`
                **resolution** perpendicular to the axis of scanning            (the
                low-resolution *slit length* direction).            Useful for defining
                resolution data from            slit-smearing instruments such as
                Bonse-Hart geometry.           Must have the same units as :math:`Q`.
                When present, the name of this field is also            recorded in the
                *resolutions* attribute of *Q*,            as in::
                Q/@resolutions="dQw", "dQl"
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-dql-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-dql-field',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_units(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='units',
                    )
                    nxp_optional= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='false',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Engineering units to use when expressing             :math:`Q` and related
                terms.                          Data expressed in other units may not be
                processed by some              software packages.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-dql-units-attribute
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-dql-units-attribute',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: 1/m,1/nm,1/angstrom''',
                        default='1/m,1/nm,1/angstrom',
                    )
                nxp_units = SubSection(sub_section=nxp_units.m_def,repeats=True)
            nxp_dQl = SubSection(sub_section=nxp_dQl.m_def,repeats=True)
            class nxp_Qmean(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='Qmean',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_PER_LENGTH',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Mean value of :math:`Q` for this data point.            Useful when
                describing data that has been            binned from higher-resolution
                data.                       It is expected that ``Q`` is provided
                and that both ``Q`` and ``Qmean`` will have the same units.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-qmean-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-qmean-field',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_units(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='units',
                    )
                    nxp_optional= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='false',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Engineering units to use when expressing             :math:`Q` and related
                terms.                          Data expressed in other units may not be
                processed by some              software packages.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-qmean-units-attribute
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-qmean-units-attribute',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: 1/m,1/nm,1/angstrom''',
                        default='1/m,1/nm,1/angstrom',
                    )
                nxp_units = SubSection(sub_section=nxp_units.m_def,repeats=True)
            nxp_Qmean = SubSection(sub_section=nxp_Qmean.m_def,repeats=True)
            class nxp_ShadowFactor(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='ShadowFactor',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_DIMENSIONLESS',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                A numerical factor applied to pixels affected by the beam stop penumbra.
                Used in data files from NIST/NCNR instruments.                      See:
                J.G. Barker and J.S. Pedersen (1995) *J. Appl. Cryst.* **28**, 105-114.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-shadowfactor-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-shadowfactor-field',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_ShadowFactor = SubSection(sub_section=nxp_ShadowFactor.m_def,repeats=True)
        nxp_DATA = SubSection(sub_section=nxp_DATA.m_def,repeats=True)
        class nxp_INSTRUMENT(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='0',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Description of the small-angle scattering instrument.
                Consider, carefully, the relevance to the SAS data analysis process
                when adding subgroups in this **NXinstrument** group.  Additional
                information         can be added but will likely be ignored by
                standardized data anlysis processes.                  The NeXus
                :ref:`NXbeam` base class may be added as a subgroup of this
                **NXinstrument**         group *or* as a subgroup of the **NXsample**
                group to describe properties of the beam at any          point downstream
                from the source.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-group',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_canSAS_class(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='canSAS_class',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Official canSAS group: :index:`NXcanSAS (applications); SASinstrument`
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-cansas-class-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-cansas-class-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                nxp_enumeration= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Possible values: SASinstrument''',
                    default='SASinstrument',
                )
            nxp_canSAS_class = SubSection(sub_section=nxp_canSAS_class.m_def,repeats=True)
            class nxp_APERTURE(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXaperture.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXaperture',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                :ref:`NXaperture` is generic and limits the variation in data files.
                Possible NeXus base class alternatives are: :ref:`NXpinhole` or
                :ref:`NXslit`.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-aperture-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-aperture-group',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_canSAS_class(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='canSAS_class',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Official canSAS group: :index:`NXcanSAS (applications); SASaperture`
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-aperture-cansas-class-attribute
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-aperture-cansas-class-attribute',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: SASaperture''',
                        default='SASaperture',
                    )
                nxp_canSAS_class = SubSection(sub_section=nxp_canSAS_class.m_def,repeats=True)
                class nxp_shape(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='shape',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    describe the type of aperture (pinhole, 4-blade slit, Soller slit, ...)
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-aperture-shape-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-aperture-shape-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_shape = SubSection(sub_section=nxp_shape.m_def,repeats=True)
                class nxp_x_gap(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='x_gap',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    opening along the :math:`x` axis
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-aperture-x-gap-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-aperture-x-gap-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_x_gap = SubSection(sub_section=nxp_x_gap.m_def,repeats=True)
                class nxp_y_gap(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='y_gap',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    opening along the :math:`y` axis
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-aperture-y-gap-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-aperture-y-gap-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_y_gap = SubSection(sub_section=nxp_y_gap.m_def,repeats=True)
            nxp_APERTURE = SubSection(sub_section=nxp_APERTURE.m_def,repeats=True)
            class nxp_COLLIMATOR(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXcollimator.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXcollimator',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Description of a collimating element (defines the divergence of the beam)
                in the instrument.                      To document a slit, pinhole, or
                the beam, refer to the            documentation of the ``NXinstrument``
                group above.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-collimator-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-collimator-group',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_canSAS_class(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='canSAS_class',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Official canSAS group: :index:`NXcanSAS (applications); SAScollimation`
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-collimator-cansas-class-attribute
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-collimator-cansas-class-attribute',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: SAScollimation''',
                        default='SAScollimation',
                    )
                nxp_canSAS_class = SubSection(sub_section=nxp_canSAS_class.m_def,repeats=True)
                class nxp_length(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='length',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Amount/length of collimation inserted (as on a SANS instrument)
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-collimator-length-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-collimator-length-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_length = SubSection(sub_section=nxp_length.m_def,repeats=True)
                class nxp_distance(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='distance',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Distance from this collimation element to the sample
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-collimator-distance-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-collimator-distance-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
            nxp_COLLIMATOR = SubSection(sub_section=nxp_COLLIMATOR.m_def,repeats=True)
            class nxp_DETECTOR(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Description of a detector in the instrument.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-group',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_canSAS_class(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='canSAS_class',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Official canSAS group: :index:`NXcanSAS (applications); SASdetector`
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-cansas-class-attribute
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-cansas-class-attribute',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: SASdetector''',
                        default='SASdetector',
                    )
                nxp_canSAS_class = SubSection(sub_section=nxp_canSAS_class.m_def,repeats=True)
                class nxp_name(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='name',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Identifies the name of this detector
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-name-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-name-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
                class nxp_SDD(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='SDD',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Distance between sample and detector.                          Note: In
                NXdetector, the ``distance`` field records the              distance to
                the previous component ... most often the sample.             This use is
                the same as ``SDD`` for most SAS              instruments but not all.
                For example, Bonse-Hart cameras              have one or more crystals
                between the sample and detector.                            We define here
                the field ``SDD`` to document without             ambiguity the distance
                between sample and detector.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-sdd-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-sdd-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_SDD = SubSection(sub_section=nxp_SDD.m_def,repeats=True)
                class nxp_slit_length(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='slit_length',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_PER_LENGTH',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Slit length of the instrument for this detector,              expressed in
                the same units as :math:`Q`.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-slit-length-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-slit-length-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_slit_length = SubSection(sub_section=nxp_slit_length.m_def,repeats=True)
                class nxp_x_position(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='x_position',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Location of the detector in :math:`x`
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-x-position-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-x-position-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_x_position = SubSection(sub_section=nxp_x_position.m_def,repeats=True)
                class nxp_y_position(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='y_position',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Location of the detector in :math:`y`
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-y-position-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-y-position-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_y_position = SubSection(sub_section=nxp_y_position.m_def,repeats=True)
                class nxp_roll(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='roll',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Rotation of the detector about the :math:`z` axis (roll)
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-roll-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-roll-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_roll = SubSection(sub_section=nxp_roll.m_def,repeats=True)
                class nxp_pitch(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='pitch',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Rotation of the detector about the :math:`x` axis (roll)
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-pitch-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-pitch-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_pitch = SubSection(sub_section=nxp_pitch.m_def,repeats=True)
                class nxp_yaw(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='yaw',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Rotation of the detector about the :math:`y` axis (yaw)
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-yaw-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-yaw-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_yaw = SubSection(sub_section=nxp_yaw.m_def,repeats=True)
                class nxp_beam_center_x(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='beam_center_x',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Position of the beam center on the detector.                          This
                is the x position where the direct beam would hit the detector plane.
                This is a length and can be outside of the actual             detector.
                The length can be in physical units or pixels             as documented by
                the units attribute. The value can be any             real number
                (positive, zero, or negative).
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-beam-center-x-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-beam-center-x-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_beam_center_x = SubSection(sub_section=nxp_beam_center_x.m_def,repeats=True)
                class nxp_beam_center_y(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='beam_center_y',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Position of the beam center on the detector.                          This
                is the y position where the direct beam would hit the detector plane.
                This is a length and can be outside of the actual             detector.
                The length can be in physical units or pixels             as documented by
                the units attribute. The value can be any             real number
                (positive, zero, or negative).
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-beam-center-y-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-beam-center-y-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_beam_center_y = SubSection(sub_section=nxp_beam_center_y.m_def,repeats=True)
                class nxp_x_pixel_size(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='x_pixel_size',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Size of each detector pixel. If it is scalar all pixels are the same size
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-x-pixel-size-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-x-pixel-size-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_x_pixel_size = SubSection(sub_section=nxp_x_pixel_size.m_def,repeats=True)
                class nxp_y_pixel_size(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='y_pixel_size',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Size of each detector pixel. If it is scalar all pixels are the same size
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-y-pixel-size-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-y-pixel-size-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_y_pixel_size = SubSection(sub_section=nxp_y_pixel_size.m_def,repeats=True)
            nxp_DETECTOR = SubSection(sub_section=nxp_DETECTOR.m_def,repeats=True)
            class nxp_SOURCE(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXsource',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Description of the radiation source.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-group',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_canSAS_class(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='canSAS_class',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Official canSAS group: :index:`NXcanSAS (applications); SASsource`
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-cansas-class-attribute
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-cansas-class-attribute',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: SASsource''',
                        default='SASsource',
                    )
                nxp_canSAS_class = SubSection(sub_section=nxp_canSAS_class.m_def,repeats=True)
                class nxp_radiation(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='radiation',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_deprecated= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='Use either (or both) ``probe`` or ``type`` fields from ``NXsource`` (issue #765)',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Name of the radiation used.             Note that this is **not** the name
                of the facility!

                This field contains a value from either the              ``probe`` or
                ``type`` fields in :ref:`NXsource`. Thus,              it is redundant
                with existing NeXus structure.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-radiation-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-radiation-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_deprecated= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: Spallation Neutron Source,Pulsed Reactor Neutron
                Source,Reactor Neutron Source,Synchrotron X-ray Source,Pulsed Muon
                Source,Rotating Anode X-ray,Fixed Tube X-ray,UV Laser,Free-Electron
                Laser,Optical Laser,Ion Source,UV Plasma
                Source,neutron,x-ray,muon,electron,ultraviolet,visible
                light,positron,proton''',
                        default='Spallation Neutron Source,Pulsed Reactor Neutron Source,Reactor Neutron Source,Synchrotron X-ray Source,Pulsed Muon Source,Rotating Anode X-ray,Fixed Tube X-ray,UV Laser,Free-Electron Laser,Optical Laser,Ion Source,UV Plasma Source,neutron,x-ray,muon,electron,ultraviolet,visible light,positron,proton',
                    )
                nxp_radiation = SubSection(sub_section=nxp_radiation.m_def,repeats=True)
                class nxp_beam_shape(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='beam_shape',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Text description of the shape of the beam (incident on the sample).
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-beam-shape-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-beam-shape-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_beam_shape = SubSection(sub_section=nxp_beam_shape.m_def,repeats=True)
                class nxp_incident_wavelength(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='incident_wavelength',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_WAVELENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    wavelength (:math:`\\lambda`) of radiation incident on the sample
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-incident-wavelength-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-incident-wavelength-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_incident_wavelength = SubSection(sub_section=nxp_incident_wavelength.m_def,repeats=True)
                class nxp_wavelength_min(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='wavelength_min',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_WAVELENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Some facilities specify wavelength using a range.              This is the
                lowest wavelength in such a range.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-wavelength-min-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-wavelength-min-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_wavelength_min = SubSection(sub_section=nxp_wavelength_min.m_def,repeats=True)
                class nxp_wavelength_max(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='wavelength_max',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_WAVELENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Some facilities specify wavelength using a range.              This is the
                highest wavelength in such a range.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-wavelength-max-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-wavelength-max-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_wavelength_max = SubSection(sub_section=nxp_wavelength_max.m_def,repeats=True)
                class nxp_incident_wavelength_spread(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='incident_wavelength_spread',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_WAVELENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Some facilities specify wavelength using a range.              This is the
                width (FWHM) of such a range.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-incident-wavelength-spread-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-incident-wavelength-spread-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_incident_wavelength_spread = SubSection(sub_section=nxp_incident_wavelength_spread.m_def,repeats=True)
                class nxp_beam_size_x(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='beam_size_x',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Size of the incident beam along the x axis.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-beam-size-x-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-beam-size-x-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_beam_size_x = SubSection(sub_section=nxp_beam_size_x.m_def,repeats=True)
                class nxp_beam_size_y(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='beam_size_y',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Size of the incident beam along the y axis.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-beam-size-y-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-beam-size-y-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_beam_size_y = SubSection(sub_section=nxp_beam_size_y.m_def,repeats=True)
            nxp_SOURCE = SubSection(sub_section=nxp_SOURCE.m_def,repeats=True)
        nxp_INSTRUMENT = SubSection(sub_section=nxp_INSTRUMENT.m_def,repeats=True)
        class nxp_SAMPLE(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='0',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Description of the sample.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-group',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_canSAS_class(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='canSAS_class',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Official canSAS group: :index:`NXcanSAS (applications); SASsample`
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-cansas-class-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-cansas-class-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                nxp_enumeration= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Possible values: SASsample''',
                    default='SASsample',
                )
            nxp_canSAS_class = SubSection(sub_section=nxp_canSAS_class.m_def,repeats=True)
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                **ID**: Text string that identifies this sample.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_thickness(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='thickness',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_LENGTH',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Thickness of this sample
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-thickness-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-thickness-field',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_thickness = SubSection(sub_section=nxp_thickness.m_def,repeats=True)
            class nxp_transmission(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='transmission',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_DIMENSIONLESS',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Transmission (:math:`I/I_0`) of this sample.            There is no
                *units* attribute as this number is dimensionless.
                Note: the ability to store a transmission *spectrum*,            instead
                of a single value, is provided elsewhere in the structure,            in
                the *SAStransmission_spectrum* element.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-transmission-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-transmission-field',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_transmission = SubSection(sub_section=nxp_transmission.m_def,repeats=True)
            class nxp_temperature(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='temperature',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_TEMPERATURE',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Temperature of this sample.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-temperature-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-temperature-field',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_temperature = SubSection(sub_section=nxp_temperature.m_def,repeats=True)
            class nxp_details(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='details',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='unbounded',
                )
                nxp_nameType= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='any',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Any additional sample details.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-details-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-details-field',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_details = SubSection(sub_section=nxp_details.m_def,repeats=True)
            class nxp_x_position(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='x_position',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_LENGTH',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Location of the sample in :math:`x`
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-x-position-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-x-position-field',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_x_position = SubSection(sub_section=nxp_x_position.m_def,repeats=True)
            class nxp_y_position(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='y_position',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_LENGTH',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Location of the sample in :math:`y`
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-y-position-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-y-position-field',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_y_position = SubSection(sub_section=nxp_y_position.m_def,repeats=True)
            class nxp_roll(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='roll',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Rotation of the sample about the :math:`z` axis (roll)
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-roll-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-roll-field',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_roll = SubSection(sub_section=nxp_roll.m_def,repeats=True)
            class nxp_pitch(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='pitch',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Rotation of the sample about the :math:`x` axis (roll)
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-pitch-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-pitch-field',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_pitch = SubSection(sub_section=nxp_pitch.m_def,repeats=True)
            class nxp_yaw(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='yaw',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Rotation of the sample about the :math:`y` axis (yaw)
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-yaw-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-yaw-field',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_yaw = SubSection(sub_section=nxp_yaw.m_def,repeats=True)
        nxp_SAMPLE = SubSection(sub_section=nxp_SAMPLE.m_def,repeats=True)
        class nxp_PROCESS(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXprocess.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXprocess',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='0',
            )
            nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='unbounded',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Description of a processing or analysis step.                  Add
                additional fields as needed to describe value(s) of any          variable,
                parameter, or term related to the *SASprocess* step.         Be sure to
                include *units* attributes for all numerical fields.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-group',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_canSAS_class(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='canSAS_class',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Official canSAS group: :index:`NXcanSAS (applications); SASprocess`
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-cansas-class-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-cansas-class-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                nxp_enumeration= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Possible values: SASprocess''',
                    default='SASprocess',
                )
            nxp_canSAS_class = SubSection(sub_section=nxp_canSAS_class.m_def,repeats=True)
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Optional name for this data processing or analysis step
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-name-field',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_date(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='date',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_DATE_TIME',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Optional date for this data processing or analysis step. [#iso8601]_
                .. [#iso8601]  ISO-8601 standard time representation.
                NeXus dates and times are reported in ISO-8601
                (e.g., ``yyyy-mm-ddThh:mm:ss``)                                  or
                modified ISO-8601 (e.g., ``yyyy-mm-dd hh:mm:ss``).
                See: http://www.w3.org/TR/NOTE-datetime
                or http://en.wikipedia.org/wiki/ISO_8601 for more details.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-date-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-date-field',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_date = SubSection(sub_section=nxp_date.m_def,repeats=True)
            class nxp_description(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='description',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Optional description for this data processing or analysis step
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-description-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-description-field',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
            class nxp_term(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='term',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='unbounded',
                )
                nxp_nameType= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='any',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Specifies the value of a single variable, parameter,            or term
                (while defined here as a string, it could be a number)            related
                to the *SASprocess* step.                      Note:           The name
                *term* is not required, it could take any name,           as long as the
                name is unique within this group.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-term-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-term-field',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_term = SubSection(sub_section=nxp_term.m_def,repeats=True)
            class nxp_NOTE(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXnote',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='unbounded',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Any additional notes or subprocessing steps will be documented here.
                An **NXnote** group can be added to any NeXus group at or below the
                **NXentry** group.  It is shown here as a suggestion of a good place
                to *consider* its use.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-note-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-note-group',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_NOTE = SubSection(sub_section=nxp_NOTE.m_def,repeats=True)
            class nxp_COLLECTION(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXcollection.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXcollection',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='unbounded',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Describes anything about *SASprocess* that is not already described.
                Any content not defined in the canSAS standard can be placed at this
                point.

                Note:           The name of this group is flexible, it could take any
                name,           as long as it is unique within the **NXprocess** group.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-collection-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-collection-group',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_canSAS_class(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='canSAS_class',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Official canSAS group: :index:`NXcanSAS (applications); SASprocessnote`
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-collection-cansas-class-attribute
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-collection-cansas-class-attribute',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: SASprocessnote''',
                        default='SASprocessnote',
                    )
                nxp_canSAS_class = SubSection(sub_section=nxp_canSAS_class.m_def,repeats=True)
            nxp_COLLECTION = SubSection(sub_section=nxp_COLLECTION.m_def,repeats=True)
        nxp_PROCESS = SubSection(sub_section=nxp_PROCESS.m_def,repeats=True)
        class nxp_COLLECTION(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXcollection.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXcollection',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='0',
            )
            nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='unbounded',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Free form description of anything not covered by other elements.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-collection-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-collection-group',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_canSAS_class(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='canSAS_class',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Official canSAS group: :index:`NXcanSAS (applications); SASnote`
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-collection-cansas-class-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-collection-cansas-class-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                nxp_enumeration= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Possible values: SASnote''',
                    default='SASnote',
                )
            nxp_canSAS_class = SubSection(sub_section=nxp_canSAS_class.m_def,repeats=True)
        nxp_COLLECTION = SubSection(sub_section=nxp_COLLECTION.m_def,repeats=True)
        class nxp_TRANSMISSION_SPECTRUM(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='TRANSMISSION_SPECTRUM',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='0',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-group',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_canSAS_class(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='canSAS_class',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Official canSAS group: :index:`NXcanSAS (applications);
                SAStransmission_spectrum`
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-cansas-class-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-cansas-class-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                nxp_enumeration= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Possible values: SAStransmission_spectrum''',
                    default='SAStransmission_spectrum',
                )
            nxp_canSAS_class = SubSection(sub_section=nxp_canSAS_class.m_def,repeats=True)
            class nxp_signal(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='signal',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Name of the default data field.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-signal-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-signal-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                nxp_enumeration= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Possible values: T''',
                    default='T',
                )
            nxp_signal = SubSection(sub_section=nxp_signal.m_def,repeats=True)
            class nxp_T_axes(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='T_axes',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-t-axes-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-t-axes-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                nxp_enumeration= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Possible values: T''',
                    default='T',
                )
            nxp_T_axes = SubSection(sub_section=nxp_T_axes.m_def,repeats=True)
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Identify what type of spectrum is being described.           It is
                expected that this value will take either of these two values:
                ======  ==============================================           value
                meaning           ======  ==============================================
                sample  measurement with the sample and container           can
                measurement with just the container           ======
                ==============================================
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-name-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-name-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_timestamp(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='timestamp',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_DATE_TIME',
                )
                nxp_optional= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='true',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                ISO-8601 time [#iso8601]_
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-timestamp-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-timestamp-attribute',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_timestamp = SubSection(sub_section=nxp_timestamp.m_def,repeats=True)
            class nxp_lambda(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='lambda',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_WAVELENGTH',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Wavelength of the radiation.                      This array is of the
                same shape as ``T`` and ``Tdev``.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-lambda-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-lambda-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_lambda = SubSection(sub_section=nxp_lambda.m_def,repeats=True)
            class nxp_T(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='T',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_DIMENSIONLESS',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Transmission values (:math:`I/I_0`)           as a function of wavelength.
                This array is of the same shape as ``lambda`` and ``Tdev``.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-t-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-t-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_uncertainties(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='uncertainties',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Names the dataset (in this SASdata group) that provides the
                uncertainty of each transmission :math:`T` to be used for data analysis.
                The name of the dataset containing the :math:`T` uncertainty
                is expected to be ``Tdev``.                          .. comment
                see: https://github.com/canSAS-org/canSAS2012/issues/7
                Typically:                              @uncertainties="Tdev"
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-t-uncertainties-attribute
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-t-uncertainties-attribute',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_uncertainties = SubSection(sub_section=nxp_uncertainties.m_def,repeats=True)
            nxp_T = SubSection(sub_section=nxp_T.m_def,repeats=True)
            class nxp_Tdev(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='Tdev',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_DIMENSIONLESS',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                .. index:: NXcanSAS (applications); Tdev                      Estimated
                uncertainty (usually standard deviation)           in :math:`T`.  Must
                have the same units as :math:`T`.                      This is the field
                is named in the *uncertainties* attribute of *T*, as in::
                T/@uncertainties="Tdev"                          This array is of the same
                shape as ``lambda`` and ``T``.
                https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-tdev-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-tdev-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_Tdev = SubSection(sub_section=nxp_Tdev.m_def,repeats=True)
        nxp_TRANSMISSION_SPECTRUM = SubSection(sub_section=nxp_TRANSMISSION_SPECTRUM.m_def,repeats=True)
    nxp_ENTRY = SubSection(sub_section=nxp_ENTRY.m_def,repeats=True)



class NXreftof(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXreftof',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        This is an application definition for raw data from a TOF reflectometer.
        https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_entry(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='entry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-title-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-title-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_start_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-start-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-start-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start_time = SubSection(sub_section=nxp_start_time.m_def,repeats=True)
        class nxp_end_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='end_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-end-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-end-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_end_time = SubSection(sub_section=nxp_end_time.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXreftof''',
                default='NXreftof',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_instrument(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='instrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_chopper(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdisk_chopper.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdisk_chopper',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='chopper',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-chopper-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-chopper-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_distance(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='distance',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Distance between chopper and sample
                https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-chopper-distance-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-chopper-distance-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
            nxp_chopper = SubSection(sub_section=nxp_chopper.m_def,repeats=True)
            class nxp_detector(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='detector',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_data(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_signal= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-data-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-data-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
                class nxp_time_of_flight(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='time_of_flight',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_TIME_OF_FLIGHT',
                    )
                    nxp_axis= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='3',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Array of time values for each bin in a time-of-flight
                measurement
                https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-time-of-flight-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-time-of-flight-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_time_of_flight = SubSection(sub_section=nxp_time_of_flight.m_def,repeats=True)
                class nxp_distance(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='distance',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-distance-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-distance-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
                class nxp_polar_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='polar_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-polar-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-polar-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_polar_angle = SubSection(sub_section=nxp_polar_angle.m_def,repeats=True)
                class nxp_x_pixel_size(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='x_pixel_size',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-x-pixel-size-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-x-pixel-size-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_x_pixel_size = SubSection(sub_section=nxp_x_pixel_size.m_def,repeats=True)
                class nxp_y_pixel_size(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='y_pixel_size',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-y-pixel-size-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-y-pixel-size-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_y_pixel_size = SubSection(sub_section=nxp_y_pixel_size.m_def,repeats=True)
            nxp_detector = SubSection(sub_section=nxp_detector.m_def,repeats=True)
        nxp_instrument = SubSection(sub_section=nxp_instrument.m_def,repeats=True)
        class nxp_sample(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='sample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Descriptive name of sample
                https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-sample-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-sample-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_rotation_angle(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='rotation_angle',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-sample-rotation-angle-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-sample-rotation-angle-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_rotation_angle = SubSection(sub_section=nxp_rotation_angle.m_def,repeats=True)
        nxp_sample = SubSection(sub_section=nxp_sample.m_def,repeats=True)
        class nxp_control(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXmonitor',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='control',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-control-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-control-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_mode(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='mode',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Count to a preset value based on either clock time (timer)             or
                received monitor counts (monitor).
                https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-control-mode-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-control-mode-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                nxp_enumeration= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Possible values: monitor,timer''',
                    default='monitor,timer',
                )
            nxp_mode = SubSection(sub_section=nxp_mode.m_def,repeats=True)
            class nxp_preset(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='preset',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANY',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                preset value for time or monitor
                https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-control-preset-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-control-preset-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_preset = SubSection(sub_section=nxp_preset.m_def,repeats=True)
            class nxp_integral(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='integral',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_INT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Total integral monitor counts
                https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-control-integral-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-control-integral-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_integral = SubSection(sub_section=nxp_integral.m_def,repeats=True)
            class nxp_time_of_flight(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='time_of_flight',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_TIME_OF_FLIGHT',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Time channels
                https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-control-time-of-flight-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-control-time-of-flight-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_time_of_flight = SubSection(sub_section=nxp_time_of_flight.m_def,repeats=True)
            class nxp_data(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='data',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_INT',
                )
                nxp_signal= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Monitor counts in each time channel
                https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-control-data-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-control-data-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
        nxp_control = SubSection(sub_section=nxp_control.m_def,repeats=True)
        class nxp_data(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='data',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-data-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-data-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
    nxp_entry = SubSection(sub_section=nxp_entry.m_def,repeats=True)



class NXrefscan(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXrefscan',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                This is an application definition for a monochromatic scanning reflectometer.

        It does not have the information to calculate the resolution     since it does not
        have any apertures.
        https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_entry(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='entry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-title-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-title-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_start_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-start-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-start-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start_time = SubSection(sub_section=nxp_start_time.m_def,repeats=True)
        class nxp_end_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='end_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-end-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-end-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_end_time = SubSection(sub_section=nxp_end_time.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXrefscan''',
                default='NXrefscan',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_instrument(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='instrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_SOURCE(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXsource',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-source-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-source-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_type(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='type',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-source-type-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-source-type-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)
                class nxp_name(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='name',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-source-name-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-source-name-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
                class nxp_probe(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='probe',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-source-probe-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-source-probe-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: neutron,x-ray,electron''',
                        default='neutron,x-ray,electron',
                    )
                nxp_probe = SubSection(sub_section=nxp_probe.m_def,repeats=True)
            nxp_SOURCE = SubSection(sub_section=nxp_SOURCE.m_def,repeats=True)
            class nxp_monochromator(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXmonochromator.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXmonochromator',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='monochromator',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-monochromator-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-monochromator-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_wavelength(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='wavelength',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_WAVELENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-monochromator-wavelength-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-monochromator-wavelength-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_wavelength = SubSection(sub_section=nxp_wavelength.m_def,repeats=True)
            nxp_monochromator = SubSection(sub_section=nxp_monochromator.m_def,repeats=True)
            class nxp_DETECTOR(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-detector-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-detector-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_data(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_signal= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-detector-data-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-detector-data-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
                class nxp_polar_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='polar_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_axis= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-detector-polar-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-detector-polar-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_polar_angle = SubSection(sub_section=nxp_polar_angle.m_def,repeats=True)
            nxp_DETECTOR = SubSection(sub_section=nxp_DETECTOR.m_def,repeats=True)
        nxp_instrument = SubSection(sub_section=nxp_instrument.m_def,repeats=True)
        class nxp_sample(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='sample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Descriptive name of sample
                https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-sample-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-sample-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_rotation_angle(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='rotation_angle',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-sample-rotation-angle-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-sample-rotation-angle-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_rotation_angle = SubSection(sub_section=nxp_rotation_angle.m_def,repeats=True)
        nxp_sample = SubSection(sub_section=nxp_sample.m_def,repeats=True)
        class nxp_control(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXmonitor',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='control',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-control-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-control-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_mode(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='mode',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Count to a preset value based on either clock time (timer)             or
                received monitor counts (monitor).
                https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-control-mode-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-control-mode-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                nxp_enumeration= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Possible values: monitor,timer''',
                    default='monitor,timer',
                )
            nxp_mode = SubSection(sub_section=nxp_mode.m_def,repeats=True)
            class nxp_preset(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='preset',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                preset value for time or monitor
                https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-control-preset-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-control-preset-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_preset = SubSection(sub_section=nxp_preset.m_def,repeats=True)
            class nxp_data(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='data',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANY',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Monitor counts for each step
                https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-control-data-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-control-data-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
        nxp_control = SubSection(sub_section=nxp_control.m_def,repeats=True)
        class nxp_data(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='data',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-data-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-data-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
    nxp_entry = SubSection(sub_section=nxp_entry.m_def,repeats=True)



class NXsastof(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXsastof',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                raw, 2-D SAS data with an area detector with a time-of-flight source          It
        covers all raw data from any SAS techniques     that use an area detector     at a
        time-of-flight source.
        https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_ENTRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_entry(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='entry',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            NeXus convention is to use "entry1", "entry2", ... for analysis software
                to locate each entry
                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-entry-attribute
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-entry-attribute',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_entry = SubSection(sub_section=nxp_entry.m_def,repeats=True)
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-title-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-title-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_start_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-start-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-start-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start_time = SubSection(sub_section=nxp_start_time.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXsastof''',
                default='NXsastof',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_instrument(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='instrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Name of the instrument actually used to perform the experiment
                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_source(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXsource',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='source',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-source-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-source-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_type(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='type',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    type of radiation source
                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-source-type-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-source-type-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)
                class nxp_name(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='name',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Name of the radiation source
                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-source-name-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-source-name-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
                class nxp_probe(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='probe',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-source-probe-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-source-probe-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: neutron,x-ray''',
                        default='neutron,x-ray',
                    )
                nxp_probe = SubSection(sub_section=nxp_probe.m_def,repeats=True)
            nxp_source = SubSection(sub_section=nxp_source.m_def,repeats=True)
            class nxp_collimator(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXcollimator.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXcollimator',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='collimator',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-collimator-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-collimator-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_geometry(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NXgeometry',
                    )
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='geometry',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-collimator-geometry-group
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-collimator-geometry-group',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    class nxp_shape(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NXshape.m_def,repeats=True)
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NXshape',
                        )
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='shape',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-collimator-geometry-shape-group
                .''',
                            default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-collimator-geometry-shape-group',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                        class nxp_shape(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='shape',
                            )
                            nxp_type= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_CHAR',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-collimator-geometry-shape-shape-field
                .''',
                                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-collimator-geometry-shape-shape-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                            nxp_enumeration= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            Possible values: nxcylinder,nxbox''',
                                default='nxcylinder,nxbox',
                            )
                        nxp_shape = SubSection(sub_section=nxp_shape.m_def,repeats=True)
                        class nxp_size(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='size',
                            )
                            nxp_type= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_FLOAT',
                            )
                            nxp_units= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_LENGTH',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            The collimation length
                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-collimator-geometry-shape-size-field
                .''',
                                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-collimator-geometry-shape-size-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_size = SubSection(sub_section=nxp_size.m_def,repeats=True)
                    nxp_shape = SubSection(sub_section=nxp_shape.m_def,repeats=True)
                nxp_geometry = SubSection(sub_section=nxp_geometry.m_def,repeats=True)
            nxp_collimator = SubSection(sub_section=nxp_collimator.m_def,repeats=True)
            class nxp_detector(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='detector',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_data(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_signal= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    This is area detector data, of number of x-pixel versus             number
                of y-pixels. Since the beam center is to be             determined as a
                step of data reduction, it is not necessary             to document or
                assume the position of the beam center in             acquired data.
                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-data-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-data-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
                class nxp_time_of_flight(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='time_of_flight',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_TIME_OF_FLIGHT',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-time-of-flight-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-time-of-flight-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_time_of_flight = SubSection(sub_section=nxp_time_of_flight.m_def,repeats=True)
                class nxp_distance(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='distance',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    The distance between detector and sample
                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-distance-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-distance-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
                class nxp_x_pixel_size(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='x_pixel_size',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Physical size of a pixel in x-direction
                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-x-pixel-size-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-x-pixel-size-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_x_pixel_size = SubSection(sub_section=nxp_x_pixel_size.m_def,repeats=True)
                class nxp_y_pixel_size(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='y_pixel_size',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Size of a pixel in y direction
                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-y-pixel-size-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-y-pixel-size-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_y_pixel_size = SubSection(sub_section=nxp_y_pixel_size.m_def,repeats=True)
                class nxp_polar_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='polar_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-polar-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-polar-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_polar_angle = SubSection(sub_section=nxp_polar_angle.m_def,repeats=True)
                class nxp_azimuthal_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='azimuthal_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-azimuthal-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-azimuthal-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_azimuthal_angle = SubSection(sub_section=nxp_azimuthal_angle.m_def,repeats=True)
                class nxp_rotation_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='rotation_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-rotation-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-rotation-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_rotation_angle = SubSection(sub_section=nxp_rotation_angle.m_def,repeats=True)
                class nxp_aequatorial_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='aequatorial_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-aequatorial-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-aequatorial-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_aequatorial_angle = SubSection(sub_section=nxp_aequatorial_angle.m_def,repeats=True)
                class nxp_beam_center_x(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='beam_center_x',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    This is the x position where the direct beam would hit the detector. This
                is a                        length, not a pixel position, and can be
                outside of the actual detector.
                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-beam-center-x-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-beam-center-x-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_beam_center_x = SubSection(sub_section=nxp_beam_center_x.m_def,repeats=True)
                class nxp_beam_center_y(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='beam_center_y',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    This is the y position where the direct beam would hit the detector. This
                is a                          length, not a pixel position, and can be
                outside of the actual detector.
                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-beam-center-y-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-beam-center-y-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_beam_center_y = SubSection(sub_section=nxp_beam_center_y.m_def,repeats=True)
            nxp_detector = SubSection(sub_section=nxp_detector.m_def,repeats=True)
        nxp_instrument = SubSection(sub_section=nxp_instrument.m_def,repeats=True)
        class nxp_sample(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='sample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Descriptive name of sample
                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-sample-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-sample-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_aequatorial_angle(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='aequatorial_angle',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-sample-aequatorial-angle-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-sample-aequatorial-angle-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_aequatorial_angle = SubSection(sub_section=nxp_aequatorial_angle.m_def,repeats=True)
        nxp_sample = SubSection(sub_section=nxp_sample.m_def,repeats=True)
        class nxp_control(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXmonitor',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='control',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-control-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-control-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_mode(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='mode',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Count to a preset value based on either clock time (timer) or received
                monitor counts (monitor).
                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-control-mode-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-control-mode-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                nxp_enumeration= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Possible values: monitor,timer''',
                    default='monitor,timer',
                )
            nxp_mode = SubSection(sub_section=nxp_mode.m_def,repeats=True)
            class nxp_preset(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='preset',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                preset value for time or monitor
                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-control-preset-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-control-preset-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_preset = SubSection(sub_section=nxp_preset.m_def,repeats=True)
            class nxp_data(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='data',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_INT',
                )
                nxp_primary= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_signal= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-control-data-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-control-data-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
            class nxp_time_of_flight(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='time_of_flight',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_TIME_OF_FLIGHT',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-control-time-of-flight-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-control-time-of-flight-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_time_of_flight = SubSection(sub_section=nxp_time_of_flight.m_def,repeats=True)
        nxp_control = SubSection(sub_section=nxp_control.m_def,repeats=True)
        class nxp_data(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='data',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-data-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-data-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
    nxp_ENTRY = SubSection(sub_section=nxp_ENTRY.m_def,repeats=True)



class NXxlaueplate(NXxlaue):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXxlaueplate',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXxlaue',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                raw data from a single crystal Laue camera, extends :ref:`NXxlaue`          This
        is the application definition for raw data from a single crystal Laue      camera
        with an image plate as a detector. It extends :ref:`NXxlaue`.
        https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate
        .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_entry(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='entry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXxlaueplate''',
                default='NXxlaueplate',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_instrument(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='instrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_detector(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='detector',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate-entry-instrument-detector-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate-entry-instrument-detector-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_diameter(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='diameter',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    The diameter of a cylindrical detector
                https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate-entry-instrument-detector-diameter-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate-entry-instrument-detector-diameter-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_diameter = SubSection(sub_section=nxp_diameter.m_def,repeats=True)
            nxp_detector = SubSection(sub_section=nxp_detector.m_def,repeats=True)
        nxp_instrument = SubSection(sub_section=nxp_instrument.m_def,repeats=True)
    nxp_entry = SubSection(sub_section=nxp_entry.m_def,repeats=True)



class NXsqom(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXsqom',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                This is the application definition for S(Q,OM) processed data.           As this
        kind of data is in     general not on a rectangular grid after data reduction, it
        is stored as Q,E positions plus their     intensity, table like. It is the task of
        a possible visualisation program to regrid this data in     a sensible way.
        https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_ENTRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_entry(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='entry',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-entry-attribute
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-entry-attribute',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_entry = SubSection(sub_section=nxp_entry.m_def,repeats=True)
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-title-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-title-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXsqom''',
                default='NXsqom',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_instrument(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='instrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Name of the instrument from which this data was reduced.
                https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-instrument-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-instrument-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_SOURCE(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXsource',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-instrument-source-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-instrument-source-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_type(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='type',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-instrument-source-type-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-instrument-source-type-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)
                class nxp_name(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='name',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-instrument-source-name-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-instrument-source-name-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
                class nxp_probe(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='probe',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-instrument-source-probe-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-instrument-source-probe-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: neutron,x-ray,electron''',
                        default='neutron,x-ray,electron',
                    )
                nxp_probe = SubSection(sub_section=nxp_probe.m_def,repeats=True)
            nxp_SOURCE = SubSection(sub_section=nxp_SOURCE.m_def,repeats=True)
        nxp_instrument = SubSection(sub_section=nxp_instrument.m_def,repeats=True)
        class nxp_SAMPLE(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Descriptive name of sample
                https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-sample-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-sample-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
        nxp_SAMPLE = SubSection(sub_section=nxp_SAMPLE.m_def,repeats=True)
        class nxp_reduction(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXprocess.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXprocess',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='reduction',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-reduction-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-reduction-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_program(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='program',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-reduction-program-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-reduction-program-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_program = SubSection(sub_section=nxp_program.m_def,repeats=True)
            class nxp_version(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='version',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-reduction-version-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-reduction-version-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_version = SubSection(sub_section=nxp_version.m_def,repeats=True)
            class nxp_input(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXparameters.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXparameters',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='input',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Input parameters for the reduction program used
                https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-reduction-input-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-reduction-input-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_filenames(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='filenames',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_CHAR',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Raw data files used to generate this I(Q)
                https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-reduction-input-filenames-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-reduction-input-filenames-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_filenames = SubSection(sub_section=nxp_filenames.m_def,repeats=True)
            nxp_input = SubSection(sub_section=nxp_input.m_def,repeats=True)
            class nxp_output(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXparameters.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXparameters',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='output',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Eventual output parameters from the data reduction program used
                https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-reduction-output-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-reduction-output-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_output = SubSection(sub_section=nxp_output.m_def,repeats=True)
        nxp_reduction = SubSection(sub_section=nxp_reduction.m_def,repeats=True)
        class nxp_DATA(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-data-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-data-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_data(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='data',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_INT',
                )
                nxp_signal= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                This is the intensity for each point in QE
                https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-data-data-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-data-data-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
            class nxp_qx(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='qx',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_WAVENUMBER',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Positions for the first dimension of Q
                https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-data-qx-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-data-qx-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_qx = SubSection(sub_section=nxp_qx.m_def,repeats=True)
            class nxp_qy(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='qy',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_WAVENUMBER',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Positions for the the second dimension of Q
                https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-data-qy-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-data-qy-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_qy = SubSection(sub_section=nxp_qy.m_def,repeats=True)
            class nxp_qz(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='qz',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_WAVENUMBER',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Positions for the the third dimension of Q
                https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-data-qz-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-data-qz-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_qz = SubSection(sub_section=nxp_qz.m_def,repeats=True)
            class nxp_en(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='en',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ENERGY',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Values for the energy transfer for each point
                https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-data-en-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-data-en-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_en = SubSection(sub_section=nxp_en.m_def,repeats=True)
        nxp_DATA = SubSection(sub_section=nxp_DATA.m_def,repeats=True)
    nxp_ENTRY = SubSection(sub_section=nxp_ENTRY.m_def,repeats=True)



class NXsas(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXsas',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                raw, monochromatic 2-D SAS data with an area detector

        This is an application definition for raw data (not processed or reduced data)
        from a 2-D small angle scattering instrument collected with a monochromatic
        beam and an area detector. It is meant to be suitable both for neutron SANS
        and X-ray SAXS data.           It covers all raw data from any monochromatic SAS
        techniques that     use an area detector: SAS, WSAS, grazing incidence, GISAS

        It covers all raw data from any SAS techniques     that use an area detector
        and a monochromatic beam.
        https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_ENTRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_entry(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='entry',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            NeXus convention is to use ``entry1``, ``entry2``, ...
                for analysis software to locate each entry
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-entry-attribute
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-entry-attribute',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_entry = SubSection(sub_section=nxp_entry.m_def,repeats=True)
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-title-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-title-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_start_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-start-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-start-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start_time = SubSection(sub_section=nxp_start_time.m_def,repeats=True)
        class nxp_end_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='end_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-end-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-end-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_end_time = SubSection(sub_section=nxp_end_time.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXsas''',
                default='NXsas',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_instrument(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='instrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Name of the instrument actually used to perform the experiment
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_source(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXsource',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='source',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-source-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-source-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_type(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='type',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    type of radiation source
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-source-type-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-source-type-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)
                class nxp_name(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='name',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Name of the radiation source
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-source-name-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-source-name-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
                class nxp_probe(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='probe',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-source-probe-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-source-probe-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: neutron,x-ray''',
                        default='neutron,x-ray',
                    )
                nxp_probe = SubSection(sub_section=nxp_probe.m_def,repeats=True)
            nxp_source = SubSection(sub_section=nxp_source.m_def,repeats=True)
            class nxp_monochromator(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXmonochromator.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXmonochromator',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='monochromator',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-monochromator-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-monochromator-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_wavelength(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='wavelength',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_WAVELENGTH',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    The wavelength of the radiation
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-monochromator-wavelength-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-monochromator-wavelength-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_wavelength = SubSection(sub_section=nxp_wavelength.m_def,repeats=True)
                class nxp_wavelength_spread(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='wavelength_spread',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    delta_lambda/lambda (:math:`\\Delta\\lambda/\\lambda`):
                Important for resolution calculations
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-monochromator-wavelength-spread-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-monochromator-wavelength-spread-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_wavelength_spread = SubSection(sub_section=nxp_wavelength_spread.m_def,repeats=True)
            nxp_monochromator = SubSection(sub_section=nxp_monochromator.m_def,repeats=True)
            class nxp_collimator(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXcollimator.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXcollimator',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='collimator',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-collimator-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-collimator-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_geometry(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NXgeometry',
                    )
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='geometry',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-collimator-geometry-group
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-collimator-geometry-group',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    class nxp_shape(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NXshape.m_def,repeats=True)
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NXshape',
                        )
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='shape',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-collimator-geometry-shape-group
                .''',
                            default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-collimator-geometry-shape-group',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                        class nxp_shape(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='shape',
                            )
                            nxp_type= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_CHAR',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-collimator-geometry-shape-shape-field
                .''',
                                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-collimator-geometry-shape-shape-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                            nxp_enumeration= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            Possible values: nxcylinder,nxbox''',
                                default='nxcylinder,nxbox',
                            )
                        nxp_shape = SubSection(sub_section=nxp_shape.m_def,repeats=True)
                        class nxp_size(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='size',
                            )
                            nxp_type= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_FLOAT',
                            )
                            nxp_units= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_LENGTH',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            The collimation length
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-collimator-geometry-shape-size-field
                .''',
                                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-collimator-geometry-shape-size-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_size = SubSection(sub_section=nxp_size.m_def,repeats=True)
                    nxp_shape = SubSection(sub_section=nxp_shape.m_def,repeats=True)
                nxp_geometry = SubSection(sub_section=nxp_geometry.m_def,repeats=True)
            nxp_collimator = SubSection(sub_section=nxp_collimator.m_def,repeats=True)
            class nxp_detector(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='detector',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_data(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_signal= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    This is area detector data, of number of x-pixel versus             number
                of y-pixels. Since the beam center is to be             determined as a
                step of data reduction, it is not necessary             to document or
                assume the position of the beam center in             acquired data.
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-data-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-data-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
                class nxp_distance(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='distance',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    The distance between detector and sample
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-distance-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-distance-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
                class nxp_x_pixel_size(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='x_pixel_size',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Physical size of a pixel in x-direction
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-x-pixel-size-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-x-pixel-size-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_x_pixel_size = SubSection(sub_section=nxp_x_pixel_size.m_def,repeats=True)
                class nxp_y_pixel_size(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='y_pixel_size',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Size of a pixel in y direction
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-y-pixel-size-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-y-pixel-size-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_y_pixel_size = SubSection(sub_section=nxp_y_pixel_size.m_def,repeats=True)
                class nxp_polar_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='polar_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-polar-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-polar-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_polar_angle = SubSection(sub_section=nxp_polar_angle.m_def,repeats=True)
                class nxp_azimuthal_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='azimuthal_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-azimuthal-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-azimuthal-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_azimuthal_angle = SubSection(sub_section=nxp_azimuthal_angle.m_def,repeats=True)
                class nxp_rotation_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='rotation_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-rotation-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-rotation-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_rotation_angle = SubSection(sub_section=nxp_rotation_angle.m_def,repeats=True)
                class nxp_aequatorial_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='aequatorial_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-aequatorial-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-aequatorial-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_aequatorial_angle = SubSection(sub_section=nxp_aequatorial_angle.m_def,repeats=True)
                class nxp_beam_center_x(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='beam_center_x',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    This is the x position where the direct beam would hit the detector. This
                is a                                 length, not a pixel position, and can
                be outside of the actual detector.
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-beam-center-x-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-beam-center-x-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_beam_center_x = SubSection(sub_section=nxp_beam_center_x.m_def,repeats=True)
                class nxp_beam_center_y(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='beam_center_y',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    This is the y position where the direct beam would hit the detector. This
                is a                                 length, not a pixel position, and can
                be outside of the actual detector.
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-beam-center-y-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-beam-center-y-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_beam_center_y = SubSection(sub_section=nxp_beam_center_y.m_def,repeats=True)
            nxp_detector = SubSection(sub_section=nxp_detector.m_def,repeats=True)
        nxp_instrument = SubSection(sub_section=nxp_instrument.m_def,repeats=True)
        class nxp_sample(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='sample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Descriptive name of sample
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-sample-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-sample-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_aequatorial_angle(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='aequatorial_angle',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-sample-aequatorial-angle-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-sample-aequatorial-angle-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_aequatorial_angle = SubSection(sub_section=nxp_aequatorial_angle.m_def,repeats=True)
        nxp_sample = SubSection(sub_section=nxp_sample.m_def,repeats=True)
        class nxp_control(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXmonitor',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='control',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-control-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-control-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_mode(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='mode',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Count to a preset value based on either clock time
                (timer) or received monitor counts (monitor).
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-control-mode-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-control-mode-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                nxp_enumeration= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Possible values: monitor,timer''',
                    default='monitor,timer',
                )
            nxp_mode = SubSection(sub_section=nxp_mode.m_def,repeats=True)
            class nxp_preset(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='preset',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                preset value for time or monitor
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-control-preset-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-control-preset-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_preset = SubSection(sub_section=nxp_preset.m_def,repeats=True)
            class nxp_integral(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='integral',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANY',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Total integral monitor counts
                https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-control-integral-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-control-integral-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_integral = SubSection(sub_section=nxp_integral.m_def,repeats=True)
        nxp_control = SubSection(sub_section=nxp_control.m_def,repeats=True)
        class nxp_data(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='data',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-data-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-data-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
    nxp_ENTRY = SubSection(sub_section=nxp_ENTRY.m_def,repeats=True)



class NXtas(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXtas',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                This is an application definition for a triple axis spectrometer.           It is
        for the trademark scan of the TAS, the Q-E scan.      For your alignment scans use
        the rules in :ref:`NXscan`.
        https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_entry(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='entry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-title-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-title-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_start_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-start-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-start-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start_time = SubSection(sub_section=nxp_start_time.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXtas''',
                default='NXtas',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_INSTRUMENT(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_SOURCE(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXsource',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-source-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-source-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_name(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='name',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-source-name-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-source-name-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
                class nxp_probe(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='probe',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-source-probe-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-source-probe-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: neutron,x-ray''',
                        default='neutron,x-ray',
                    )
                nxp_probe = SubSection(sub_section=nxp_probe.m_def,repeats=True)
            nxp_SOURCE = SubSection(sub_section=nxp_SOURCE.m_def,repeats=True)
            class nxp_monochromator(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXcrystal.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXcrystal',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='monochromator',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-monochromator-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-monochromator-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_ei(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='ei',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ENERGY',
                    )
                    nxp_axis= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-monochromator-ei-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-monochromator-ei-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_ei = SubSection(sub_section=nxp_ei.m_def,repeats=True)
                class nxp_rotation_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='rotation_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-monochromator-rotation-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-monochromator-rotation-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_rotation_angle = SubSection(sub_section=nxp_rotation_angle.m_def,repeats=True)
            nxp_monochromator = SubSection(sub_section=nxp_monochromator.m_def,repeats=True)
            class nxp_analyser(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXcrystal.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXcrystal',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='analyser',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-analyser-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-analyser-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_ef(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='ef',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ENERGY',
                    )
                    nxp_axis= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-analyser-ef-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-analyser-ef-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_ef = SubSection(sub_section=nxp_ef.m_def,repeats=True)
                class nxp_rotation_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='rotation_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-analyser-rotation-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-analyser-rotation-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_rotation_angle = SubSection(sub_section=nxp_rotation_angle.m_def,repeats=True)
                class nxp_polar_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='polar_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-analyser-polar-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-analyser-polar-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_polar_angle = SubSection(sub_section=nxp_polar_angle.m_def,repeats=True)
            nxp_analyser = SubSection(sub_section=nxp_analyser.m_def,repeats=True)
            class nxp_DETECTOR(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-detector-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-detector-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_data(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_signal= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-detector-data-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-detector-data-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
                class nxp_polar_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='polar_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-detector-polar-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-detector-polar-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_polar_angle = SubSection(sub_section=nxp_polar_angle.m_def,repeats=True)
            nxp_DETECTOR = SubSection(sub_section=nxp_DETECTOR.m_def,repeats=True)
        nxp_INSTRUMENT = SubSection(sub_section=nxp_INSTRUMENT.m_def,repeats=True)
        class nxp_SAMPLE(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Descriptive name of sample
                https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_qh(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='qh',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_DIMENSIONLESS',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-qh-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-qh-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_qh = SubSection(sub_section=nxp_qh.m_def,repeats=True)
            class nxp_qk(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='qk',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_DIMENSIONLESS',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-qk-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-qk-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_qk = SubSection(sub_section=nxp_qk.m_def,repeats=True)
            class nxp_ql(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='ql',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_DIMENSIONLESS',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-ql-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-ql-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_ql = SubSection(sub_section=nxp_ql.m_def,repeats=True)
            class nxp_en(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='en',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ENERGY',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-en-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-en-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_en = SubSection(sub_section=nxp_en.m_def,repeats=True)
            class nxp_rotation_angle(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='rotation_angle',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-rotation-angle-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-rotation-angle-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_rotation_angle = SubSection(sub_section=nxp_rotation_angle.m_def,repeats=True)
            class nxp_polar_angle(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='polar_angle',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-polar-angle-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-polar-angle-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_polar_angle = SubSection(sub_section=nxp_polar_angle.m_def,repeats=True)
            class nxp_sgu(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='sgu',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-sgu-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-sgu-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_sgu = SubSection(sub_section=nxp_sgu.m_def,repeats=True)
            class nxp_sgl(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='sgl',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-sgl-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-sgl-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_sgl = SubSection(sub_section=nxp_sgl.m_def,repeats=True)
            class nxp_unit_cell(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='unit_cell',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_LENGTH',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-unit-cell-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-unit-cell-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_unit_cell = SubSection(sub_section=nxp_unit_cell.m_def,repeats=True)
            class nxp_orientation_matrix(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='orientation_matrix',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_DIMENSIONLESS',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-orientation-matrix-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-orientation-matrix-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_orientation_matrix = SubSection(sub_section=nxp_orientation_matrix.m_def,repeats=True)
        nxp_SAMPLE = SubSection(sub_section=nxp_SAMPLE.m_def,repeats=True)
        class nxp_MONITOR(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXmonitor',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-monitor-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-monitor-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_mode(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='mode',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Count to a preset value based on either clock time (timer)             or
                received monitor counts (monitor).
                https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-monitor-mode-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-monitor-mode-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                nxp_enumeration= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Possible values: monitor,timer''',
                    default='monitor,timer',
                )
            nxp_mode = SubSection(sub_section=nxp_mode.m_def,repeats=True)
            class nxp_preset(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='preset',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                preset value for time or monitor
                https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-monitor-preset-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-monitor-preset-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_preset = SubSection(sub_section=nxp_preset.m_def,repeats=True)
            class nxp_data(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='data',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANY',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Total integral monitor counts
                https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-monitor-data-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-monitor-data-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
        nxp_MONITOR = SubSection(sub_section=nxp_MONITOR.m_def,repeats=True)
        class nxp_DATA(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            One of the ei,ef,qh,qk,ql,en should get a primary=1 attribute to denote
                the main scan axis
                https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-data-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-data-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_DATA = SubSection(sub_section=nxp_DATA.m_def,repeats=True)
    nxp_entry = SubSection(sub_section=nxp_entry.m_def,repeats=True)



class NXtofsingle(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXtofsingle',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        This is a application definition for raw data from a generic TOF instrument
        https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_entry(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='entry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-title-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-title-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_start_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-start-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-start-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start_time = SubSection(sub_section=nxp_start_time.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXtofsingle''',
                default='NXtofsingle',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_duration(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='duration',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_FLOAT',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-duration-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-duration-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_duration = SubSection(sub_section=nxp_duration.m_def,repeats=True)
        class nxp_pre_sample_flightpath(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='pre_sample_flightpath',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_FLOAT',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_LENGTH',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            This is the flight path before the sample position. This can be determined
                by a chopper,         by the moderator or the source itself. In other
                words: it the distance to the component         which gives the T0 signal
                to the detector electronics. If another component in the
                NXinstrument hierarchy provides this information, this should be a link.
                https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-pre-sample-flightpath-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-pre-sample-flightpath-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_pre_sample_flightpath = SubSection(sub_section=nxp_pre_sample_flightpath.m_def,repeats=True)
        class nxp_user(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXuser.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXuser',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='user',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-user-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-user-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-user-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-user-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
        nxp_user = SubSection(sub_section=nxp_user.m_def,repeats=True)
        class nxp_INSTRUMENT(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_detector(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='detector',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-detector-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-detector-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_data(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_signal= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-detector-data-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-detector-data-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
                class nxp_distance(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='distance',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Distance to sample for the center of the detector
                https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-detector-distance-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-detector-distance-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
                class nxp_time_of_flight(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='time_of_flight',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_TIME_OF_FLIGHT',
                    )
                    nxp_axis= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-detector-time-of-flight-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-detector-time-of-flight-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_time_of_flight = SubSection(sub_section=nxp_time_of_flight.m_def,repeats=True)
                class nxp_polar_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='polar_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    polar angle for each detector element
                https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-detector-polar-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-detector-polar-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_polar_angle = SubSection(sub_section=nxp_polar_angle.m_def,repeats=True)
                class nxp_azimuthal_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='azimuthal_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    azimuthal angle for each detector element
                https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-detector-azimuthal-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-detector-azimuthal-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_azimuthal_angle = SubSection(sub_section=nxp_azimuthal_angle.m_def,repeats=True)
            nxp_detector = SubSection(sub_section=nxp_detector.m_def,repeats=True)
        nxp_INSTRUMENT = SubSection(sub_section=nxp_INSTRUMENT.m_def,repeats=True)
        class nxp_SAMPLE(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Descriptive name of sample
                https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-sample-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-sample-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_nature(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='nature',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-sample-nature-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-sample-nature-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                nxp_enumeration= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Possible values: powder,liquid,single crystal''',
                    default='powder,liquid,single crystal',
                )
            nxp_nature = SubSection(sub_section=nxp_nature.m_def,repeats=True)
        nxp_SAMPLE = SubSection(sub_section=nxp_SAMPLE.m_def,repeats=True)
        class nxp_MONITOR(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXmonitor',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-monitor-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-monitor-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_mode(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='mode',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Count to a preset value based on either clock time (timer)             or
                received monitor counts (monitor).
                https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-monitor-mode-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-monitor-mode-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                nxp_enumeration= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Possible values: monitor,timer''',
                    default='monitor,timer',
                )
            nxp_mode = SubSection(sub_section=nxp_mode.m_def,repeats=True)
            class nxp_preset(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='preset',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                preset value for time or monitor
                https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-monitor-preset-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-monitor-preset-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_preset = SubSection(sub_section=nxp_preset.m_def,repeats=True)
            class nxp_distance(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='distance',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_LENGTH',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-monitor-distance-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-monitor-distance-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
            class nxp_data(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='data',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_INT',
                )
                nxp_signal= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-monitor-data-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-monitor-data-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
            class nxp_time_of_flight(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='time_of_flight',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_TIME_OF_FLIGHT',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-monitor-time-of-flight-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-monitor-time-of-flight-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_time_of_flight = SubSection(sub_section=nxp_time_of_flight.m_def,repeats=True)
        nxp_MONITOR = SubSection(sub_section=nxp_MONITOR.m_def,repeats=True)
        class nxp_data(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='data',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-data-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-data-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
    nxp_entry = SubSection(sub_section=nxp_entry.m_def,repeats=True)



class NXfluo(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXfluo',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                This is an application definition for raw data from an X-ray fluorescence
        experiment
        https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_entry(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='entry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-title-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-title-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_start_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-start-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-start-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start_time = SubSection(sub_section=nxp_start_time.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Official NeXus NXDL schema to which this file conforms.
                https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXfluo''',
                default='NXfluo',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_INSTRUMENT(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_SOURCE(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXsource',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-source-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-source-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_type(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='type',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-source-type-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-source-type-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)
                class nxp_name(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='name',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-source-name-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-source-name-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
                class nxp_probe(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='probe',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-source-probe-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-source-probe-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: x-ray''',
                        default='x-ray',
                    )
                nxp_probe = SubSection(sub_section=nxp_probe.m_def,repeats=True)
            nxp_SOURCE = SubSection(sub_section=nxp_SOURCE.m_def,repeats=True)
            class nxp_monochromator(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXmonochromator.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXmonochromator',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='monochromator',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-monochromator-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-monochromator-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_wavelength(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='wavelength',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-monochromator-wavelength-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-monochromator-wavelength-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_wavelength = SubSection(sub_section=nxp_wavelength.m_def,repeats=True)
            nxp_monochromator = SubSection(sub_section=nxp_monochromator.m_def,repeats=True)
            class nxp_fluorescence(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='fluorescence',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-fluorescence-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-fluorescence-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_data(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_axes= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='energy',
                    )
                    nxp_signal= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-fluorescence-data-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-fluorescence-data-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
                class nxp_energy(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='energy',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-fluorescence-energy-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-fluorescence-energy-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_energy = SubSection(sub_section=nxp_energy.m_def,repeats=True)
            nxp_fluorescence = SubSection(sub_section=nxp_fluorescence.m_def,repeats=True)
        nxp_INSTRUMENT = SubSection(sub_section=nxp_INSTRUMENT.m_def,repeats=True)
        class nxp_SAMPLE(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Descriptive name of sample
                https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-sample-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-sample-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
        nxp_SAMPLE = SubSection(sub_section=nxp_SAMPLE.m_def,repeats=True)
        class nxp_MONITOR(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXmonitor',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-monitor-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-monitor-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_mode(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='mode',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Count to a preset value based on either clock time (timer)             or
                received monitor counts (monitor).
                https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-monitor-mode-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-monitor-mode-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                nxp_enumeration= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Possible values: monitor,timer''',
                    default='monitor,timer',
                )
            nxp_mode = SubSection(sub_section=nxp_mode.m_def,repeats=True)
            class nxp_preset(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='preset',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                preset value for time or monitor
                https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-monitor-preset-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-monitor-preset-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_preset = SubSection(sub_section=nxp_preset.m_def,repeats=True)
            class nxp_data(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='data',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_INT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-monitor-data-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-monitor-data-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
        nxp_MONITOR = SubSection(sub_section=nxp_MONITOR.m_def,repeats=True)
        class nxp_data(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='data',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-data-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-data-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
    nxp_entry = SubSection(sub_section=nxp_entry.m_def,repeats=True)



class NXxeuler(NXxbase):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXxeuler',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXxbase',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                raw data from a :index:`four-circle diffractometer` with an :index:`eulerian
        cradle`, extends :ref:`NXxbase`              It extends :ref:`NXxbase`, so the
        full definition is the content        of :ref:`NXxbase` plus the data defined
        here. All four angles are        logged in order to support arbitrary scans in
        reciprocal space.
        https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_entry(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='entry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXxeuler''',
                default='NXxeuler',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_instrument(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='instrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_detector(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='detector',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-instrument-detector-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-instrument-detector-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_polar_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='polar_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_axis= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    The polar_angle (two theta) where the detector is placed               at
                each scan point.
                https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-instrument-detector-polar-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-instrument-detector-polar-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_polar_angle = SubSection(sub_section=nxp_polar_angle.m_def,repeats=True)
            nxp_detector = SubSection(sub_section=nxp_detector.m_def,repeats=True)
        nxp_instrument = SubSection(sub_section=nxp_instrument.m_def,repeats=True)
        class nxp_sample(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='sample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_rotation_angle(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='rotation_angle',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                This is an array holding the sample rotation angle at each
                scan point
                https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-sample-rotation-angle-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-sample-rotation-angle-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_rotation_angle = SubSection(sub_section=nxp_rotation_angle.m_def,repeats=True)
            class nxp_chi(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='chi',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                This is an array holding the chi angle of the eulerian             cradle
                at each scan point
                https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-sample-chi-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-sample-chi-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_chi = SubSection(sub_section=nxp_chi.m_def,repeats=True)
            class nxp_phi(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='phi',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_signal= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                This is an array holding the phi rotation of the eulerian
                cradle at each scan point
                https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-sample-phi-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-sample-phi-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_phi = SubSection(sub_section=nxp_phi.m_def,repeats=True)
        nxp_sample = SubSection(sub_section=nxp_sample.m_def,repeats=True)
        class nxp_name(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='name',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-name-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-name-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
    nxp_entry = SubSection(sub_section=nxp_entry.m_def,repeats=True)



class NXxrot(NXxbase):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXxrot',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXxbase',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                raw data from a rotation camera, extends :ref:`NXxbase`           This is the
        application definition for raw data from a rotation camera.     It extends
        :ref:`NXxbase`, so the full definition is the content of :ref:`NXxbase`     plus
        the data defined here.
        https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_entry(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='entry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms.
                https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXxrot''',
                default='NXxrot',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_instrument(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='instrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_detector(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='detector',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-detector-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-detector-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_polar_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='polar_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    The polar_angle (two theta) where the detector is placed.
                https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-detector-polar-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-detector-polar-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_polar_angle = SubSection(sub_section=nxp_polar_angle.m_def,repeats=True)
                class nxp_beam_center_x(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='beam_center_x',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    This is the x position where the direct beam would hit the detector. This
                is a               length, not a pixel position, and can be outside of the
                actual detector.
                https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-detector-beam-center-x-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-detector-beam-center-x-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_beam_center_x = SubSection(sub_section=nxp_beam_center_x.m_def,repeats=True)
                class nxp_beam_center_y(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='beam_center_y',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    This is the y position where the direct beam would hit the detector. This
                is a                 length, not a pixel position, and can be outside of
                the actual detector.
                https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-detector-beam-center-y-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-detector-beam-center-y-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_beam_center_y = SubSection(sub_section=nxp_beam_center_y.m_def,repeats=True)
            nxp_detector = SubSection(sub_section=nxp_detector.m_def,repeats=True)
            class nxp_attenuator(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXattenuator.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXattenuator',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='attenuator',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-attenuator-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-attenuator-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_attenuator_transmission(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='attenuator_transmission',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANY',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-attenuator-attenuator-transmission-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-attenuator-attenuator-transmission-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_attenuator_transmission = SubSection(sub_section=nxp_attenuator_transmission.m_def,repeats=True)
            nxp_attenuator = SubSection(sub_section=nxp_attenuator.m_def,repeats=True)
        nxp_instrument = SubSection(sub_section=nxp_instrument.m_def,repeats=True)
        class nxp_sample(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='sample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_rotation_angle(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='rotation_angle',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                This is an array holding the sample rotation start angle at each  scan
                point
                https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-sample-rotation-angle-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-sample-rotation-angle-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_rotation_angle = SubSection(sub_section=nxp_rotation_angle.m_def,repeats=True)
            class nxp_rotation_angle_step(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='rotation_angle_step',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                This is an array holding the step made for sample rotation angle at each
                scan point
                https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-sample-rotation-angle-step-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-sample-rotation-angle-step-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_rotation_angle_step = SubSection(sub_section=nxp_rotation_angle_step.m_def,repeats=True)
        nxp_sample = SubSection(sub_section=nxp_sample.m_def,repeats=True)
        class nxp_name(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='name',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-name-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-name-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
    nxp_entry = SubSection(sub_section=nxp_entry.m_def,repeats=True)



class NXtofraw(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXtofraw',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        This is an application definition for raw data from a generic TOF instrument
        https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_entry(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='entry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-title-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-title-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_start_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-start-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-start-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start_time = SubSection(sub_section=nxp_start_time.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXtofraw''',
                default='NXtofraw',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_duration(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='duration',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_FLOAT',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-duration-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-duration-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_duration = SubSection(sub_section=nxp_duration.m_def,repeats=True)
        class nxp_run_number(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='run_number',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_INT',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-run-number-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-run-number-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_run_number = SubSection(sub_section=nxp_run_number.m_def,repeats=True)
        class nxp_pre_sample_flightpath(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='pre_sample_flightpath',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_FLOAT',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_LENGTH',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            This is the flight path before the sample position. This can be determined
                by a chopper,         by the moderator, or the source itself. In other
                words: it is the distance to the component         which gives the T0
                signal to the detector electronics. If another component in the
                NXinstrument hierarchy provides this information, this should be a link.
                https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-pre-sample-flightpath-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-pre-sample-flightpath-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_pre_sample_flightpath = SubSection(sub_section=nxp_pre_sample_flightpath.m_def,repeats=True)
        class nxp_user(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXuser.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXuser',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='user',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-user-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-user-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-user-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-user-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
        nxp_user = SubSection(sub_section=nxp_user.m_def,repeats=True)
        class nxp_instrument(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='instrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_detector(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='detector',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_data(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_signal= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-data-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-data-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
                class nxp_detector_number(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='detector_number',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_axis= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='2',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-detector-number-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-detector-number-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_detector_number = SubSection(sub_section=nxp_detector_number.m_def,repeats=True)
                class nxp_distance(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='distance',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    distance to sample for each detector
                https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-distance-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-distance-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
                class nxp_time_of_flight(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='time_of_flight',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_TIME_OF_FLIGHT',
                    )
                    nxp_axis= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-time-of-flight-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-time-of-flight-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_time_of_flight = SubSection(sub_section=nxp_time_of_flight.m_def,repeats=True)
                class nxp_polar_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='polar_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    polar angle for each detector element
                https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-polar-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-polar-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_polar_angle = SubSection(sub_section=nxp_polar_angle.m_def,repeats=True)
                class nxp_azimuthal_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='azimuthal_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    polar angle for each detector element
                https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-azimuthal-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-azimuthal-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_azimuthal_angle = SubSection(sub_section=nxp_azimuthal_angle.m_def,repeats=True)
            nxp_detector = SubSection(sub_section=nxp_detector.m_def,repeats=True)
        nxp_instrument = SubSection(sub_section=nxp_instrument.m_def,repeats=True)
        class nxp_SAMPLE(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Descriptive name of sample
                https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-sample-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-sample-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_nature(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='nature',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-sample-nature-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-sample-nature-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                nxp_enumeration= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Possible values: powder,liquid,single crystal''',
                    default='powder,liquid,single crystal',
                )
            nxp_nature = SubSection(sub_section=nxp_nature.m_def,repeats=True)
        nxp_SAMPLE = SubSection(sub_section=nxp_SAMPLE.m_def,repeats=True)
        class nxp_MONITOR(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXmonitor',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_mode(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='mode',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Count to a preset value based on either clock time (timer)             or
                received monitor counts (monitor).
                https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-mode-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-mode-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                nxp_enumeration= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Possible values: monitor,timer''',
                    default='monitor,timer',
                )
            nxp_mode = SubSection(sub_section=nxp_mode.m_def,repeats=True)
            class nxp_preset(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='preset',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                preset value for time or monitor
                https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-preset-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-preset-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_preset = SubSection(sub_section=nxp_preset.m_def,repeats=True)
            class nxp_distance(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='distance',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_LENGTH',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-distance-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-distance-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
            class nxp_data(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='data',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_INT',
                )
                nxp_signal= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-data-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-data-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
            class nxp_time_of_flight(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='time_of_flight',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_TIME_OF_FLIGHT',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-time-of-flight-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-time-of-flight-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_time_of_flight = SubSection(sub_section=nxp_time_of_flight.m_def,repeats=True)
            class nxp_integral_counts(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='integral_counts',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_INT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_UNITLESS',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-integral-counts-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-integral-counts-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_integral_counts = SubSection(sub_section=nxp_integral_counts.m_def,repeats=True)
        nxp_MONITOR = SubSection(sub_section=nxp_MONITOR.m_def,repeats=True)
        class nxp_data(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='data',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-data-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-data-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
    nxp_entry = SubSection(sub_section=nxp_entry.m_def,repeats=True)



class NXxkappa(NXxbase):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXxkappa',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXxbase',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                raw data from a kappa geometry (CAD4) single crystal diffractometer, extends
        :ref:`NXxbase`          This is the application definition for raw data from a
        kappa geometry      (CAD4) single crystal     diffractometer. It extends
        :ref:`NXxbase`, so the full definition is      the content of :ref:`NXxbase` plus
        the     data defined here.
        https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_entry(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='entry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXxkappa''',
                default='NXxkappa',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_instrument(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='instrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_detector(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='detector',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-instrument-detector-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-instrument-detector-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_polar_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='polar_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    The polar_angle (two theta) at each scan point
                https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-instrument-detector-polar-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-instrument-detector-polar-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_polar_angle = SubSection(sub_section=nxp_polar_angle.m_def,repeats=True)
            nxp_detector = SubSection(sub_section=nxp_detector.m_def,repeats=True)
        nxp_instrument = SubSection(sub_section=nxp_instrument.m_def,repeats=True)
        class nxp_sample(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='sample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_rotation_angle(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='rotation_angle',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                This is an array holding the sample rotation angle at each           scan
                point
                https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-sample-rotation-angle-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-sample-rotation-angle-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_rotation_angle = SubSection(sub_section=nxp_rotation_angle.m_def,repeats=True)
            class nxp_kappa(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='kappa',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                This is an array holding the kappa angle at each scan point
                https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-sample-kappa-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-sample-kappa-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_kappa = SubSection(sub_section=nxp_kappa.m_def,repeats=True)
            class nxp_phi(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='phi',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                This is an array holding the phi angle at each scan point
                https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-sample-phi-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-sample-phi-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_phi = SubSection(sub_section=nxp_phi.m_def,repeats=True)
            class nxp_alpha(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='alpha',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                This holds the inclination angle of the kappa arm.
                https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-sample-alpha-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-sample-alpha-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_alpha = SubSection(sub_section=nxp_alpha.m_def,repeats=True)
        nxp_sample = SubSection(sub_section=nxp_sample.m_def,repeats=True)
        class nxp_name(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='name',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-name-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-name-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
    nxp_entry = SubSection(sub_section=nxp_entry.m_def,repeats=True)



class NXindirecttof(NXtofraw):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXindirecttof',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXtofraw',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        This is a application definition for raw data from a direct geometry TOF
        spectrometer
        https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof
        .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_entry(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='entry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-title-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-title-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_start_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-start-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-start-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start_time = SubSection(sub_section=nxp_start_time.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXindirecttof''',
                default='NXindirecttof',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_INSTRUMENT(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_analyser(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXmonochromator.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXmonochromator',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='analyser',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-instrument-analyser-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-instrument-analyser-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_energy(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='energy',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ENERGY',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    analyzed energy
                https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-instrument-analyser-energy-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-instrument-analyser-energy-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_energy = SubSection(sub_section=nxp_energy.m_def,repeats=True)
                class nxp_polar_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='polar_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    polar angle towards sample
                https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-instrument-analyser-polar-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-instrument-analyser-polar-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_polar_angle = SubSection(sub_section=nxp_polar_angle.m_def,repeats=True)
                class nxp_distance(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='distance',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    distance from sample
                https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-instrument-analyser-distance-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-instrument-analyser-distance-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
            nxp_analyser = SubSection(sub_section=nxp_analyser.m_def,repeats=True)
        nxp_INSTRUMENT = SubSection(sub_section=nxp_INSTRUMENT.m_def,repeats=True)
    nxp_entry = SubSection(sub_section=nxp_entry.m_def,repeats=True)



class NXmx(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXmx',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                functional application definition for macromolecular crystallography
        https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_ENTRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Note, it is recommended that ``file_name`` and ``file_time`` are included
                as attributes at the root of a file that includes  :ref:`NXmx`. See
                :ref:`NXroot`.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_version(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='version',
            )
            nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='true',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Describes the version of the NXmx definition used to write this data.
                This must be a text (not numerical) representation. Such as::

                @version="1.0"
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-version-attribute
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-version-attribute',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: 1.0''',
                default='1.0',
            )
        nxp_version = SubSection(sub_section=nxp_version.m_def,repeats=True)
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='0',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-title-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-title-field',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_start_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            ISO 8601 time/date of the first data point collected in UTC,
                using the Z suffix to avoid confusion with local time.
                Note that the time zone of the beamline should be provided in
                NXentry/NXinstrument/time_zone.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-start-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-start-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start_time = SubSection(sub_section=nxp_start_time.m_def,repeats=True)
        class nxp_end_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='end_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='0',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            ISO 8601 time/date of the last data point collected in UTC,
                using the Z suffix to avoid confusion with local time.
                Note that the time zone of the beamline should be provided in
                NXentry/NXinstrument/time_zone. This field should only be
                filled when the value is accurately observed. If the data
                collection aborts or otherwise prevents accurate recording of
                the end_time, this field should be omitted.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-end-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-end-time-field',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_end_time = SubSection(sub_section=nxp_end_time.m_def,repeats=True)
        class nxp_end_time_estimated(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='end_time_estimated',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            ISO 8601 time/date of the last data point collected in UTC,
                using the Z suffix to avoid confusion with local time.
                Note that the time zone of the beamline should be provided in
                NXentry/NXinstrument/time_zone.  This field may be filled
                with a value estimated before an observed value is available.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-end-time-estimated-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-end-time-estimated-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_end_time_estimated = SubSection(sub_section=nxp_end_time_estimated.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXmx''',
                default='NXmx',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_DATA(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-data-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-data-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_data(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='data',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_recommended= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='true',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                For a dimension-2 detector, the rank of the data array will be 3.
                For a dimension-3 detector, the rank of the data array will be 4.
                This allows for the introduction of the frame number as the
                first index.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-data-data-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-data-data-field',
                )
            nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
        nxp_DATA = SubSection(sub_section=nxp_DATA.m_def,repeats=True)
        class nxp_SAMPLE(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Descriptive name of sample
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-sample-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-sample-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_depends_on(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='depends_on',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                This is a requirement to describe for any scan experiment.

                The axis on which the sample position depends may be stored
                anywhere, but is normally stored in the NXtransformations
                group within the NXsample group.

                If there is no goniometer, e.g. with a jet, depends_on
                should be set to "."
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-sample-depends-on-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-sample-depends-on-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_depends_on = SubSection(sub_section=nxp_depends_on.m_def,repeats=True)
            class nxp_temperature(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='temperature',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_TEMPERATURE',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-sample-temperature-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-sample-temperature-field',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_temperature = SubSection(sub_section=nxp_temperature.m_def,repeats=True)
            class nxp_TRANSFORMATIONS(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXtransformations.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXtransformations',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                This is the recommended location for sample goniometer
                and other related axes.

                This is a requirement to describe for any scan experiment.
                The reason it is optional is mainly to accommodate XFEL
                single shot exposures.

                Use of the depends_on field and the NXtransformations group is
                strongly recommended.  As noted above this should be an absolute
                requirement to have for any scan experiment.

                The reason it is optional is mainly to accommodate XFEL
                single shot exposures.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-sample-transformations-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-sample-transformations-group',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_TRANSFORMATIONS = SubSection(sub_section=nxp_TRANSFORMATIONS.m_def,repeats=True)
        nxp_SAMPLE = SubSection(sub_section=nxp_SAMPLE.m_def,repeats=True)
        class nxp_INSTRUMENT(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Name of instrument.  Consistency with the controlled
                vocabulary beamline naming in
                https://mmcif.wwpdb.org/dictionaries/mmcif_pdbx_v50.dic/Items/_diffrn_source.pdbx_synchrotron_beamline.html
                and
                https://mmcif.wwpdb.org/dictionaries/mmcif_pdbx_v50.dic/Items/_diffrn_source.type.html
                is highly recommended.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_short_name(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='short_name',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Short name for instrument, perhaps the acronym.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-name-short-name-attribute
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-name-short-name-attribute',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_short_name = SubSection(sub_section=nxp_short_name.m_def,repeats=True)
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_time_zone(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='time_zone',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_DATE_TIME',
                )
                nxp_recommended= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='true',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                ISO 8601 time_zone offset from UTC.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-time-zone-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-time-zone-field',
                )
            nxp_time_zone = SubSection(sub_section=nxp_time_zone.m_def,repeats=True)
            class nxp_ATTENUATOR(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXattenuator.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXattenuator',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-attenuator-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-attenuator-group',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_attenuator_transmission(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='attenuator_transmission',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_UNITLESS',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-attenuator-attenuator-transmission-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-attenuator-attenuator-transmission-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_attenuator_transmission = SubSection(sub_section=nxp_attenuator_transmission.m_def,repeats=True)
            nxp_ATTENUATOR = SubSection(sub_section=nxp_ATTENUATOR.m_def,repeats=True)
            class nxp_DETECTOR_GROUP(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector_group.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector_group',
                )
                nxp_recommended= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='true',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Optional logical grouping of detectors.

                Each detector is represented as an NXdetector
                with its own detector data array.  Each detector data array
                may be further decomposed into array sections by use of
                NXdetector_module groups.  Detectors can be grouped logically
                together using NXdetector_group. Groups can be further grouped
                hierarchically in a single NXdetector_group (for example, if
                there are multiple detectors at an endstation or multiple
                endstations at a facility).  Alternatively, multiple
                NXdetector_groups can be provided.

                The groups are defined hierarchically, with names given
                in the group_names field, unique identifying indices given
                in the field group_index, and the level in the hierarchy
                given in the group_parent field.  For example if an x-ray
                detector group, DET, consists of four detectors in a
                rectangular array::

                DTL     DTR
                DLL    DLR

                We could have::

                group_names: ["DET", "DTL", "DTR", "DLL", "DLR"]
                group_index: [1, 2, 3, 4, 5]
                group_parent:  [-1, 1, 1, 1, 1]

                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-group-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-group-group',
                )
                class nxp_group_names(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='group_names',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_CHAR',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    An array of the names of the detectors or the names of
                hierarchical groupings of detectors.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-group-group-names-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-group-group-names-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_group_names = SubSection(sub_section=nxp_group_names.m_def,repeats=True)
                class nxp_group_index(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='group_index',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    An array of unique identifiers for detectors or groupings
                of detectors.

                Each ID is a unique ID for the corresponding detector or group
                named in the field group_names.  The IDs are positive integers
                starting with 1.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-group-group-index-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-group-group-index-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_group_index = SubSection(sub_section=nxp_group_index.m_def,repeats=True)
                class nxp_group_parent(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='group_parent',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    An array of the hierarchical levels of the parents of detectors
                or groupings of detectors.

                A top-level grouping has parent level -1.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-group-group-parent-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-group-group-parent-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_group_parent = SubSection(sub_section=nxp_group_parent.m_def,repeats=True)
            nxp_DETECTOR_GROUP = SubSection(sub_section=nxp_DETECTOR_GROUP.m_def,repeats=True)
            class nxp_DETECTOR(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Normally the detector group will have the name ``detector``.
                However, in the case of multiple detectors, each detector
                needs a uniquely named NXdetector.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_depends_on(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='depends_on',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_CHAR',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    NeXus path to the detector positioner axis that most directly
                supports the detector.  In the case of a single-module
                detector, the detector axis chain may start here.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-depends-on-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-depends-on-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_depends_on = SubSection(sub_section=nxp_depends_on.m_def,repeats=True)
                class nxp_data(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_recommended= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='true',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    For a dimension-2 detector, the rank of the data array will be 3.
                For a dimension-3 detector, the rank of the data array will be 4.
                This allows for the introduction of the frame number as the
                first index.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-data-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-data-field',
                    )
                nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
                class nxp_description(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='description',
                    )
                    nxp_recommended= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='true',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    name/manufacturer/model/etc. information.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-description-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-description-field',
                    )
                nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
                class nxp_time_per_channel(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='time_per_channel',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_TIME',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    For a time-of-flight detector this is the scaling
                factor to convert from the numeric value reported to
                the flight time for a given measurement.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-time-per-channel-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-time-per-channel-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_time_per_channel = SubSection(sub_section=nxp_time_per_channel.m_def,repeats=True)
                class nxp_distance(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='distance',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_recommended= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='true',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Distance from the sample to the beam center.
                Normally this value is for guidance only, the proper
                geometry can be found following the depends_on axis chain,
                But in appropriate cases where the dectector distance
                to the sample is observable independent of the axis
                chain, that may take precedence over the axis chain
                calculation.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-distance-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-distance-field',
                    )
                nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
                class nxp_distance_derived(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='distance_derived',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_BOOLEAN',
                    )
                    nxp_recommended= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='true',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Boolean to indicate if the distance is a derived, rather than
                a primary observation.  If distance_derived true or is not specified,
                the distance is assumed to be derived from delector axis
                specifications.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-distance-derived-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-distance-derived-field',
                    )
                nxp_distance_derived = SubSection(sub_section=nxp_distance_derived.m_def,repeats=True)
                class nxp_dead_time(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='dead_time',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_TIME',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Detector dead time.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-dead-time-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-dead-time-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_dead_time = SubSection(sub_section=nxp_dead_time.m_def,repeats=True)
                class nxp_count_time(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='count_time',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_TIME',
                    )
                    nxp_recommended= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='true',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Elapsed actual counting time.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-count-time-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-count-time-field',
                    )
                nxp_count_time = SubSection(sub_section=nxp_count_time.m_def,repeats=True)
                class nxp_beam_center_derived(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='beam_center_derived',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_BOOLEAN',
                    )
                    nxp_optional= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='true',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Boolean to indicate if the distance is a derived, rather than
                a primary observation.  If true or not provided, that value of
                beam_center_derived is assumed to be true.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-beam-center-derived-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-beam-center-derived-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_beam_center_derived = SubSection(sub_section=nxp_beam_center_derived.m_def,repeats=True)
                class nxp_beam_center_x(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='beam_center_x',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_recommended= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='true',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    This is the x position where the direct beam would hit the
                detector. This is a length and can be outside of the actual
                detector. The length can be in physical units or pixels as
                documented by the units attribute.  Normally, this should
                be derived from the axis chain, but the direct specification
                may take precedence if it is not a derived quantity.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-beam-center-x-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-beam-center-x-field',
                    )
                nxp_beam_center_x = SubSection(sub_section=nxp_beam_center_x.m_def,repeats=True)
                class nxp_beam_center_y(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='beam_center_y',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_recommended= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='true',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    This is the y position where the direct beam would hit the
                detector. This is a length and can be outside of the actual
                detector. The length can be in physical units or pixels as
                documented by the units attribute.  Normally, this should
                be derived from the axis chain, but the direct specification
                may take precedence if it is not a derived quantity.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-beam-center-y-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-beam-center-y-field',
                    )
                nxp_beam_center_y = SubSection(sub_section=nxp_beam_center_y.m_def,repeats=True)
                class nxp_angular_calibration_applied(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='angular_calibration_applied',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_BOOLEAN',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    True when the angular calibration has been applied in the
                electronics, false otherwise.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-angular-calibration-applied-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-angular-calibration-applied-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_angular_calibration_applied = SubSection(sub_section=nxp_angular_calibration_applied.m_def,repeats=True)
                class nxp_angular_calibration(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='angular_calibration',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Angular calibration data.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-angular-calibration-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-angular-calibration-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_angular_calibration = SubSection(sub_section=nxp_angular_calibration.m_def,repeats=True)
                class nxp_flatfield_applied(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='flatfield_applied',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_BOOLEAN',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    True when the flat field correction has been applied in the
                electronics, false otherwise.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-flatfield-applied-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-flatfield-applied-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_flatfield_applied = SubSection(sub_section=nxp_flatfield_applied.m_def,repeats=True)
                class nxp_flatfield(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='flatfield',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Flat field correction data.  If provided, it is recommended
                that it be compressed.

                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-flatfield-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-flatfield-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_flatfield = SubSection(sub_section=nxp_flatfield.m_def,repeats=True)
                class nxp_flatfield_error(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='flatfield_error',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    *** Deprecated form.  Use plural form ***
                Errors of the flat field correction data.  If provided, it is recommended
                that it be compressed.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-flatfield-error-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-flatfield-error-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_flatfield_error = SubSection(sub_section=nxp_flatfield_error.m_def,repeats=True)
                class nxp_flatfield_errors(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='flatfield_errors',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Errors of the flat field correction data.  If provided, it is recommended
                that it be compressed.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-flatfield-errors-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-flatfield-errors-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_flatfield_errors = SubSection(sub_section=nxp_flatfield_errors.m_def,repeats=True)
                class nxp_pixel_mask_applied(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='pixel_mask_applied',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_BOOLEAN',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    True when the pixel mask correction has been applied in the
                electronics, false otherwise.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-pixel-mask-applied-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-pixel-mask-applied-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_pixel_mask_applied = SubSection(sub_section=nxp_pixel_mask_applied.m_def,repeats=True)
                class nxp_pixel_mask(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='pixel_mask',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_recommended= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='true',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    The 32-bit pixel mask for the detector. Can be either one mask
                for the whole dataset (i.e. an array with indices i, j) or
                each frame can have its own mask (in which case it would be
                an array with indices nP, i, j).

                Contains a bit field for each pixel to signal dead,
                blind, high or otherwise unwanted or undesirable pixels.
                They have the following meaning:

                * bit 0: gap (pixel with no sensor)
                * bit 1: dead
                * bit 2: under-responding
                * bit 3: over-responding
                * bit 4: noisy
                * bit 5: -undefined-
                * bit 6: pixel is part of a cluster of problematic pixels (bit set in
                addition to others)
                * bit 7: -undefined-
                * bit 8: user defined mask (e.g. around beamstop)
                * bits 9-30: -undefined-
                * bit 31: virtual pixel (corner pixel with interpolated value)

                Normal data analysis software would not take pixels into account
                when a bit in (mask & 0x0000FFFF) is set. Tag bit in the upper
                two bytes would indicate special pixel properties that normally
                would not be a sole reason to reject the intensity value (unless
                lower bits are set.

                If the full bit depths is not required, providing a
                mask with fewer bits is permissible.

                If needed, additional pixel masks can be specified by
                including additional entries named pixel_mask_N, where
                N is an integer. For example, a general bad pixel mask
                could be specified in pixel_mask that indicates noisy
                and dead pixels, and an additional pixel mask from
                experiment-specific shadowing could be specified in
                pixel_mask_2. The cumulative mask is the bitwise OR
                of pixel_mask and any pixel_mask_N entries.

                If provided, it is recommended that it be compressed.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-pixel-mask-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-pixel-mask-field',
                    )
                nxp_pixel_mask = SubSection(sub_section=nxp_pixel_mask.m_def,repeats=True)
                class nxp_countrate_correction_applied(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='countrate_correction_applied',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_BOOLEAN',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    True when a count-rate correction has already been applied in
                the data recorded here, false otherwise.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-countrate-correction-applied-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-countrate-correction-applied-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_countrate_correction_applied = SubSection(sub_section=nxp_countrate_correction_applied.m_def,repeats=True)
                class nxp_bit_depth_readout(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='bit_depth_readout',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_recommended= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='true',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    How many bits the electronics record per pixel.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-bit-depth-readout-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-bit-depth-readout-field',
                    )
                nxp_bit_depth_readout = SubSection(sub_section=nxp_bit_depth_readout.m_def,repeats=True)
                class nxp_detector_readout_time(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='detector_readout_time',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_TIME',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Time it takes to read the detector (typically milliseconds).
                This is important to know for time resolved experiments.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-readout-time-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-readout-time-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_detector_readout_time = SubSection(sub_section=nxp_detector_readout_time.m_def,repeats=True)
                class nxp_frame_time(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='frame_time',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_TIME',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    This is time for each frame. This is exposure_time + readout
                time.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-frame-time-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-frame-time-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_frame_time = SubSection(sub_section=nxp_frame_time.m_def,repeats=True)
                class nxp_gain_setting(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='gain_setting',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_CHAR',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    The gain setting of the detector. This influences background.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-gain-setting-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-gain-setting-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_gain_setting = SubSection(sub_section=nxp_gain_setting.m_def,repeats=True)
                class nxp_saturation_value(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='saturation_value',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    The value at which the detector goes into saturation.
                Data above this value is known to be invalid.

                For example, given a saturation_value and an underload_value,
                the valid pixels are those less than or equal to the
                saturation_value and greater than or equal to the underload_value.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-saturation-value-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-saturation-value-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_saturation_value = SubSection(sub_section=nxp_saturation_value.m_def,repeats=True)
                class nxp_underload_value(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='underload_value',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    The lowest value at which pixels for this detector
                would be reasonably be measured.

                For example, given a saturation_value and an underload_value,
                the valid pixels are those less than or equal to the
                saturation_value and greater than or equal to the underload_value.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-underload-value-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-underload-value-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_underload_value = SubSection(sub_section=nxp_underload_value.m_def,repeats=True)
                class nxp_sensor_material(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='sensor_material',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_CHAR',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    At times, radiation is not directly sensed by the detector.
                Rather, the detector might sense the output from some
                converter like a scintillator.
                This is the name of this converter material.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-sensor-material-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-sensor-material-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_sensor_material = SubSection(sub_section=nxp_sensor_material.m_def,repeats=True)
                class nxp_sensor_thickness(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='sensor_thickness',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    At times, radiation is not directly sensed by the detector.
                Rather, the detector might sense the output from some
                converter like a scintillator. This is the thickness of this
                converter material.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-sensor-thickness-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-sensor-thickness-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_sensor_thickness = SubSection(sub_section=nxp_sensor_thickness.m_def,repeats=True)
                class nxp_threshold_energy(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='threshold_energy',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ENERGY',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Single photon counter detectors can be adjusted for a certain
                energy range in which they work optimally. This is the energy
                setting for this.  If the detector supports multiple thresholds,
                this is an array.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-threshold-energy-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-threshold-energy-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_threshold_energy = SubSection(sub_section=nxp_threshold_energy.m_def,repeats=True)
                class nxp_type(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='type',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Description of type such as scintillator,
                ccd, pixel, image
                plate, CMOS, ...
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-type-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-type-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)
                class nxp_TRANSFORMATIONS(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NXtransformations.m_def,repeats=True)
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NXtransformations',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Location for axes (transformations) to do with the
                detector.  In the case of a single-module detector, the
                axes of the detector axis chain may be stored here.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-transformations-group
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-transformations-group',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_TRANSFORMATIONS = SubSection(sub_section=nxp_TRANSFORMATIONS.m_def,repeats=True)
                class nxp_COLLECTION(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NXcollection.m_def,repeats=True)
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NXcollection',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Suggested container for detailed non-standard detector
                information like corrections applied automatically or
                performance settings.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-collection-group
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-collection-group',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_COLLECTION = SubSection(sub_section=nxp_COLLECTION.m_def,repeats=True)
                class nxp_DETECTOR_MODULE(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NXdetector_module.m_def,repeats=True)
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NXdetector_module',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='unbounded',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Many detectors consist of multiple smaller modules that are
                operated in sync and store their data in a common dataset.
                To allow consistent parsing of the experimental geometry,
                this application definiton requires all detectors to
                define a detector module, even if there is only one.

                This group specifies the hyperslab of data in the data
                array associated with the detector that contains the
                data for this module.  If the module is associated with
                a full data array, rather than with a hyperslab within
                a larger array, then a single module should be defined,
                spanning the entire array.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-group
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-group',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    class nxp_data_origin(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='data_origin',
                        )
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NX_INT',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                                        A dimension-2 or dimension-3 field which gives the indices
                of the origin of the hyperslab of data for this module in the
                main area detector image in the parent NXdetector module.

                The data_origin is 0-based.

                The frame number dimension (nP) is omitted.  Thus the
                data_origin field for a dimension-2 dataset with indices (nP, i, j)
                will be an array with indices (i, j), and for a dimension-3
                dataset with indices (nP, i, j, k) will be an array with indices
                (i, j, k).

                The :ref:`order <Design-ArrayStorageOrder>` of indices (i, j
                or i, j, k) is slow to fast.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-data-origin-field
                .''',
                            default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-data-origin-field',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                    nxp_data_origin = SubSection(sub_section=nxp_data_origin.m_def,repeats=True)
                    class nxp_data_size(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='data_size',
                        )
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NX_INT',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                                        Two or three values for the size of the module in pixels in
                each direction. Dimensionality and order of indices is the
                same as for data_origin.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-data-size-field
                .''',
                            default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-data-size-field',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                    nxp_data_size = SubSection(sub_section=nxp_data_size.m_def,repeats=True)
                    class nxp_data_stride(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='data_stride',
                        )
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NX_INT',
                        )
                        nxp_minOccurs= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='0',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                                        Two or three values for the stride of the module in pixels in
                each direction.  By default the stride is [1,1] or [1,1,1],
                and this is the most likely case.  This optional field is
                included for completeness.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-data-stride-field
                .''',
                            default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-data-stride-field',
                        )
                        nxp_optional= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                    nxp_data_stride = SubSection(sub_section=nxp_data_stride.m_def,repeats=True)
                    class nxp_module_offset(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='module_offset',
                        )
                        nxp_units= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NX_LENGTH',
                        )
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NX_NUMBER',
                        )
                        nxp_minOccurs= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='0',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                                        Offset of the module in regards to the origin of the detector in an
                arbitrary direction.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-module-offset-field
                .''',
                            default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-module-offset-field',
                        )
                        nxp_optional= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                        class nxp_transformation_type(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='transformation_type',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-module-offset-transformation-type-attribute
                .''',
                                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-module-offset-transformation-type-attribute',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                            nxp_enumeration= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            Possible values: translation''',
                                default='translation',
                            )
                        nxp_transformation_type = SubSection(sub_section=nxp_transformation_type.m_def,repeats=True)
                        class nxp_vector(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='vector',
                            )
                            nxp_type= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_NUMBER',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-module-offset-vector-attribute
                .''',
                                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-module-offset-vector-attribute',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_vector = SubSection(sub_section=nxp_vector.m_def,repeats=True)
                        class nxp_offset(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='offset',
                            )
                            nxp_type= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_NUMBER',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-module-offset-offset-attribute
                .''',
                                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-module-offset-offset-attribute',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_offset = SubSection(sub_section=nxp_offset.m_def,repeats=True)
                        class nxp_depends_on(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='depends_on',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-module-offset-depends-on-attribute
                .''',
                                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-module-offset-depends-on-attribute',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_depends_on = SubSection(sub_section=nxp_depends_on.m_def,repeats=True)
                    nxp_module_offset = SubSection(sub_section=nxp_module_offset.m_def,repeats=True)
                    class nxp_fast_pixel_direction(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='fast_pixel_direction',
                        )
                        nxp_units= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NX_LENGTH',
                        )
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NX_NUMBER',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                                        Values along the direction of :ref:`fastest varying
                <Design-ArrayStorageOrder>`
                pixel direction.  The direction itself is given through the vector
                attribute.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-fast-pixel-direction-field
                .''',
                            default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-fast-pixel-direction-field',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                        class nxp_transformation_type(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='transformation_type',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-fast-pixel-direction-transformation-type-attribute
                .''',
                                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-fast-pixel-direction-transformation-type-attribute',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                            nxp_enumeration= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            Possible values: translation''',
                                default='translation',
                            )
                        nxp_transformation_type = SubSection(sub_section=nxp_transformation_type.m_def,repeats=True)
                        class nxp_vector(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='vector',
                            )
                            nxp_type= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_NUMBER',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-fast-pixel-direction-vector-attribute
                .''',
                                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-fast-pixel-direction-vector-attribute',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_vector = SubSection(sub_section=nxp_vector.m_def,repeats=True)
                        class nxp_offset(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='offset',
                            )
                            nxp_type= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_NUMBER',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-fast-pixel-direction-offset-attribute
                .''',
                                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-fast-pixel-direction-offset-attribute',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_offset = SubSection(sub_section=nxp_offset.m_def,repeats=True)
                        class nxp_depends_on(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='depends_on',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-fast-pixel-direction-depends-on-attribute
                .''',
                                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-fast-pixel-direction-depends-on-attribute',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_depends_on = SubSection(sub_section=nxp_depends_on.m_def,repeats=True)
                    nxp_fast_pixel_direction = SubSection(sub_section=nxp_fast_pixel_direction.m_def,repeats=True)
                    class nxp_slow_pixel_direction(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='slow_pixel_direction',
                        )
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NX_NUMBER',
                        )
                        nxp_units= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NX_LENGTH',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                                        Values along the direction of :ref:`slowest varying
                <Design-ArrayStorageOrder>`
                pixel direction. The direction itself is given through the vector
                attribute.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-slow-pixel-direction-field
                .''',
                            default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-slow-pixel-direction-field',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                        class nxp_transformation_type(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='transformation_type',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-slow-pixel-direction-transformation-type-attribute
                .''',
                                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-slow-pixel-direction-transformation-type-attribute',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                            nxp_enumeration= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            Possible values: translation''',
                                default='translation',
                            )
                        nxp_transformation_type = SubSection(sub_section=nxp_transformation_type.m_def,repeats=True)
                        class nxp_vector(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='vector',
                            )
                            nxp_type= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_NUMBER',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-slow-pixel-direction-vector-attribute
                .''',
                                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-slow-pixel-direction-vector-attribute',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_vector = SubSection(sub_section=nxp_vector.m_def,repeats=True)
                        class nxp_offset(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='offset',
                            )
                            nxp_type= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_NUMBER',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-slow-pixel-direction-offset-attribute
                .''',
                                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-slow-pixel-direction-offset-attribute',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_offset = SubSection(sub_section=nxp_offset.m_def,repeats=True)
                        class nxp_depends_on(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='depends_on',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-slow-pixel-direction-depends-on-attribute
                .''',
                                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-slow-pixel-direction-depends-on-attribute',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_depends_on = SubSection(sub_section=nxp_depends_on.m_def,repeats=True)
                    nxp_slow_pixel_direction = SubSection(sub_section=nxp_slow_pixel_direction.m_def,repeats=True)
                nxp_DETECTOR_MODULE = SubSection(sub_section=nxp_DETECTOR_MODULE.m_def,repeats=True)
            nxp_DETECTOR = SubSection(sub_section=nxp_DETECTOR.m_def,repeats=True)
            class nxp_BEAM(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXbeam.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXbeam',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_incident_wavelength(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='incident_wavelength',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_WAVELENGTH',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    In the case of a monchromatic beam this is the scalar
                wavelength.

                Several other use cases are permitted, depending on the
                presence or absence of other incident_wavelength_X
                fields.

                In the case of a polychromatic beam this is an array of
                length **m** of wavelengths, with the relative weights
                in ``incident_wavelength_weights``.

                In the case of a monochromatic beam that varies shot-
                to-shot, this is an array of wavelengths, one for each
                recorded shot. Here, ``incident_wavelength_weights`` and
                incident_wavelength_spread are not set.

                In the case of a polychromatic beam that varies shot-to-
                shot, this is an array of length **m** with the relative
                weights in ``incident_wavelength_weights`` as a 2D array.

                In the case of a polychromatic beam that varies shot-to-
                shot and where the channels also vary, this is a 2D array
                of dimensions **nP** by **m** (slow to fast) with the
                relative weights in ``incident_wavelength_weights`` as a 2D
                array.

                Note, :ref:`variants <Design-Variants>` are a good way
                to represent several of these use cases in a single dataset,
                e.g. if a calibrated, single-value wavelength value is
                available along with the original spectrum from which it
                was calibrated.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-incident-wavelength-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-incident-wavelength-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_incident_wavelength = SubSection(sub_section=nxp_incident_wavelength.m_def,repeats=True)
                class nxp_incident_wavelength_weight(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='incident_wavelength_weight',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_deprecated= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='use incident_wavelength_weights, see https://github.com/nexusformat/definitions/issues/837',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    In the case of a polychromatic beam this is an array of
                length **m** of the relative weights of the corresponding
                wavelengths in incident_wavelength.

                In the case of a polychromatic beam that varies shot-to-
                shot, this is a 2D array of dimensions **nP** by **m**
                (slow to fast) of the relative weights of the
                corresponding wavelengths in incident_wavelength.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-incident-wavelength-weight-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-incident-wavelength-weight-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_deprecated= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_incident_wavelength_weight = SubSection(sub_section=nxp_incident_wavelength_weight.m_def,repeats=True)
                class nxp_incident_wavelength_weights(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='incident_wavelength_weights',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    In the case of a polychromatic beam this is an array of
                length **m** of the relative weights of the corresponding
                wavelengths in ``incident_wavelength``.

                In the case of a polychromatic beam that varies shot-to-
                shot, this is a 2D array of dimensions **np** by **m**
                (slow to fast) of the relative weights of the
                corresponding wavelengths in ``incident_wavelength``.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-incident-wavelength-weights-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-incident-wavelength-weights-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_incident_wavelength_weights = SubSection(sub_section=nxp_incident_wavelength_weights.m_def,repeats=True)
                class nxp_incident_wavelength_spread(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='incident_wavelength_spread',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_WAVELENGTH',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    The wavelength spread FWHM for the corresponding
                wavelength(s) in incident_wavelength.

                In the case of shot-to-shot variation in the wavelength
                spread, this is a 2D array of dimension **nP** by
                **m** (slow to fast) of the spreads of the
                corresponding wavelengths in incident_wavelength.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-incident-wavelength-spread-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-incident-wavelength-spread-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_incident_wavelength_spread = SubSection(sub_section=nxp_incident_wavelength_spread.m_def,repeats=True)
                class nxp_flux(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='flux',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLUX',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Flux density incident on beam plane area in photons
                per second per unit area.

                In the case of a beam that varies in flux shot-to-shot,
                this is an array of values, one for each recorded shot.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-flux-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-flux-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_flux = SubSection(sub_section=nxp_flux.m_def,repeats=True)
                class nxp_total_flux(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='total_flux',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FREQUENCY',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Flux incident on beam plane in photons per second.

                In the case of a beam that varies in total flux shot-to-shot,
                this is an array of values, one for each recorded shot.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-total-flux-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-total-flux-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_total_flux = SubSection(sub_section=nxp_total_flux.m_def,repeats=True)
                class nxp_incident_beam_size(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='incident_beam_size',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_recommended= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='true',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Two-element array of FWHM (if Gaussian or Airy function) or
                diameters (if top hat) or widths (if rectangular) of the beam
                in the order x, y
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-incident-beam-size-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-incident-beam-size-field',
                    )
                nxp_incident_beam_size = SubSection(sub_section=nxp_incident_beam_size.m_def,repeats=True)
                class nxp_profile(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='profile',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_CHAR',
                    )
                    nxp_recommended= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='true',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    The beam profile, Gaussian, Airy function, top-hat or
                rectangular.  The profile is given in the plane of
                incidence of the beam on the sample.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-profile-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-profile-field',
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: Gaussian,Airy,top-hat,rectangular''',
                        default='Gaussian,Airy,top-hat,rectangular',
                    )
                nxp_profile = SubSection(sub_section=nxp_profile.m_def,repeats=True)
                class nxp_incident_polarisation_stokes(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='incident_polarisation_stokes',
                    )
                    nxp_recommended= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='true',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-incident-polarisation-stokes-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-incident-polarisation-stokes-field',
                    )
                nxp_incident_polarisation_stokes = SubSection(sub_section=nxp_incident_polarisation_stokes.m_def,repeats=True)
                class nxp_incident_wavelength_spectrum(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='incident_wavelength_spectrum',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NXdata',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-incident-wavelength-spectrum-group
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-incident-wavelength-spectrum-group',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_incident_wavelength_spectrum = SubSection(sub_section=nxp_incident_wavelength_spectrum.m_def,repeats=True)
            nxp_BEAM = SubSection(sub_section=nxp_BEAM.m_def,repeats=True)
        nxp_INSTRUMENT = SubSection(sub_section=nxp_INSTRUMENT.m_def,repeats=True)
        class nxp_SOURCE(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsource',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            The neutron or x-ray storage ring/facility. Note, the NXsource base class
                has many more fields available, but at present we only require the name.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-source-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-source-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Name of source.  Consistency with the naming in
                https://mmcif.wwpdb.org/dictionaries/mmcif_pdbx_v50.dic/Items/_diffrn_source.pdbx_synchrotron_site.html
                controlled vocabulary is highly recommended.
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-source-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-source-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_short_name(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='short_name',
                    )
                    nxp_optional= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='true',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    short name for source, perhaps the acronym
                https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-source-name-short-name-attribute
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-source-name-short-name-attribute',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_short_name = SubSection(sub_section=nxp_short_name.m_def,repeats=True)
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
        nxp_SOURCE = SubSection(sub_section=nxp_SOURCE.m_def,repeats=True)
    nxp_ENTRY = SubSection(sub_section=nxp_ENTRY.m_def,repeats=True)



class NXspe(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXspe',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        NXSPE Inelastic Format.  Application definition for NXSPE file format.
        https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_ENTRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_program_name(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='program_name',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-program-name-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-program-name-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_program_name = SubSection(sub_section=nxp_program_name.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms.
                https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXSPE,NXspe''',
                default='NXSPE,NXspe',
            )
            class nxp_version(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='version',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-definition-version-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-definition-version-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_version = SubSection(sub_section=nxp_version.m_def,repeats=True)
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_NXSPE_info(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXcollection.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXcollection',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXSPE_info',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-nxspe-info-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-nxspe-info-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_fixed_energy(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='fixed_energy',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ENERGY',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                The fixed energy used for this file.
                https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-nxspe-info-fixed-energy-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-nxspe-info-fixed-energy-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_fixed_energy = SubSection(sub_section=nxp_fixed_energy.m_def,repeats=True)
            class nxp_ki_over_kf_scaling(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_BOOLEAN.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='ki_over_kf_scaling',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_BOOLEAN',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Indicates whether ki/kf scaling has been applied or not.
                https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-nxspe-info-ki-over-kf-scaling-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-nxspe-info-ki-over-kf-scaling-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_ki_over_kf_scaling = SubSection(sub_section=nxp_ki_over_kf_scaling.m_def,repeats=True)
            class nxp_psi(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='psi',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Orientation angle as expected in DCS-MSlice
                https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-nxspe-info-psi-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-nxspe-info-psi-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_psi = SubSection(sub_section=nxp_psi.m_def,repeats=True)
        nxp_NXSPE_info = SubSection(sub_section=nxp_NXSPE_info.m_def,repeats=True)
        class nxp_data(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='data',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_azimuthal(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='azimuthal',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-azimuthal-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-azimuthal-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_azimuthal = SubSection(sub_section=nxp_azimuthal.m_def,repeats=True)
            class nxp_azimuthal_width(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='azimuthal_width',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-azimuthal-width-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-azimuthal-width-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_azimuthal_width = SubSection(sub_section=nxp_azimuthal_width.m_def,repeats=True)
            class nxp_polar(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='polar',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-polar-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-polar-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_polar = SubSection(sub_section=nxp_polar.m_def,repeats=True)
            class nxp_polar_width(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='polar_width',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-polar-width-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-polar-width-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_polar_width = SubSection(sub_section=nxp_polar_width.m_def,repeats=True)
            class nxp_distance(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='distance',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_LENGTH',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-distance-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-distance-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
            class nxp_data(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='data',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-data-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-data-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
            class nxp_error(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='error',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-error-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-error-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_error = SubSection(sub_section=nxp_error.m_def,repeats=True)
            class nxp_energy(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='energy',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ENERGY',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-energy-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-energy-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_energy = SubSection(sub_section=nxp_energy.m_def,repeats=True)
        nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
        class nxp_INSTRUMENT(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-instrument-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-instrument-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_FERMI_CHOPPER(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXfermi_chopper.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXfermi_chopper',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-instrument-fermi-chopper-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-instrument-fermi-chopper-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_energy(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='energy',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ENERGY',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-instrument-fermi-chopper-energy-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-instrument-fermi-chopper-energy-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_energy = SubSection(sub_section=nxp_energy.m_def,repeats=True)
            nxp_FERMI_CHOPPER = SubSection(sub_section=nxp_FERMI_CHOPPER.m_def,repeats=True)
        nxp_INSTRUMENT = SubSection(sub_section=nxp_INSTRUMENT.m_def,repeats=True)
        class nxp_SAMPLE(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_rotation_angle(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='rotation_angle',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-sample-rotation-angle-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-sample-rotation-angle-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_rotation_angle = SubSection(sub_section=nxp_rotation_angle.m_def,repeats=True)
            class nxp_seblock(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='seblock',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-sample-seblock-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-sample-seblock-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_seblock = SubSection(sub_section=nxp_seblock.m_def,repeats=True)
            class nxp_temperature(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='temperature',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_TEMPERATURE',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-sample-temperature-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-sample-temperature-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_temperature = SubSection(sub_section=nxp_temperature.m_def,repeats=True)
        nxp_SAMPLE = SubSection(sub_section=nxp_SAMPLE.m_def,repeats=True)
    nxp_ENTRY = SubSection(sub_section=nxp_ENTRY.m_def,repeats=True)



class NXarchive(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXarchive',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                This is a definition for data to be archived by ICAT
        (http://www.icatproject.org/).                  .. text from the icatproject.org
        site                          the database (with supporting software) that
        provides an                  interface to all ISIS experimental data and will
        provide                  a mechanism to link all aspects of ISIS research from
        proposal through to publication.
        https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_entry(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='entry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_index(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='index',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-index-attribute
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-index-attribute',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_index = SubSection(sub_section=nxp_index.m_def,repeats=True)
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-title-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-title-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_experiment_identifier(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='experiment_identifier',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            unique identifier for the experiment
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-experiment-identifier-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-experiment-identifier-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_experiment_identifier = SubSection(sub_section=nxp_experiment_identifier.m_def,repeats=True)
        class nxp_experiment_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='experiment_description',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Brief description of the experiment and its objectives
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-experiment-description-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-experiment-description-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_experiment_description = SubSection(sub_section=nxp_experiment_description.m_def,repeats=True)
        class nxp_collection_identifier(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='collection_identifier',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            ID of user or DAQ define group of data files
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-collection-identifier-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-collection-identifier-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_collection_identifier = SubSection(sub_section=nxp_collection_identifier.m_def,repeats=True)
        class nxp_collection_description(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='collection_description',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Brief summary of the collection, including grouping criteria
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-collection-description-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-collection-description-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_collection_description = SubSection(sub_section=nxp_collection_description.m_def,repeats=True)
        class nxp_entry_identifier(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='entry_identifier',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            unique identifier for this measurement as provided by the facility
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-entry-identifier-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-entry-identifier-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_entry_identifier = SubSection(sub_section=nxp_entry_identifier.m_def,repeats=True)
        class nxp_start_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-start-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-start-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start_time = SubSection(sub_section=nxp_start_time.m_def,repeats=True)
        class nxp_end_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='end_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-end-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-end-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_end_time = SubSection(sub_section=nxp_end_time.m_def,repeats=True)
        class nxp_duration(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='duration',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_FLOAT',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            TODO: needs documentation
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-duration-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-duration-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_duration = SubSection(sub_section=nxp_duration.m_def,repeats=True)
        class nxp_collection_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='collection_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_FLOAT',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            TODO: needs documentation
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-collection-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-collection-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_collection_time = SubSection(sub_section=nxp_collection_time.m_def,repeats=True)
        class nxp_run_cycle(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='run_cycle',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            TODO: needs documentation
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-run-cycle-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-run-cycle-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_run_cycle = SubSection(sub_section=nxp_run_cycle.m_def,repeats=True)
        class nxp_revision(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='revision',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            revision ID of this file, may be after recalibration, reprocessing etc.
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-revision-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-revision-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_revision = SubSection(sub_section=nxp_revision.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXarchive''',
                default='NXarchive',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_program(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='program',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            The program and version used for generating this file
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-program-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-program-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_version(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='version',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-program-version-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-program-version-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_version = SubSection(sub_section=nxp_version.m_def,repeats=True)
        nxp_program = SubSection(sub_section=nxp_program.m_def,repeats=True)
        class nxp_release_date(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='release_date',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            when this file is to be released into PD
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-release-date-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-release-date-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_release_date = SubSection(sub_section=nxp_release_date.m_def,repeats=True)
        class nxp_user(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXuser.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXuser',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='user',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-user-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-user-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-user-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-user-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_role(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='role',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                role of the user
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-user-role-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-user-role-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_role = SubSection(sub_section=nxp_role.m_def,repeats=True)
            class nxp_facility_user_id(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='facility_user_id',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ID of the user in the facility burocracy database
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-user-facility-user-id-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-user-facility-user-id-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_facility_user_id = SubSection(sub_section=nxp_facility_user_id.m_def,repeats=True)
        nxp_user = SubSection(sub_section=nxp_user.m_def,repeats=True)
        class nxp_instrument(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='instrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_description(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='description',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Brief description of the instrument
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-description-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-description-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
            class nxp_SOURCE(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXsource',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-source-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-source-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_type(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='type',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_CHAR',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-source-type-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-source-type-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: Spallation Neutron Source,Pulsed Reactor Neutron
                Source,Reactor Neutron Source,Synchrotron X-Ray Source,Pulsed Muon
                Source,Rotating Anode X-Ray,Fixed Tube X-Ray''',
                        default='Spallation Neutron Source,Pulsed Reactor Neutron Source,Reactor Neutron Source,Synchrotron X-Ray Source,Pulsed Muon Source,Rotating Anode X-Ray,Fixed Tube X-Ray',
                    )
                nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)
                class nxp_name(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='name',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-source-name-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-source-name-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
                class nxp_probe(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='probe',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-source-probe-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-source-probe-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: neutron,x-ray,electron''',
                        default='neutron,x-ray,electron',
                    )
                nxp_probe = SubSection(sub_section=nxp_probe.m_def,repeats=True)
            nxp_SOURCE = SubSection(sub_section=nxp_SOURCE.m_def,repeats=True)
        nxp_instrument = SubSection(sub_section=nxp_instrument.m_def,repeats=True)
        class nxp_sample(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='sample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Descriptive name of sample
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_sample_id(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='sample_id',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Unique database id of the sample
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-sample-id-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-sample-id-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_sample_id = SubSection(sub_section=nxp_sample_id.m_def,repeats=True)
            class nxp_description(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='description',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-description-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-description-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
            class nxp_type(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='type',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-type-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-type-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                nxp_enumeration= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Possible values: sample,sample+can,calibration sample,normalisation
                sample,simulated data,none,sample_environment''',
                    default='sample,sample+can,calibration sample,normalisation sample,simulated data,none,sample_environment',
                )
            nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)
            class nxp_chemical_formula(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='chemical_formula',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Chemical formula formatted according to CIF conventions
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-chemical-formula-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-chemical-formula-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_chemical_formula = SubSection(sub_section=nxp_chemical_formula.m_def,repeats=True)
            class nxp_preparation_date(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='preparation_date',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_TIME',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-preparation-date-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-preparation-date-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_preparation_date = SubSection(sub_section=nxp_preparation_date.m_def,repeats=True)
            class nxp_situation(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='situation',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Description of the environment the sample is in:                    air,
                vacuum, oxidizing atmosphere, dehydrated, etc.
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-situation-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-situation-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_situation = SubSection(sub_section=nxp_situation.m_def,repeats=True)
            class nxp_temperature(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='temperature',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_TEMPERATURE',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-temperature-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-temperature-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_temperature = SubSection(sub_section=nxp_temperature.m_def,repeats=True)
            class nxp_magnetic_field(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='magnetic_field',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CURRENT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-magnetic-field-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-magnetic-field-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_magnetic_field = SubSection(sub_section=nxp_magnetic_field.m_def,repeats=True)
            class nxp_electric_field(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='electric_field',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_VOLTAGE',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-electric-field-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-electric-field-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_electric_field = SubSection(sub_section=nxp_electric_field.m_def,repeats=True)
            class nxp_stress_field(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='stress_field',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_UNITLESS',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-stress-field-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-stress-field-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_stress_field = SubSection(sub_section=nxp_stress_field.m_def,repeats=True)
            class nxp_pressure(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='pressure',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_PRESSURE',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-pressure-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-pressure-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_pressure = SubSection(sub_section=nxp_pressure.m_def,repeats=True)
        nxp_sample = SubSection(sub_section=nxp_sample.m_def,repeats=True)
    nxp_entry = SubSection(sub_section=nxp_entry.m_def,repeats=True)



class NXmonopd(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXmonopd',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                Monochromatic Neutron and X-Ray Powder diffractometer                   Instrument
        definition for a powder diffractometer at a monochromatic neutron          or
        X-ray beam. This is both suited for a powder diffractometer          with a single
        detector or a powder diffractometer with a position          sensitive detector.
        https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_entry(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='entry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-title-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-title-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_start_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-start-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-start-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start_time = SubSection(sub_section=nxp_start_time.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXmonopd''',
                default='NXmonopd',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_INSTRUMENT(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_SOURCE(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXsource',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-source-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-source-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_type(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='type',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-source-type-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-source-type-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)
                class nxp_name(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='name',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-source-name-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-source-name-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
                class nxp_probe(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='probe',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-source-probe-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-source-probe-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: neutron,x-ray,electron''',
                        default='neutron,x-ray,electron',
                    )
                nxp_probe = SubSection(sub_section=nxp_probe.m_def,repeats=True)
            nxp_SOURCE = SubSection(sub_section=nxp_SOURCE.m_def,repeats=True)
            class nxp_CRYSTAL(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXcrystal.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXcrystal',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-crystal-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-crystal-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_wavelength(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='wavelength',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_WAVELENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Optimum diffracted wavelength
                https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-crystal-wavelength-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-crystal-wavelength-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_wavelength = SubSection(sub_section=nxp_wavelength.m_def,repeats=True)
            nxp_CRYSTAL = SubSection(sub_section=nxp_CRYSTAL.m_def,repeats=True)
            class nxp_DETECTOR(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-detector-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-detector-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_polar_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='polar_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_axis= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-detector-polar-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-detector-polar-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_polar_angle = SubSection(sub_section=nxp_polar_angle.m_def,repeats=True)
                class nxp_data(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_signal= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    detector signal (usually counts) are already                     corrected
                for detector efficiency
                https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-detector-data-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-detector-data-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
            nxp_DETECTOR = SubSection(sub_section=nxp_DETECTOR.m_def,repeats=True)
        nxp_INSTRUMENT = SubSection(sub_section=nxp_INSTRUMENT.m_def,repeats=True)
        class nxp_SAMPLE(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Descriptive name of sample
                https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-sample-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-sample-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_rotation_angle(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='rotation_angle',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Optional rotation angle for the case when the powder diagram
                has been obtained through an omega-2theta scan like from a
                traditional single detector powder diffractometer
                https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-sample-rotation-angle-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-sample-rotation-angle-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_rotation_angle = SubSection(sub_section=nxp_rotation_angle.m_def,repeats=True)
        nxp_SAMPLE = SubSection(sub_section=nxp_SAMPLE.m_def,repeats=True)
        class nxp_MONITOR(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXmonitor',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-monitor-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-monitor-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_mode(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='mode',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Count to a preset value based on either clock time (timer)
                or received monitor counts (monitor).
                https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-monitor-mode-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-monitor-mode-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                nxp_enumeration= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Possible values: monitor,timer''',
                    default='monitor,timer',
                )
            nxp_mode = SubSection(sub_section=nxp_mode.m_def,repeats=True)
            class nxp_preset(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='preset',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                preset value for time or monitor
                https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-monitor-preset-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-monitor-preset-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_preset = SubSection(sub_section=nxp_preset.m_def,repeats=True)
            class nxp_integral(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='integral',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANY',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Total integral monitor counts
                https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-monitor-integral-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-monitor-integral-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_integral = SubSection(sub_section=nxp_integral.m_def,repeats=True)
        nxp_MONITOR = SubSection(sub_section=nxp_MONITOR.m_def,repeats=True)
        class nxp_DATA(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-data-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-data-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_DATA = SubSection(sub_section=nxp_DATA.m_def,repeats=True)
    nxp_entry = SubSection(sub_section=nxp_entry.m_def,repeats=True)



class NXtofnpd(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXtofnpd',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        This is a application definition for raw data from a TOF neutron powder
        diffractometer
        https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_entry(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='entry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-title-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-title-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_start_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-start-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-start-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start_time = SubSection(sub_section=nxp_start_time.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXtofnpd''',
                default='NXtofnpd',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_pre_sample_flightpath(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='pre_sample_flightpath',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_FLOAT',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_LENGTH',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            This is the flight path before the sample position. This can be determined
                by a chopper,         by the moderator or the source itself. In other
                words: it the distance to the component         which gives the T0 signal
                to the detector electronics. If another component in the
                NXinstrument hierarchy provides this information, this should be a link.
                https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-pre-sample-flightpath-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-pre-sample-flightpath-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_pre_sample_flightpath = SubSection(sub_section=nxp_pre_sample_flightpath.m_def,repeats=True)
        class nxp_user(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXuser.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXuser',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='user',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-user-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-user-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-user-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-user-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
        nxp_user = SubSection(sub_section=nxp_user.m_def,repeats=True)
        class nxp_INSTRUMENT(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_detector(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='detector',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_data(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_signal= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-data-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-data-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
                class nxp_detector_number(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='detector_number',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_axis= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='2',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-detector-number-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-detector-number-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_detector_number = SubSection(sub_section=nxp_detector_number.m_def,repeats=True)
                class nxp_distance(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='distance',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    distance to sample for each detector
                https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-distance-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-distance-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
                class nxp_time_of_flight(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='time_of_flight',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_TIME_OF_FLIGHT',
                    )
                    nxp_axis= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-time-of-flight-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-time-of-flight-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_time_of_flight = SubSection(sub_section=nxp_time_of_flight.m_def,repeats=True)
                class nxp_polar_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='polar_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    polar angle for each detector element
                https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-polar-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-polar-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_polar_angle = SubSection(sub_section=nxp_polar_angle.m_def,repeats=True)
                class nxp_azimuthal_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='azimuthal_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    azimuthal angle for each detector element
                https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-azimuthal-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-azimuthal-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_azimuthal_angle = SubSection(sub_section=nxp_azimuthal_angle.m_def,repeats=True)
            nxp_detector = SubSection(sub_section=nxp_detector.m_def,repeats=True)
        nxp_INSTRUMENT = SubSection(sub_section=nxp_INSTRUMENT.m_def,repeats=True)
        class nxp_SAMPLE(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Descriptive name of sample
                https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-sample-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-sample-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
        nxp_SAMPLE = SubSection(sub_section=nxp_SAMPLE.m_def,repeats=True)
        class nxp_MONITOR(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXmonitor',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-monitor-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-monitor-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_mode(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='mode',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Count to a preset value based on either clock time (timer)             or
                received monitor counts (monitor).
                https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-monitor-mode-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-monitor-mode-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                nxp_enumeration= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Possible values: monitor,timer''',
                    default='monitor,timer',
                )
            nxp_mode = SubSection(sub_section=nxp_mode.m_def,repeats=True)
            class nxp_preset(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='preset',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                preset value for time or monitor
                https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-monitor-preset-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-monitor-preset-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_preset = SubSection(sub_section=nxp_preset.m_def,repeats=True)
            class nxp_distance(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='distance',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_LENGTH',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-monitor-distance-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-monitor-distance-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
            class nxp_data(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='data',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_INT',
                )
                nxp_signal= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-monitor-data-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-monitor-data-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
            class nxp_time_of_flight(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='time_of_flight',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_TIME_OF_FLIGHT',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-monitor-time-of-flight-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-monitor-time-of-flight-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_time_of_flight = SubSection(sub_section=nxp_time_of_flight.m_def,repeats=True)
        nxp_MONITOR = SubSection(sub_section=nxp_MONITOR.m_def,repeats=True)
        class nxp_data(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='data',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-data-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-data-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
    nxp_entry = SubSection(sub_section=nxp_entry.m_def,repeats=True)



class NXtomophase(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXtomophase',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                This is the application definition for x-ray or neutron tomography raw data with
        phase contrast variation at each point.               In tomography first
        some dark field images are measured, some bright field images and, of course the
        sample. In order        to properly sort the order of the images taken, a sequence
        number is stored with each image.
        https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_entry(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='entry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-title-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-title-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_start_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-start-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-start-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start_time = SubSection(sub_section=nxp_start_time.m_def,repeats=True)
        class nxp_end_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='end_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-end-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-end-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_end_time = SubSection(sub_section=nxp_end_time.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXtomophase''',
                default='NXtomophase',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_instrument(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='instrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_SOURCE(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXsource',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-source-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-source-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_type(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='type',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-source-type-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-source-type-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)
                class nxp_name(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='name',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-source-name-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-source-name-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
                class nxp_probe(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='probe',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-source-probe-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-source-probe-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: neutron,x-ray,electron''',
                        default='neutron,x-ray,electron',
                    )
                nxp_probe = SubSection(sub_section=nxp_probe.m_def,repeats=True)
            nxp_SOURCE = SubSection(sub_section=nxp_SOURCE.m_def,repeats=True)
            class nxp_bright_field(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='bright_field',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-bright-field-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-bright-field-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_data(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_signal= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-bright-field-data-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-bright-field-data-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
                class nxp_sequence_number(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='sequence_number',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-bright-field-sequence-number-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-bright-field-sequence-number-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_sequence_number = SubSection(sub_section=nxp_sequence_number.m_def,repeats=True)
            nxp_bright_field = SubSection(sub_section=nxp_bright_field.m_def,repeats=True)
            class nxp_dark_field(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='dark_field',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-dark-field-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-dark-field-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_data(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_signal= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-dark-field-data-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-dark-field-data-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
                class nxp_sequence_number(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='sequence_number',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-dark-field-sequence-number-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-dark-field-sequence-number-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_sequence_number = SubSection(sub_section=nxp_sequence_number.m_def,repeats=True)
            nxp_dark_field = SubSection(sub_section=nxp_dark_field.m_def,repeats=True)
            class nxp_sample(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='sample',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-sample-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-sample-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_data(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_signal= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-sample-data-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-sample-data-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
                class nxp_sequence_number(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='sequence_number',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-sample-sequence-number-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-sample-sequence-number-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_sequence_number = SubSection(sub_section=nxp_sequence_number.m_def,repeats=True)
                class nxp_x_pixel_size(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='x_pixel_size',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-sample-x-pixel-size-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-sample-x-pixel-size-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_x_pixel_size = SubSection(sub_section=nxp_x_pixel_size.m_def,repeats=True)
                class nxp_y_pixel_size(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='y_pixel_size',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-sample-y-pixel-size-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-sample-y-pixel-size-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_y_pixel_size = SubSection(sub_section=nxp_y_pixel_size.m_def,repeats=True)
                class nxp_distance(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='distance',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Distance between detector and sample
                https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-sample-distance-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-sample-distance-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
            nxp_sample = SubSection(sub_section=nxp_sample.m_def,repeats=True)
        nxp_instrument = SubSection(sub_section=nxp_instrument.m_def,repeats=True)
        class nxp_sample(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='sample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Descriptive name of sample
                https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-sample-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-sample-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_rotation_angle(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='rotation_angle',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANGLE',
                )
                nxp_axis= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-sample-rotation-angle-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-sample-rotation-angle-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_rotation_angle = SubSection(sub_section=nxp_rotation_angle.m_def,repeats=True)
            class nxp_x_translation(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='x_translation',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_LENGTH',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-sample-x-translation-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-sample-x-translation-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_x_translation = SubSection(sub_section=nxp_x_translation.m_def,repeats=True)
            class nxp_y_translation(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='y_translation',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_LENGTH',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-sample-y-translation-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-sample-y-translation-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_y_translation = SubSection(sub_section=nxp_y_translation.m_def,repeats=True)
            class nxp_z_translation(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='z_translation',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_LENGTH',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-sample-z-translation-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-sample-z-translation-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_z_translation = SubSection(sub_section=nxp_z_translation.m_def,repeats=True)
        nxp_sample = SubSection(sub_section=nxp_sample.m_def,repeats=True)
        class nxp_control(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXmonitor',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='control',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-control-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-control-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_integral(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='integral',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_ANY',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Total integral monitor counts for each measured frame. Allows a correction
                for           fluctuations in the beam between frames.
                https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-control-integral-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-control-integral-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_integral = SubSection(sub_section=nxp_integral.m_def,repeats=True)
        nxp_control = SubSection(sub_section=nxp_control.m_def,repeats=True)
        class nxp_data(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='data',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-data-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-data-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
    nxp_entry = SubSection(sub_section=nxp_entry.m_def,repeats=True)



class NXarpes(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXarpes',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                This is an application definition for angular resolved photo electron
        spectroscopy.          It has been drawn up with hemispherical electron analysers
        in mind.
        https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_ENTRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_entry(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='entry',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            NeXus convention is to use "entry1", "entry2", ...          for analysis
                software to locate each entry.
                https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-entry-attribute
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-entry-attribute',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_entry = SubSection(sub_section=nxp_entry.m_def,repeats=True)
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-title-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-title-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_start_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-start-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-start-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start_time = SubSection(sub_section=nxp_start_time.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms.
                https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXarpes''',
                default='NXarpes',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_INSTRUMENT(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_SOURCE(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXsource',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-source-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-source-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_type(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='type',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_CHAR',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-source-type-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-source-type-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)
                class nxp_name(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='name',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_CHAR',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-source-name-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-source-name-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
                class nxp_probe(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='probe',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-source-probe-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-source-probe-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: x-ray''',
                        default='x-ray',
                    )
                nxp_probe = SubSection(sub_section=nxp_probe.m_def,repeats=True)
            nxp_SOURCE = SubSection(sub_section=nxp_SOURCE.m_def,repeats=True)
            class nxp_monochromator(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXmonochromator.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXmonochromator',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='monochromator',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-monochromator-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-monochromator-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_energy(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='energy',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ENERGY',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-monochromator-energy-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-monochromator-energy-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_energy = SubSection(sub_section=nxp_energy.m_def,repeats=True)
            nxp_monochromator = SubSection(sub_section=nxp_monochromator.m_def,repeats=True)
            class nxp_analyser(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='analyser',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_data(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-data-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-data-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
                class nxp_lens_mode(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='lens_mode',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_CHAR',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    setting for the electron analyser lens
                https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-lens-mode-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-lens-mode-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_lens_mode = SubSection(sub_section=nxp_lens_mode.m_def,repeats=True)
                class nxp_acquisition_mode(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='acquisition_mode',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-acquisition-mode-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-acquisition-mode-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: swept,fixed''',
                        default='swept,fixed',
                    )
                nxp_acquisition_mode = SubSection(sub_section=nxp_acquisition_mode.m_def,repeats=True)
                class nxp_entrance_slit_shape(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='entrance_slit_shape',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-entrance-slit-shape-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-entrance-slit-shape-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_enumeration= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    Possible values: curved,straight''',
                        default='curved,straight',
                    )
                nxp_entrance_slit_shape = SubSection(sub_section=nxp_entrance_slit_shape.m_def,repeats=True)
                class nxp_entrance_slit_setting(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='entrance_slit_setting',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANY',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    dial setting of the entrance slit
                https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-entrance-slit-setting-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-entrance-slit-setting-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_entrance_slit_setting = SubSection(sub_section=nxp_entrance_slit_setting.m_def,repeats=True)
                class nxp_entrance_slit_size(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='entrance_slit_size',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    size of the entrance slit
                https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-entrance-slit-size-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-entrance-slit-size-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_entrance_slit_size = SubSection(sub_section=nxp_entrance_slit_size.m_def,repeats=True)
                class nxp_pass_energy(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='pass_energy',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ENERGY',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    energy of the electrons on the mean path of the analyser
                https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-pass-energy-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-pass-energy-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_pass_energy = SubSection(sub_section=nxp_pass_energy.m_def,repeats=True)
                class nxp_time_per_channel(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='time_per_channel',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_TIME',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    todo: define more clearly
                https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-time-per-channel-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-time-per-channel-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_time_per_channel = SubSection(sub_section=nxp_time_per_channel.m_def,repeats=True)
                class nxp_angles(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='angles',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Angular axis of the analyser data             which dimension the axis
                applies to is defined             using the normal NXdata methods.
                https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-angles-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-angles-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_angles = SubSection(sub_section=nxp_angles.m_def,repeats=True)
                class nxp_energies(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='energies',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_NUMBER',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ENERGY',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Energy axis of the analyser data             which dimension the axis
                applies to is defined             using the normal NXdata methods.
                https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-energies-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-energies-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_energies = SubSection(sub_section=nxp_energies.m_def,repeats=True)
                class nxp_sensor_size(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='sensor_size',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    number of raw active elements in each dimension
                https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-sensor-size-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-sensor-size-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_sensor_size = SubSection(sub_section=nxp_sensor_size.m_def,repeats=True)
                class nxp_region_origin(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='region_origin',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    origin of rectangular region selected for readout
                https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-region-origin-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-region-origin-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_region_origin = SubSection(sub_section=nxp_region_origin.m_def,repeats=True)
                class nxp_region_size(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='region_size',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    size of rectangular region selected for readout
                https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-region-size-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-region-size-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_region_size = SubSection(sub_section=nxp_region_size.m_def,repeats=True)
            nxp_analyser = SubSection(sub_section=nxp_analyser.m_def,repeats=True)
        nxp_INSTRUMENT = SubSection(sub_section=nxp_INSTRUMENT.m_def,repeats=True)
        class nxp_SAMPLE(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_CHAR',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Descriptive name of sample
                https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-sample-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-sample-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_temperature(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='temperature',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_TEMPERATURE',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-sample-temperature-field
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-sample-temperature-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_temperature = SubSection(sub_section=nxp_temperature.m_def,repeats=True)
        nxp_SAMPLE = SubSection(sub_section=nxp_SAMPLE.m_def,repeats=True)
        class nxp_DATA(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-data-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-data-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_DATA = SubSection(sub_section=nxp_DATA.m_def,repeats=True)
    nxp_ENTRY = SubSection(sub_section=nxp_ENTRY.m_def,repeats=True)



class NXdirecttof(NXtofraw):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXdirecttof',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXtofraw',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='application',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        This is a application definition for raw data from a direct geometry TOF
        spectrometer
        https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof .
        ''',
        default='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_entry(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='entry',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-title-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-title-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_start_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-start-time-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-start-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start_time = SubSection(sub_section=nxp_start_time.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXdirecttof''',
                default='NXdirecttof',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_INSTRUMENT(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            We definitly want the rotation_speed and energy of the chopper. Thus
                either            a fermi_chopper or a disk_chopper group is required.
                https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_fermi_chopper(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXfermi_chopper.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXfermi_chopper',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='fermi_chopper',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-fermi-chopper-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-fermi-chopper-group',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_rotation_speed(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='rotation_speed',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FREQUENCY',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    chopper rotation speed
                https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-fermi-chopper-rotation-speed-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-fermi-chopper-rotation-speed-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_rotation_speed = SubSection(sub_section=nxp_rotation_speed.m_def,repeats=True)
                class nxp_energy(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='energy',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ENERGY',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    energy selected
                https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-fermi-chopper-energy-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-fermi-chopper-energy-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_energy = SubSection(sub_section=nxp_energy.m_def,repeats=True)
            nxp_fermi_chopper = SubSection(sub_section=nxp_fermi_chopper.m_def,repeats=True)
            class nxp_disk_chopper(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdisk_chopper.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdisk_chopper',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='disk_chopper',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-disk-chopper-group
                .''',
                    default='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-disk-chopper-group',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_rotation_speed(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='rotation_speed',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FREQUENCY',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    chopper rotation speed
                https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-disk-chopper-rotation-speed-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-disk-chopper-rotation-speed-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_rotation_speed = SubSection(sub_section=nxp_rotation_speed.m_def,repeats=True)
                class nxp_energy(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='energy',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ENERGY',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    energy selected
                https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-disk-chopper-energy-field
                .''',
                        default='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-disk-chopper-energy-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_energy = SubSection(sub_section=nxp_energy.m_def,repeats=True)
            nxp_disk_chopper = SubSection(sub_section=nxp_disk_chopper.m_def,repeats=True)
        nxp_INSTRUMENT = SubSection(sub_section=nxp_INSTRUMENT.m_def,repeats=True)
    nxp_entry = SubSection(sub_section=nxp_entry.m_def,repeats=True)



class NXspecdata(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXspecdata',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='contributed',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                DEPRECATED: This definition will be removed by 2022.  Not for new use.

        Data collected by SPEC control and data acquisition software

        SPEC [#]_ is software for instrument control       and data acquisition in X-ray
        diffraction experiments.              .. [#] SPEC: https://certif.com
        https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata
        .
        ''',
        default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_ENTRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_deprecated= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='This definition will be removed by 2022.',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        one scan from a SPEC data file, starts with a **#S** line
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_deprecated= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_default(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='default',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            .. index:: plotting
                Declares which :ref:`NXdata` group                          contains the
                data to be shown by default.                         It is needed to
                resolve ambiguity when more than one :ref:`NXdata` group exists.
                The value is the name of the default :ref:`NXdata` group.
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-default-attribute
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-default-attribute',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            Official NeXus NXDL schema to which this subentry conforms.
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXspecdata''',
                default='NXspecdata',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_scan_number(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='scan_number',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_NUMBER',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            SPEC scan number
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-scan-number-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-scan-number-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_scan_number = SubSection(sub_section=nxp_scan_number.m_def,repeats=True)
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            SPEC scan number and command, from **#S** line                  SPEC data
                file line::                      #S 1  cscan en 690 750 60 0
                *title*::                      1  cscan en 690 750 60 0
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-title-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-title-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_command(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='command',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            SPEC scan command, from **#S** line, after the scan number.
                :SPEC data file line: ``#S 1  cscan en 690 750 60 0``
                :command*:  ``cscan en 690 750 60 0``
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-command-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-command-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_command = SubSection(sub_section=nxp_command.m_def,repeats=True)
        class nxp_date(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='date',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            date from **#D** line in scan header, in ISO8601 format
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-date-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-date-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_date = SubSection(sub_section=nxp_date.m_def,repeats=True)
        class nxp_comments(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='comments',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Any **#C** lines in this scan, stored as one string with newlines between
                comments
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-comments-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-comments-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_comments = SubSection(sub_section=nxp_comments.m_def,repeats=True)
        class nxp_Q(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='Q',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_NUMBER',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            **#Q** -- :math:`Q` (:math:`hkl`) at start of scan                  array
                of [:math:`h` :math:`k` :math:`l`]
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-q-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-q-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_Q = SubSection(sub_section=nxp_Q.m_def,repeats=True)
        class nxp_TEMP_SP(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='TEMP_SP',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_NUMBER',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            **#X** -- temperature set point
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-temp-sp-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-temp-sp-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_TEMP_SP = SubSection(sub_section=nxp_TEMP_SP.m_def,repeats=True)
        class nxp_DEGC_SP(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='DEGC_SP',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_NUMBER',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            **#X** -- temperature set point (C)
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-degc-sp-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-degc-sp-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_DEGC_SP = SubSection(sub_section=nxp_DEGC_SP.m_def,repeats=True)
        class nxp_MONITOR(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXmonitor',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-group
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_description(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='description',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-description-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-description-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
            class nxp_mode(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='mode',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Count to a preset value based on either clock time            (timer) or
                received monitor counts (monitor).
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-mode-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-mode-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                nxp_enumeration= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Possible values: monitor,timer''',
                    default='monitor,timer',
                )
            nxp_mode = SubSection(sub_section=nxp_mode.m_def,repeats=True)
            class nxp_preset(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='preset',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                preset value for time or monitor                      * **#M** -- counting
                against this constant monitor count (see #T)           * **#T** --
                counting against this constant number of seconds (see #M)
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-preset-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-preset-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_units(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='units',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-preset-units-attribute
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-preset-units-attribute',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_units = SubSection(sub_section=nxp_units.m_def,repeats=True)
            nxp_preset = SubSection(sub_section=nxp_preset.m_def,repeats=True)
            class nxp_data(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='data',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_nameType= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='any',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                array(s) of monitor data
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-data-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-data-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
            class nxp_count_time(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='count_time',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_nameType= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='any',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                array(s) of monitor data
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-count-time-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-count-time-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_count_time = SubSection(sub_section=nxp_count_time.m_def,repeats=True)
        nxp_MONITOR = SubSection(sub_section=nxp_MONITOR.m_def,repeats=True)
        class nxp_data(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='data',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            detector (and MCA) data from this scan
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-group
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_description(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='description',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-description-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-description-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
            class nxp_signal(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='signal',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                name of the field with the plottable data, typically the last column for
                1-D scans                      This is the primary dependent axis, such as
                two-theta detector.           This field must exist (or be linked) in this
                :ref:`NXdata` group.
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-signal-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-signal-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_signal = SubSection(sub_section=nxp_signal.m_def,repeats=True)
            class nxp_axes(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='axes',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                name(s) of the field(s) for plotting the data, typically the first column
                for 1-D scans                      These are the independent axes, such as
                positioners.  For 2-D or higher            dimension data, there will be a
                field named for each dimension,           separated by ":" (preferred) or
                "," or " " (whitespace).                      Such as for 2-D data plotted
                against *energy* and *th*::                          @axes = ["energy",
                "th"]                      This(these) field(s) must exist (or be linked)
                in this :ref:`NXdata` group.
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-axes-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-axes-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_axes = SubSection(sub_section=nxp_axes.m_def,repeats=True)
            class nxp_AXISNAME_indices(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='AXISNAME_indices',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                For each field named in *@axes*, there will be an instance of this
                attribute,           defining into which dimensions of the *@signal* data
                this field applies.           The value of this attribute is a list of
                index numbers using 0-based indexing           (first dimension is 0,
                seconds i 1, ...).                      Such as for 2-D data plotted
                against *energy* and *th*::                          @energy_indices = [0]
                @th_indices = [1]
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-axisname-indices-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-axisname-indices-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_AXISNAME_indices = SubSection(sub_section=nxp_AXISNAME_indices.m_def,repeats=True)
            class nxp_data(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='data',
                )
                nxp_nameType= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='any',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                one column of data from the scan                      HDF5 requires that
                each member of a group must have a unique name.                      Pick
                the name of column from **#L** but make it unique which means if the same
                name is used in more than one column, append a number to the extra
                instances           to make them unique yet preserve their content, just
                in case they might be different.                      Example: ``seconds
                seconds`` becomes ``seconds`` and ``seconda_1``.
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-data-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-data-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_spec_name(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='spec_name',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    name as specified in **#L** line, before it was made unique for HDF5
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-data-spec-name-attribute
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-data-spec-name-attribute',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_spec_name = SubSection(sub_section=nxp_spec_name.m_def,repeats=True)
                class nxp_units(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='units',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    Unless stated otherwise, units (not declared in the SPEC data file)
                are assumed to be *counts* for detectors and "unknown" for
                positioners or other scan columns.
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-data-units-attribute
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-data-units-attribute',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_units = SubSection(sub_section=nxp_units.m_def,repeats=True)
            nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
            class nxp_intensity_factor(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='intensity_factor',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                **#I** -- intensity normalizing factor
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-intensity-factor-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-intensity-factor-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_intensity_factor = SubSection(sub_section=nxp_intensity_factor.m_def,repeats=True)
            class nxp__mca_(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='_mca_',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data--mca--field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data--mca--field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp__mca_ = SubSection(sub_section=nxp__mca_.m_def,repeats=True)
            class nxp__mca_channel_(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='_mca_channel_',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data--mca-channel--field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data--mca-channel--field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp__mca_channel_ = SubSection(sub_section=nxp__mca_channel_.m_def,repeats=True)
            class nxp__mca1_(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='_mca1_',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data--mca1--field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data--mca1--field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp__mca1_ = SubSection(sub_section=nxp__mca1_.m_def,repeats=True)
            class nxp__mca1_channel_(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='_mca1_channel_',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data--mca1-channel--field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data--mca1-channel--field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp__mca1_channel_ = SubSection(sub_section=nxp__mca1_channel_.m_def,repeats=True)
        nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
        class nxp_counter_cross_reference(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='counter_cross_reference',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXnote',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            associates values declared in **#J** and **#j** scan header lines
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-counter-cross-reference-group
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-counter-cross-reference-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_comment(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='comment',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-counter-cross-reference-comment-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-counter-cross-reference-comment-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_comment = SubSection(sub_section=nxp_comment.m_def,repeats=True)
            class nxp_description(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='description',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-counter-cross-reference-description-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-counter-cross-reference-description-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
        nxp_counter_cross_reference = SubSection(sub_section=nxp_counter_cross_reference.m_def,repeats=True)
        class nxp_positioner_cross_reference(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='positioner_cross_reference',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXnote',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            associates values declared in **#O** and **#o** scan header lines
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-positioner-cross-reference-group
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-positioner-cross-reference-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_comment(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='comment',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-positioner-cross-reference-comment-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-positioner-cross-reference-comment-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_comment = SubSection(sub_section=nxp_comment.m_def,repeats=True)
            class nxp_description(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='description',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-positioner-cross-reference-description-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-positioner-cross-reference-description-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
        nxp_positioner_cross_reference = SubSection(sub_section=nxp_positioner_cross_reference.m_def,repeats=True)
        class nxp_spec(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='spec',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            various metadata from the SPEC scan header that have well-known NeXus base
                clases
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-spec-group
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-spec-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_UB(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXcrystal.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='UB',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXcrystal',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Orientation matrix of single crystal sample using Busing-Levy convention
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-spec-ub-group
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-spec-ub-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_orientation_matrix(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='orientation_matrix',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    **#G3** line in scan header
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-spec-ub-orientation-matrix-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-spec-ub-orientation-matrix-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_orientation_matrix = SubSection(sub_section=nxp_orientation_matrix.m_def,repeats=True)
            nxp_UB = SubSection(sub_section=nxp_UB.m_def,repeats=True)
        nxp_spec = SubSection(sub_section=nxp_spec.m_def,repeats=True)
        class nxp_G(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='G',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXnote',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            SPEC geometry variables for this diffractometer geometry (instrument
                specific)                  TODO: give interpreted name for each array
                value (need to figure out how to get the names)
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-group
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_comment(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='comment',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-comment-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-comment-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_comment = SubSection(sub_section=nxp_comment.m_def,repeats=True)
            class nxp_description(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='description',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-description-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-description-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
            class nxp_G0(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='G0',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                geometry parameters from G[] array (geo mode, sector, etc)
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-g0-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-g0-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_G0 = SubSection(sub_section=nxp_G0.m_def,repeats=True)
            class nxp_G1(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='G1',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                geometry parameters from U[] array (lattice constants, orientation
                reflections)
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-g1-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-g1-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_G1 = SubSection(sub_section=nxp_G1.m_def,repeats=True)
            class nxp_G2(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='G2',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                not used, although some files has a single zero value
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-g2-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-g2-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_G2 = SubSection(sub_section=nxp_G2.m_def,repeats=True)
            class nxp_G4(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='G4',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                geometry parameters from Q[] array (lambda, frozen angles, cut points,
                etc)
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-g4-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-g4-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_G4 = SubSection(sub_section=nxp_G4.m_def,repeats=True)
        nxp_G = SubSection(sub_section=nxp_G.m_def,repeats=True)
        class nxp_positioners(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='positioners',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXnote',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            names and values of all positioners (**#O** and **#P** lines) in scan
                header
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-positioners-group
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-positioners-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_description(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='description',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-positioners-description-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-positioners-description-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
            class nxp_positioner(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='positioner',
                )
                nxp_nameType= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='any',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                one positioner from the scan header                      HDF5 requires
                that each member of a group must have a unique name.
                SPEC assigns a unique name to each positioner, no extra work is neccesary
                to comply with the HDF5 rule for unique names in a group.
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-positioners-positioner-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-positioners-positioner-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_positioner = SubSection(sub_section=nxp_positioner.m_def,repeats=True)
        nxp_positioners = SubSection(sub_section=nxp_positioners.m_def,repeats=True)
        class nxp_MCA(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='MCA',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXnote',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            **#@CALIB** -- coefficients to compute a scale based on the MCA channel
                number
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-group
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_description(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='description',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-description-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-description-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
            class nxp_preset_time(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='preset_time',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-preset-time-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-preset-time-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_preset_time = SubSection(sub_section=nxp_preset_time.m_def,repeats=True)
            class nxp_elapsed_live_time(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='elapsed_live_time',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-elapsed-live-time-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-elapsed-live-time-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_elapsed_live_time = SubSection(sub_section=nxp_elapsed_live_time.m_def,repeats=True)
            class nxp_elapsed_real_time(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='elapsed_real_time',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-elapsed-real-time-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-elapsed-real-time-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_elapsed_real_time = SubSection(sub_section=nxp_elapsed_real_time.m_def,repeats=True)
            class nxp_number_saved(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='number_saved',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-number-saved-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-number-saved-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_number_saved = SubSection(sub_section=nxp_number_saved.m_def,repeats=True)
            class nxp_first_saved(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='first_saved',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_INT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-first-saved-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-first-saved-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_first_saved = SubSection(sub_section=nxp_first_saved.m_def,repeats=True)
            class nxp_last_saved(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='last_saved',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_INT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-last-saved-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-last-saved-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_last_saved = SubSection(sub_section=nxp_last_saved.m_def,repeats=True)
            class nxp_reduction_coef(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='reduction_coef',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-reduction-coef-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-reduction-coef-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_reduction_coef = SubSection(sub_section=nxp_reduction_coef.m_def,repeats=True)
            class nxp_calib_a(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='calib_a',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-calib-a-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-calib-a-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_calib_a = SubSection(sub_section=nxp_calib_a.m_def,repeats=True)
            class nxp_calib_b(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='calib_b',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-calib-b-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-calib-b-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_calib_b = SubSection(sub_section=nxp_calib_b.m_def,repeats=True)
            class nxp_calib_c(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='calib_c',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-calib-c-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-calib-c-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_calib_c = SubSection(sub_section=nxp_calib_c.m_def,repeats=True)
            class nxp_ROI(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='ROI',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXnote',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-roi-group
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-roi-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_roiN(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='roiN',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    numbered regions of interest, use an index number as part of the name
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-roi-roin-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-roi-roin-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    class nxp_description(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='description',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ``first_channel, last_channel``
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-roi-roin-description-attribute
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-roi-roin-description-attribute',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                    nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
                    class nxp_first_channel(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='first_channel',
                        )
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NX_INT',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-roi-roin-first-channel-attribute
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-roi-roin-first-channel-attribute',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                    nxp_first_channel = SubSection(sub_section=nxp_first_channel.m_def,repeats=True)
                    class nxp_last_channel(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='last_channel',
                        )
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NX_INT',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-roi-roin-last-channel-attribute
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-roi-roin-last-channel-attribute',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                    nxp_last_channel = SubSection(sub_section=nxp_last_channel.m_def,repeats=True)
                nxp_roiN = SubSection(sub_section=nxp_roiN.m_def,repeats=True)
            nxp_ROI = SubSection(sub_section=nxp_ROI.m_def,repeats=True)
        nxp_MCA = SubSection(sub_section=nxp_MCA.m_def,repeats=True)
        class nxp_metadata(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='metadata',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXnote',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            SPEC metadata (UNICAT-style #H and #V lines)                  This is a
                block that may be unique to SPEC files acquired at certain         APS
                beam lines.  Other facilities or instruments may use this block
                for storing key:value pairs of data where the values have suitable
                attributes (such as units).
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-metadata-group
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-metadata-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_description(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='description',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-metadata-description-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-metadata-description-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
        nxp_metadata = SubSection(sub_section=nxp_metadata.m_def,repeats=True)
        class nxp_SPEC_user(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXuser.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='SPEC_user',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXuser',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-spec-user-group
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-spec-user-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_SPEC_user(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='SPEC_user',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                user name from first **#C** line in file header
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-spec-user-spec-user-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-spec-user-spec-user-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_SPEC_user = SubSection(sub_section=nxp_SPEC_user.m_def,repeats=True)
        nxp_SPEC_user = SubSection(sub_section=nxp_SPEC_user.m_def,repeats=True)
        class nxp__unrecognized(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='_unrecognized',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXnote',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Fallback for any SPEC data file control lines not otherwise placed
                into groups or fields elsewhere in this specification.
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry--unrecognized-group
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry--unrecognized-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_comment(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='comment',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry--unrecognized-comment-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry--unrecognized-comment-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_comment = SubSection(sub_section=nxp_comment.m_def,repeats=True)
            class nxp_description(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='description',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry--unrecognized-description-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry--unrecognized-description-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
        nxp__unrecognized = SubSection(sub_section=nxp__unrecognized.m_def,repeats=True)
    nxp_ENTRY = SubSection(sub_section=nxp_ENTRY.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting              Declares which :ref:`NXentry` group
                contains the data to be shown by default.       It is needed to resolve
                ambiguity when more than one :ref:`NXentry` group exists.        The value
                is the name of the default :ref:`NXentry` group.
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-default-attribute',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)


    class nxp_HDF5_Version(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='HDF5_Version',
        )
        nxp_optional= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='false',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Version of HDF5 library used in writing the file (as specified in
                :ref:`NXroot`).              Note this attribute is spelled with uppercase
                "V",       different than other version attributes.
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-hdf5-version-attribute
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-hdf5-version-attribute',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_HDF5_Version = SubSection(sub_section=nxp_HDF5_Version.m_def,repeats=True)


    class nxp_h5py_version(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='h5py_version',
        )
        nxp_optional= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='true',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        version of h5py Python package used to write this HDF5 file
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-h5py-version-attribute
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-h5py-version-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_h5py_version = SubSection(sub_section=nxp_h5py_version.m_def,repeats=True)


    class nxp_SPEC_file(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='SPEC_file',
        )
        nxp_optional= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='true',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        original SPEC data file name from **#F** line in file header
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-spec-file-attribute
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-spec-file-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_SPEC_file = SubSection(sub_section=nxp_SPEC_file.m_def,repeats=True)


    class nxp_SPEC_date(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='SPEC_date',
        )
        nxp_optional= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='true',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        date from **#D** line in file header, in ISO8601 format
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-spec-date-attribute
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-spec-date-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_SPEC_date = SubSection(sub_section=nxp_SPEC_date.m_def,repeats=True)


    class nxp_SPEC_epoch(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='SPEC_epoch',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        UNIX time epoch from **#E** line in file header
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-spec-epoch-attribute
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-spec-epoch-attribute',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_SPEC_epoch = SubSection(sub_section=nxp_SPEC_epoch.m_def,repeats=True)


    class nxp_SPEC_comments(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='SPEC_comments',
        )
        nxp_optional= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='true',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        any **#C** lines in file header, stored as one string with newlines
                between comments
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-spec-comments-attribute
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-spec-comments-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_SPEC_comments = SubSection(sub_section=nxp_SPEC_comments.m_def,repeats=True)


    class nxp_SPEC_num_headers(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='SPEC_num_headers',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_INT',
        )
        nxp_optional= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='true',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Number of header sections found in the spec file
                https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-spec-num-headers-attribute
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-spec-num-headers-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_SPEC_num_headers = SubSection(sub_section=nxp_SPEC_num_headers.m_def,repeats=True)



class NXsnshisto(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXsnshisto',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='contributed',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        This is a definition for histogram data from Spallation Neutron Source (SNS) at
        ORNL.
        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto
        .
        ''',
        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_ENTRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_collection_identifier(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='collection_identifier',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-collection-identifier-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-collection-identifier-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_collection_identifier = SubSection(sub_section=nxp_collection_identifier.m_def,repeats=True)
        class nxp_collection_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='collection_title',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-collection-title-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-collection-title-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_collection_title = SubSection(sub_section=nxp_collection_title.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Official NXDL schema after this file goes to applications.
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXsnshisto''',
                default='NXsnshisto',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_duration(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='duration',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_FLOAT',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-duration-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-duration-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_duration = SubSection(sub_section=nxp_duration.m_def,repeats=True)
        class nxp_end_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='end_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-end-time-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-end-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_end_time = SubSection(sub_section=nxp_end_time.m_def,repeats=True)
        class nxp_entry_identifier(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='entry_identifier',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-entry-identifier-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-entry-identifier-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_entry_identifier = SubSection(sub_section=nxp_entry_identifier.m_def,repeats=True)
        class nxp_experiment_identifier(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='experiment_identifier',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-experiment-identifier-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-experiment-identifier-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_experiment_identifier = SubSection(sub_section=nxp_experiment_identifier.m_def,repeats=True)
        class nxp_notes(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='notes',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-notes-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-notes-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_notes = SubSection(sub_section=nxp_notes.m_def,repeats=True)
        class nxp_proton_charge(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='proton_charge',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_FLOAT',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHARGE',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-proton-charge-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-proton-charge-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_proton_charge = SubSection(sub_section=nxp_proton_charge.m_def,repeats=True)
        class nxp_raw_frames(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='raw_frames',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_INT',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-raw-frames-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-raw-frames-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_raw_frames = SubSection(sub_section=nxp_raw_frames.m_def,repeats=True)
        class nxp_run_number(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='run_number',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-run-number-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-run-number-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_run_number = SubSection(sub_section=nxp_run_number.m_def,repeats=True)
        class nxp_start_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-start-time-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-start-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start_time = SubSection(sub_section=nxp_start_time.m_def,repeats=True)
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-title-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-title-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_total_counts(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='total_counts',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_UINT',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_UNITLESS',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-total-counts-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-total-counts-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_total_counts = SubSection(sub_section=nxp_total_counts.m_def,repeats=True)
        class nxp_total_uncounted_counts(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='total_uncounted_counts',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_UINT',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_UNITLESS',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-total-uncounted-counts-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-total-uncounted-counts-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_total_uncounted_counts = SubSection(sub_section=nxp_total_uncounted_counts.m_def,repeats=True)
        class nxp_DASlogs(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXcollection.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXcollection',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='DASlogs',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Details of all logs, both from cvinfo file and from HistoTool (frequency
                and proton_charge).
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-group
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_LOG(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXlog',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-group
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_average_value(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='average_value',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-average-value-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-average-value-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_average_value = SubSection(sub_section=nxp_average_value.m_def,repeats=True)
                class nxp_average_value_error(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='average_value_error',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_deprecated= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='see https://github.com/nexusformat/definitions/issues/821',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-average-value-error-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-average-value-error-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_deprecated= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_average_value_error = SubSection(sub_section=nxp_average_value_error.m_def,repeats=True)
                class nxp_average_value_errors(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='average_value_errors',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-average-value-errors-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-average-value-errors-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_average_value_errors = SubSection(sub_section=nxp_average_value_errors.m_def,repeats=True)
                class nxp_description(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='description',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-description-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-description-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
                class nxp_duration(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='duration',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-duration-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-duration-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_duration = SubSection(sub_section=nxp_duration.m_def,repeats=True)
                class nxp_maximum_value(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='maximum_value',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-maximum-value-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-maximum-value-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_maximum_value = SubSection(sub_section=nxp_maximum_value.m_def,repeats=True)
                class nxp_minimum_value(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='minimum_value',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-minimum-value-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-minimum-value-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_minimum_value = SubSection(sub_section=nxp_minimum_value.m_def,repeats=True)
                class nxp_time(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='time',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-time-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-time-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_time = SubSection(sub_section=nxp_time.m_def,repeats=True)
                class nxp_value(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='value',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-value-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-value-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_value = SubSection(sub_section=nxp_value.m_def,repeats=True)
            nxp_LOG = SubSection(sub_section=nxp_LOG.m_def,repeats=True)
            class nxp_POSITIONER(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXpositioner.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXpositioner',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Motor logs from cvinfo file.
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-group
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-group',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_average_value(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='average_value',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-average-value-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-average-value-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_average_value = SubSection(sub_section=nxp_average_value.m_def,repeats=True)
                class nxp_average_value_error(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='average_value_error',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_deprecated= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='see https://github.com/nexusformat/definitions/issues/821',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-average-value-error-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-average-value-error-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_deprecated= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_average_value_error = SubSection(sub_section=nxp_average_value_error.m_def,repeats=True)
                class nxp_average_value_errors(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='average_value_errors',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-average-value-errors-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-average-value-errors-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_average_value_errors = SubSection(sub_section=nxp_average_value_errors.m_def,repeats=True)
                class nxp_description(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='description',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-description-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-description-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
                class nxp_duration(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='duration',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-duration-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-duration-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_duration = SubSection(sub_section=nxp_duration.m_def,repeats=True)
                class nxp_maximum_value(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='maximum_value',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-maximum-value-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-maximum-value-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_maximum_value = SubSection(sub_section=nxp_maximum_value.m_def,repeats=True)
                class nxp_minimum_value(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='minimum_value',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-minimum-value-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-minimum-value-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_minimum_value = SubSection(sub_section=nxp_minimum_value.m_def,repeats=True)
                class nxp_time(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='time',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-time-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-time-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_time = SubSection(sub_section=nxp_time.m_def,repeats=True)
                class nxp_value(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='value',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-value-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-value-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_value = SubSection(sub_section=nxp_value.m_def,repeats=True)
            nxp_POSITIONER = SubSection(sub_section=nxp_POSITIONER.m_def,repeats=True)
        nxp_DASlogs = SubSection(sub_section=nxp_DASlogs.m_def,repeats=True)
        class nxp_SNSHistoTool(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXnote',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='SNSHistoTool',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-group
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_SNSbanking_file_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='SNSbanking_file_name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-snsbanking-file-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-snsbanking-file-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_SNSbanking_file_name = SubSection(sub_section=nxp_SNSbanking_file_name.m_def,repeats=True)
            class nxp_SNSmapping_file_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='SNSmapping_file_name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-snsmapping-file-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-snsmapping-file-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_SNSmapping_file_name = SubSection(sub_section=nxp_SNSmapping_file_name.m_def,repeats=True)
            class nxp_author(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='author',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-author-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-author-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_author = SubSection(sub_section=nxp_author.m_def,repeats=True)
            class nxp_command1(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='command1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Command string for event2histo_nxl.
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-command1-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-command1-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_command1 = SubSection(sub_section=nxp_command1.m_def,repeats=True)
            class nxp_date(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='date',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-date-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-date-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_date = SubSection(sub_section=nxp_date.m_def,repeats=True)
            class nxp_description(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='description',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-description-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-description-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
            class nxp_version(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='version',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-version-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-version-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_version = SubSection(sub_section=nxp_version.m_def,repeats=True)
        nxp_SNSHistoTool = SubSection(sub_section=nxp_SNSHistoTool.m_def,repeats=True)
        class nxp_DATA(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='1',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-data-group
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-data-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_DATA = SubSection(sub_section=nxp_DATA.m_def,repeats=True)
        class nxp_instrument(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='instrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_SNSdetector_calibration_id(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='SNSdetector_calibration_id',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Detector calibration id from DAS.
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-snsdetector-calibration-id-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-snsdetector-calibration-id-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_SNSdetector_calibration_id = SubSection(sub_section=nxp_SNSdetector_calibration_id.m_def,repeats=True)
            class nxp_SNSgeometry_file_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='SNSgeometry_file_name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-snsgeometry-file-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-snsgeometry-file-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_SNSgeometry_file_name = SubSection(sub_section=nxp_SNSgeometry_file_name.m_def,repeats=True)
            class nxp_SNStranslation_service(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='SNStranslation_service',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-snstranslation-service-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-snstranslation-service-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_SNStranslation_service = SubSection(sub_section=nxp_SNStranslation_service.m_def,repeats=True)
            class nxp_beamline(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='beamline',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-beamline-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-beamline-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_beamline = SubSection(sub_section=nxp_beamline.m_def,repeats=True)
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_SNS(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXsource',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='SNS',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-sns-group
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-sns-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_frequency(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='frequency',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FREQUENCY',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-sns-frequency-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-sns-frequency-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_frequency = SubSection(sub_section=nxp_frequency.m_def,repeats=True)
                class nxp_name(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='name',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-sns-name-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-sns-name-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
                class nxp_probe(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='probe',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-sns-probe-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-sns-probe-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_probe = SubSection(sub_section=nxp_probe.m_def,repeats=True)
                class nxp_type(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='type',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-sns-type-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-sns-type-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)
            nxp_SNS = SubSection(sub_section=nxp_SNS.m_def,repeats=True)
            class nxp_DETECTOR(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-group
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_azimuthal_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='azimuthal_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-azimuthal-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-azimuthal-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_azimuthal_angle = SubSection(sub_section=nxp_azimuthal_angle.m_def,repeats=True)
                class nxp_data(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_UINT',
                    )
                    nxp_signal= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_axes= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='x_pixel_offset,y_pixel_offset,time_of_flight',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-data-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-data-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
                class nxp_data_x_time_of_flight(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data_x_time_of_flight',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_UINT',
                    )
                    nxp_signal= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='3',
                    )
                    nxp_axes= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='x_pixel_offset,time_of_flight',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-data-x-time-of-flight-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-data-x-time-of-flight-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_data_x_time_of_flight = SubSection(sub_section=nxp_data_x_time_of_flight.m_def,repeats=True)
                class nxp_data_x_y(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data_x_y',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_UINT',
                    )
                    nxp_signal= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='2',
                    )
                    nxp_axes= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='x_pixel_offset,y_pixel_offset',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-data-x-y-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-data-x-y-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_data_x_y = SubSection(sub_section=nxp_data_x_y.m_def,repeats=True)
                class nxp_data_y_time_of_flight(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data_y_time_of_flight',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_UINT',
                    )
                    nxp_signal= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='4',
                    )
                    nxp_axes= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='y_pixel_offset,time_of_flight',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-data-y-time-of-flight-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-data-y-time-of-flight-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_data_y_time_of_flight = SubSection(sub_section=nxp_data_y_time_of_flight.m_def,repeats=True)
                class nxp_distance(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='distance',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-distance-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-distance-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
                class nxp_pixel_id(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='pixel_id',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_UINT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-pixel-id-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-pixel-id-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_pixel_id = SubSection(sub_section=nxp_pixel_id.m_def,repeats=True)
                class nxp_polar_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='polar_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-polar-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-polar-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_polar_angle = SubSection(sub_section=nxp_polar_angle.m_def,repeats=True)
                class nxp_time_of_flight(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='time_of_flight',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_axis= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='3',
                    )
                    nxp_primary= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_TIME_OF_FLIGHT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-time-of-flight-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-time-of-flight-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_time_of_flight = SubSection(sub_section=nxp_time_of_flight.m_def,repeats=True)
                class nxp_total_counts(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='total_counts',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_UINT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-total-counts-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-total-counts-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_total_counts = SubSection(sub_section=nxp_total_counts.m_def,repeats=True)
                class nxp_x_pixel_offset(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='x_pixel_offset',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_axis= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_primary= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-x-pixel-offset-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-x-pixel-offset-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_x_pixel_offset = SubSection(sub_section=nxp_x_pixel_offset.m_def,repeats=True)
                class nxp_y_pixel_offset(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='y_pixel_offset',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_axis= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='2',
                    )
                    nxp_primary= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-y-pixel-offset-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-y-pixel-offset-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_y_pixel_offset = SubSection(sub_section=nxp_y_pixel_offset.m_def,repeats=True)
                class nxp_origin(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NXgeometry',
                    )
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='origin',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-group
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-group',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    class nxp_orientation(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NXorientation.m_def,repeats=True)
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NXorientation',
                        )
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='orientation',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-orientation-group
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-orientation-group',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                        class nxp_value(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='value',
                            )
                            nxp_type= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_FLOAT',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                                            Six out of nine rotation parameters.
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-orientation-value-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-orientation-value-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_value = SubSection(sub_section=nxp_value.m_def,repeats=True)
                    nxp_orientation = SubSection(sub_section=nxp_orientation.m_def,repeats=True)
                    class nxp_shape(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NXshape.m_def,repeats=True)
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NXshape',
                        )
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='shape',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-shape-group
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-shape-group',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                        class nxp_description(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='description',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-shape-description-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-shape-description-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
                        class nxp_shape(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='shape',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-shape-shape-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-shape-shape-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_shape = SubSection(sub_section=nxp_shape.m_def,repeats=True)
                        class nxp_size(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='size',
                            )
                            nxp_type= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_FLOAT',
                            )
                            nxp_units= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_LENGTH',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-shape-size-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-shape-size-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_size = SubSection(sub_section=nxp_size.m_def,repeats=True)
                    nxp_shape = SubSection(sub_section=nxp_shape.m_def,repeats=True)
                    class nxp_translation(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NXtranslation.m_def,repeats=True)
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NXtranslation',
                        )
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='translation',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-translation-group
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-translation-group',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                        class nxp_distance(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='distance',
                            )
                            nxp_type= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_FLOAT',
                            )
                            nxp_units= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_LENGTH',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-translation-distance-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-translation-distance-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
                    nxp_translation = SubSection(sub_section=nxp_translation.m_def,repeats=True)
                nxp_origin = SubSection(sub_section=nxp_origin.m_def,repeats=True)
            nxp_DETECTOR = SubSection(sub_section=nxp_DETECTOR.m_def,repeats=True)
            class nxp_DISK_CHOPPER(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdisk_chopper.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdisk_chopper',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Original specification called for NXchopper,              which is not a
                valid NeXus base class.             Select either NXdisk_chopper or
                NXfermi_chopper, as appropriate.
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-disk-chopper-group
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-disk-chopper-group',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_distance(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='distance',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-disk-chopper-distance-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-disk-chopper-distance-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
            nxp_DISK_CHOPPER = SubSection(sub_section=nxp_DISK_CHOPPER.m_def,repeats=True)
            class nxp_FERMI_CHOPPER(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXfermi_chopper.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXfermi_chopper',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Original specification called for NXchopper,              which is not a
                valid NeXus base class.             Select either NXdisk_chopper or
                NXfermi_chopper, as appropriate.
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-fermi-chopper-group
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-fermi-chopper-group',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_distance(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='distance',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-fermi-chopper-distance-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-fermi-chopper-distance-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
            nxp_FERMI_CHOPPER = SubSection(sub_section=nxp_FERMI_CHOPPER.m_def,repeats=True)
            class nxp_moderator(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXmoderator.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXmoderator',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='moderator',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-moderator-group
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-moderator-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_coupling_material(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='coupling_material',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-moderator-coupling-material-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-moderator-coupling-material-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_coupling_material = SubSection(sub_section=nxp_coupling_material.m_def,repeats=True)
                class nxp_distance(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='distance',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-moderator-distance-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-moderator-distance-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
                class nxp_temperature(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='temperature',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_TEMPERATURE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-moderator-temperature-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-moderator-temperature-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_temperature = SubSection(sub_section=nxp_temperature.m_def,repeats=True)
                class nxp_type(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='type',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-moderator-type-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-moderator-type-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)
            nxp_moderator = SubSection(sub_section=nxp_moderator.m_def,repeats=True)
            class nxp_APERTURE(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXaperture.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXaperture',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-group
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-group',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_x_pixel_offset(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='x_pixel_offset',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-x-pixel-offset-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-x-pixel-offset-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_x_pixel_offset = SubSection(sub_section=nxp_x_pixel_offset.m_def,repeats=True)
                class nxp_origin(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NXgeometry',
                    )
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='origin',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-group
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-group',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    class nxp_orientation(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NXorientation.m_def,repeats=True)
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NXorientation',
                        )
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='orientation',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-orientation-group
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-orientation-group',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                        class nxp_value(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='value',
                            )
                            nxp_type= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_FLOAT',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                                            Six out of nine rotation parameters.
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-orientation-value-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-orientation-value-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_value = SubSection(sub_section=nxp_value.m_def,repeats=True)
                    nxp_orientation = SubSection(sub_section=nxp_orientation.m_def,repeats=True)
                    class nxp_shape(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NXshape.m_def,repeats=True)
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NXshape',
                        )
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='shape',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-shape-group
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-shape-group',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                        class nxp_description(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='description',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-shape-description-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-shape-description-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
                        class nxp_shape(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='shape',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-shape-shape-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-shape-shape-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_shape = SubSection(sub_section=nxp_shape.m_def,repeats=True)
                        class nxp_size(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='size',
                            )
                            nxp_type= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_FLOAT',
                            )
                            nxp_units= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_LENGTH',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-shape-size-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-shape-size-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_size = SubSection(sub_section=nxp_size.m_def,repeats=True)
                    nxp_shape = SubSection(sub_section=nxp_shape.m_def,repeats=True)
                    class nxp_translation(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NXtranslation.m_def,repeats=True)
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NXtranslation',
                        )
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='translation',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-translation-group
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-translation-group',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                        class nxp_distance(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='distance',
                            )
                            nxp_type= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_FLOAT',
                            )
                            nxp_units= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_LENGTH',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-translation-distance-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-translation-distance-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
                    nxp_translation = SubSection(sub_section=nxp_translation.m_def,repeats=True)
                nxp_origin = SubSection(sub_section=nxp_origin.m_def,repeats=True)
            nxp_APERTURE = SubSection(sub_section=nxp_APERTURE.m_def,repeats=True)
            class nxp_ATTENUATOR(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXattenuator.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXattenuator',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-attenuator-group
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-attenuator-group',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_distance(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='distance',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-attenuator-distance-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-attenuator-distance-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
            nxp_ATTENUATOR = SubSection(sub_section=nxp_ATTENUATOR.m_def,repeats=True)
            class nxp_POLARIZER(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXpolarizer.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXpolarizer',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-polarizer-group
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-polarizer-group',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_POLARIZER = SubSection(sub_section=nxp_POLARIZER.m_def,repeats=True)
            class nxp_CRYSTAL(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXcrystal.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXcrystal',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-group
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-group',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_type(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='type',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-type-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-type-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)
                class nxp_wavelength(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='wavelength',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_WAVELENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-wavelength-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-wavelength-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_wavelength = SubSection(sub_section=nxp_wavelength.m_def,repeats=True)
                class nxp_origin(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NXgeometry',
                    )
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='origin',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-group
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-group',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    class nxp_description(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='description',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-description-field
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-description-field',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                    nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
                    class nxp_orientation(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NXorientation.m_def,repeats=True)
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NXorientation',
                        )
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='orientation',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-orientation-group
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-orientation-group',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                        class nxp_value(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='value',
                            )
                            nxp_type= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_FLOAT',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                                            Six out of nine rotation parameters.
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-orientation-value-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-orientation-value-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_value = SubSection(sub_section=nxp_value.m_def,repeats=True)
                    nxp_orientation = SubSection(sub_section=nxp_orientation.m_def,repeats=True)
                    class nxp_shape(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NXshape.m_def,repeats=True)
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NXshape',
                        )
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='shape',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-shape-group
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-shape-group',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                        class nxp_description(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='description',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-shape-description-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-shape-description-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
                        class nxp_shape(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='shape',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-shape-shape-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-shape-shape-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_shape = SubSection(sub_section=nxp_shape.m_def,repeats=True)
                        class nxp_size(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='size',
                            )
                            nxp_type= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_FLOAT',
                            )
                            nxp_units= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_LENGTH',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-shape-size-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-shape-size-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_size = SubSection(sub_section=nxp_size.m_def,repeats=True)
                    nxp_shape = SubSection(sub_section=nxp_shape.m_def,repeats=True)
                    class nxp_translation(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NXtranslation.m_def,repeats=True)
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NXtranslation',
                        )
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='translation',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-translation-group
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-translation-group',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                        class nxp_distance(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='distance',
                            )
                            nxp_type= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_FLOAT',
                            )
                            nxp_units= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_LENGTH',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-translation-distance-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-translation-distance-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
                    nxp_translation = SubSection(sub_section=nxp_translation.m_def,repeats=True)
                nxp_origin = SubSection(sub_section=nxp_origin.m_def,repeats=True)
            nxp_CRYSTAL = SubSection(sub_section=nxp_CRYSTAL.m_def,repeats=True)
        nxp_instrument = SubSection(sub_section=nxp_instrument.m_def,repeats=True)
        class nxp_MONITOR(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXmonitor',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='0',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-monitor-group
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-monitor-group',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_data(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='data',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_UINT',
                )
                nxp_signal= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_axes= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='time_of_flight',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-monitor-data-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-monitor-data-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
            class nxp_distance(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='distance',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_LENGTH',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-monitor-distance-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-monitor-distance-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
            class nxp_mode(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='mode',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-monitor-mode-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-monitor-mode-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_mode = SubSection(sub_section=nxp_mode.m_def,repeats=True)
            class nxp_time_of_flight(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='time_of_flight',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_TIME',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-monitor-time-of-flight-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-monitor-time-of-flight-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_time_of_flight = SubSection(sub_section=nxp_time_of_flight.m_def,repeats=True)
        nxp_MONITOR = SubSection(sub_section=nxp_MONITOR.m_def,repeats=True)
        class nxp_sample(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='sample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_changer_position(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='changer_position',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-sample-changer-position-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-sample-changer-position-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_changer_position = SubSection(sub_section=nxp_changer_position.m_def,repeats=True)
            class nxp_holder(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='holder',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-sample-holder-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-sample-holder-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_holder = SubSection(sub_section=nxp_holder.m_def,repeats=True)
            class nxp_identifier(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='identifier',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-sample-identifier-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-sample-identifier-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_identifier = SubSection(sub_section=nxp_identifier.m_def,repeats=True)
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Descriptive name of sample
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-sample-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-sample-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_nature(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='nature',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-sample-nature-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-sample-nature-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_nature = SubSection(sub_section=nxp_nature.m_def,repeats=True)
        nxp_sample = SubSection(sub_section=nxp_sample.m_def,repeats=True)
        class nxp_USER(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXuser.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXuser',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='1',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-user-group
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-user-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_facility_user_id(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='facility_user_id',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-user-facility-user-id-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-user-facility-user-id-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_facility_user_id = SubSection(sub_section=nxp_facility_user_id.m_def,repeats=True)
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-user-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-user-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_role(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='role',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-user-role-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-user-role-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_role = SubSection(sub_section=nxp_role.m_def,repeats=True)
        nxp_USER = SubSection(sub_section=nxp_USER.m_def,repeats=True)
    nxp_ENTRY = SubSection(sub_section=nxp_ENTRY.m_def,repeats=True)



class NXcxi_ptycho(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXcxi_ptycho',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='contributed',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
                Application definition for a ptychography experiment, compatible with CXI from
        version 1.6.

        This is compatible with CXI from version 1.6 if this application definition
        is put at the top "entry" level. Above this a "cxi_version" field should be
        defined. The CXI format is name based, rather than class based, and so it is
        important                 to pay attention to the naming convention to be CXI
        compatible. There are duplications due to the format merger. These should be
        achieved by linking,                  with hdf5 Virtual Dataset being used to
        restructure any data that needs to be remapped. To be fully CXI compatible, all
        units (including energy) must be in SI units.

        An example here is that CXI expects the data to always to have shape
        (npts_x*npts_y, frame_size_x, frame_size_y). For nexus this is only true for
        arbitrary scan paths                 with raster format scans taking shape
        (npts_x, npts_y, frame_size_x, frame_size_y).
        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho
        .
        ''',
        default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_entry_1(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='entry_1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='0',
            )
            nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='1',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-title-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-title-field',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_start_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='0',
            )
            nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='1',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-start-time-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-start-time-field',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start_time = SubSection(sub_section=nxp_start_time.m_def,repeats=True)
        class nxp_end_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='end_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='0',
            )
            nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='1',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-end-time-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-end-time-field',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_end_time = SubSection(sub_section=nxp_end_time.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='1',
            )
            nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='1',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Official NeXus NXDL schema to which this file conforms
                https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXcxi_ptycho''',
                default='NXcxi_ptycho',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_instrument_1(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='instrument_1',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='1',
            )
            nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='1',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-group
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_source_1(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXsource',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='source_1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-source-1-group
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-source-1-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_name(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='name',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_CHAR',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-source-1-name-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-source-1-name-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
                class nxp_energy(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='energy',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    This is the energy of the machine, not the beamline.
                https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-source-1-energy-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-source-1-energy-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_energy = SubSection(sub_section=nxp_energy.m_def,repeats=True)
                class nxp_probe(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='probe',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-source-1-probe-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-source-1-probe-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_probe = SubSection(sub_section=nxp_probe.m_def,repeats=True)
                class nxp_type(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='type',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-source-1-type-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-source-1-type-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)
            nxp_source_1 = SubSection(sub_section=nxp_source_1.m_def,repeats=True)
            class nxp_beam_1(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXbeam.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXbeam',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='beam_1',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-group
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_energy(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='energy',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-energy-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-energy-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    class nxp_units(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='units',
                        )
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NX_CHAR',
                        )
                        nxp_optional= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='false',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-energy-units-attribute
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-energy-units-attribute',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                    nxp_units = SubSection(sub_section=nxp_units.m_def,repeats=True)
                nxp_energy = SubSection(sub_section=nxp_energy.m_def,repeats=True)
                class nxp_extent(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='extent',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-extent-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-extent-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    class nxp_units(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='units',
                        )
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NX_CHAR',
                        )
                        nxp_optional= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='false',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-extent-units-attribute
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-extent-units-attribute',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                    nxp_units = SubSection(sub_section=nxp_units.m_def,repeats=True)
                nxp_extent = SubSection(sub_section=nxp_extent.m_def,repeats=True)
                class nxp_incident_beam_divergence(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='incident_beam_divergence',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-incident-beam-divergence-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-incident-beam-divergence-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    class nxp_units(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='units',
                        )
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NX_CHAR',
                        )
                        nxp_optional= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='false',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-incident-beam-divergence-units-attribute
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-incident-beam-divergence-units-attribute',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                    nxp_units = SubSection(sub_section=nxp_units.m_def,repeats=True)
                nxp_incident_beam_divergence = SubSection(sub_section=nxp_incident_beam_divergence.m_def,repeats=True)
                class nxp_incident_beam_energy(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='incident_beam_energy',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-incident-beam-energy-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-incident-beam-energy-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    class nxp_units(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='units',
                        )
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NX_CHAR',
                        )
                        nxp_optional= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='false',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-incident-beam-energy-units-attribute
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-incident-beam-energy-units-attribute',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                    nxp_units = SubSection(sub_section=nxp_units.m_def,repeats=True)
                nxp_incident_beam_energy = SubSection(sub_section=nxp_incident_beam_energy.m_def,repeats=True)
                class nxp_incident_energy_spread(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='incident_energy_spread',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-incident-energy-spread-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-incident-energy-spread-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    class nxp_units(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='units',
                        )
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NX_CHAR',
                        )
                        nxp_optional= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='false',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-incident-energy-spread-units-attribute
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-incident-energy-spread-units-attribute',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                    nxp_units = SubSection(sub_section=nxp_units.m_def,repeats=True)
                nxp_incident_energy_spread = SubSection(sub_section=nxp_incident_energy_spread.m_def,repeats=True)
            nxp_beam_1 = SubSection(sub_section=nxp_beam_1.m_def,repeats=True)
            class nxp_detector_1(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='detector_1',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-group
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_axes(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='axes',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_CHAR',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    should have value "[, data]"
                https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-axes-attribute
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-axes-attribute',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_axes = SubSection(sub_section=nxp_axes.m_def,repeats=True)
                class nxp_signal(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='signal',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_CHAR',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    should have value "data"
                https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-signal-attribute
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-signal-attribute',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_signal = SubSection(sub_section=nxp_signal.m_def,repeats=True)
                class nxp_translation(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='translation',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    This is an array of shape (npts_x*npts_y, 3) and can be a Virtual Dataset
                of x and y
                https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-translation-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-translation-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    class nxp_units(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='units',
                        )
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NX_CHAR',
                        )
                        nxp_optional= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='false',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-translation-units-attribute
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-translation-units-attribute',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                    nxp_units = SubSection(sub_section=nxp_units.m_def,repeats=True)
                    class nxp_axes(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='axes',
                        )
                        nxp_optional= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='false',
                        )
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NX_CHAR',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                                        this should take the value "translation:$slowaxisname:$fastaxisname"
                https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-translation-axes-attribute
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-translation-axes-attribute',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                    nxp_axes = SubSection(sub_section=nxp_axes.m_def,repeats=True)
                    class nxp_interpretation(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='interpretation',
                        )
                        nxp_optional= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='false',
                        )
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NX_CHAR',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                                        This should be "image"
                https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-translation-interpretation-attribute
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-translation-interpretation-attribute',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                    nxp_interpretation = SubSection(sub_section=nxp_interpretation.m_def,repeats=True)
                nxp_translation = SubSection(sub_section=nxp_translation.m_def,repeats=True)
                class nxp_data(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_INT',
                    )
                    nxp_signal= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-data-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-data-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
                class nxp_x_pixel_size(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='x_pixel_size',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-x-pixel-size-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-x-pixel-size-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    class nxp_units(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='units',
                        )
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NX_CHAR',
                        )
                        nxp_optional= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='false',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-x-pixel-size-units-attribute
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-x-pixel-size-units-attribute',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                    nxp_units = SubSection(sub_section=nxp_units.m_def,repeats=True)
                nxp_x_pixel_size = SubSection(sub_section=nxp_x_pixel_size.m_def,repeats=True)
                class nxp_y_pixel_size(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='y_pixel_size',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-y-pixel-size-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-y-pixel-size-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    class nxp_units(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='units',
                        )
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NX_CHAR',
                        )
                        nxp_optional= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='false',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-y-pixel-size-units-attribute
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-y-pixel-size-units-attribute',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                    nxp_units = SubSection(sub_section=nxp_units.m_def,repeats=True)
                nxp_y_pixel_size = SubSection(sub_section=nxp_y_pixel_size.m_def,repeats=True)
                class nxp_distance(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='distance',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                                    The distance between the detector and the sample
                https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-distance-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-distance-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    class nxp_units(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='units',
                        )
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NX_CHAR',
                        )
                        nxp_optional= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='false',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-distance-units-attribute
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-distance-units-attribute',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                    nxp_units = SubSection(sub_section=nxp_units.m_def,repeats=True)
                nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
                class nxp_beam_center_x(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='beam_center_x',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-beam-center-x-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-beam-center-x-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    class nxp_units(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='units',
                        )
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NX_CHAR',
                        )
                        nxp_optional= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='false',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-beam-center-x-units-attribute
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-beam-center-x-units-attribute',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                    nxp_units = SubSection(sub_section=nxp_units.m_def,repeats=True)
                nxp_beam_center_x = SubSection(sub_section=nxp_beam_center_x.m_def,repeats=True)
                class nxp_beam_center_y(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='beam_center_y',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_minOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='0',
                    )
                    nxp_maxOccurs= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-beam-center-y-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-beam-center-y-field',
                    )
                    nxp_optional= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    class nxp_units(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='units',
                        )
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NX_CHAR',
                        )
                        nxp_optional= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='false',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-beam-center-y-units-attribute
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-beam-center-y-units-attribute',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                    nxp_units = SubSection(sub_section=nxp_units.m_def,repeats=True)
                nxp_beam_center_y = SubSection(sub_section=nxp_beam_center_y.m_def,repeats=True)
                class nxp_transformations(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NXtransformations.m_def,repeats=True)
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NXtransformations',
                    )
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='transformations',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-transformations-group
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-transformations-group',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    class nxp_vector(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='vector',
                        )
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NX_NUMBER',
                        )
                        nxp_minOccurs= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='1',
                        )
                        nxp_maxOccurs= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='1',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-transformations-vector-field
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-transformations-vector-field',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                    nxp_vector = SubSection(sub_section=nxp_vector.m_def,repeats=True)
                nxp_transformations = SubSection(sub_section=nxp_transformations.m_def,repeats=True)
            nxp_detector_1 = SubSection(sub_section=nxp_detector_1.m_def,repeats=True)
            class nxp_MONITOR(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXmonitor',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_maxOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-monitor-group
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-monitor-group',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_data(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-monitor-data-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-monitor-data-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
            nxp_MONITOR = SubSection(sub_section=nxp_MONITOR.m_def,repeats=True)
        nxp_instrument_1 = SubSection(sub_section=nxp_instrument_1.m_def,repeats=True)
    nxp_entry_1 = SubSection(sub_section=nxp_entry_1.m_def,repeats=True)


    class nxp_DATA(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXdata',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-data-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-data-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_axes(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='axes',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='false',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            This should be "[x,.]" for arbitrary scanning patterns, and "[x,.,.]" for
                raster
                https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-data-axes-attribute
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-data-axes-attribute',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_axes = SubSection(sub_section=nxp_axes.m_def,repeats=True)
        class nxp_signal(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='signal',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='false',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            This should be "data"
                https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-data-signal-attribute
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-data-signal-attribute',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_signal = SubSection(sub_section=nxp_signal.m_def,repeats=True)
        class nxp_x_indices(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='x_indices',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-data-x-indices-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-data-x-indices-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_x_indices = SubSection(sub_section=nxp_x_indices.m_def,repeats=True)
        class nxp_y_indices(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='y_indices',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-data-y-indices-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-data-y-indices-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_y_indices = SubSection(sub_section=nxp_y_indices.m_def,repeats=True)
    nxp_DATA = SubSection(sub_section=nxp_DATA.m_def,repeats=True)


    class nxp_data_1(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXcollection.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXcollection',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='data_1',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        To ensure CXI compatibility the data in this group must always have shape
                that is                                 (npts_x*npts_y, frame_size_x,
                frame_size_y). For nexus-style raster scans it is proposed that
                hdf5 virtual dataset is used.
                https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-data-1-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-data-1-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_data_1 = SubSection(sub_section=nxp_data_1.m_def,repeats=True)


    class nxp_sample_1(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXsample',
        )
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='sample_1',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_maxOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-sample-1-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-sample-1-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_name(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='name',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHAR',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='0',
            )
            nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='1',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-sample-1-name-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-sample-1-name-field',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
        class nxp_transformations(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXtransformations.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='transformations',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXtransformations',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            This must contain two fields with the x and y motors that are linked via
                the                                          dependency tree according to
                the real-life motor layout dependency.
                For raster scans x and y will have shape (npts_x, npts_y)
                For arbitrary scans x and y will be (npts_x*npts_y,)
                An attribute with the units for each motor is required.
                https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-sample-1-transformations-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-sample-1-transformations-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_vector(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_NUMBER.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='vector',
                )
                nxp_optional= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='false',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_NUMBER',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-sample-1-transformations-vector-attribute
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-sample-1-transformations-vector-attribute',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_vector = SubSection(sub_section=nxp_vector.m_def,repeats=True)
        nxp_transformations = SubSection(sub_section=nxp_transformations.m_def,repeats=True)
        class nxp_geometry_1(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXcollection.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXcollection',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='geometry_1',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='1',
            )
            nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='1',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-sample-1-geometry-1-group
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-sample-1-geometry-1-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_geometry_1 = SubSection(sub_section=nxp_geometry_1.m_def,repeats=True)
    nxp_sample_1 = SubSection(sub_section=nxp_sample_1.m_def,repeats=True)



class NXsnsevent(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXsnsevent',)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='contributed',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        This is a definition for event data from Spallation Neutron Source (SNS) at ORNL.
        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent
        .
        ''',
        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent',)

    nxp_required = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_ENTRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-group',
        )
        nxp_required= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        class nxp_collection_identifier(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='collection_identifier',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-collection-identifier-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-collection-identifier-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_collection_identifier = SubSection(sub_section=nxp_collection_identifier.m_def,repeats=True)
        class nxp_collection_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='collection_title',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-collection-title-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-collection-title-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_collection_title = SubSection(sub_section=nxp_collection_title.m_def,repeats=True)
        class nxp_definition(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='definition',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Official NXDL schema after this file goes to applications.
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-definition-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-definition-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
            Possible values: NXsnsevent''',
                default='NXsnsevent',
            )
        nxp_definition = SubSection(sub_section=nxp_definition.m_def,repeats=True)
        class nxp_duration(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='duration',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_FLOAT',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-duration-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-duration-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_duration = SubSection(sub_section=nxp_duration.m_def,repeats=True)
        class nxp_end_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='end_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-end-time-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-end-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_end_time = SubSection(sub_section=nxp_end_time.m_def,repeats=True)
        class nxp_entry_identifier(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='entry_identifier',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-entry-identifier-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-entry-identifier-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_entry_identifier = SubSection(sub_section=nxp_entry_identifier.m_def,repeats=True)
        class nxp_experiment_identifier(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='experiment_identifier',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-experiment-identifier-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-experiment-identifier-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_experiment_identifier = SubSection(sub_section=nxp_experiment_identifier.m_def,repeats=True)
        class nxp_notes(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='notes',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-notes-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-notes-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_notes = SubSection(sub_section=nxp_notes.m_def,repeats=True)
        class nxp_proton_charge(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='proton_charge',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_FLOAT',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_CHARGE',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-proton-charge-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-proton-charge-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_proton_charge = SubSection(sub_section=nxp_proton_charge.m_def,repeats=True)
        class nxp_raw_frames(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_INT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='raw_frames',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_INT',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-raw-frames-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-raw-frames-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_raw_frames = SubSection(sub_section=nxp_raw_frames.m_def,repeats=True)
        class nxp_run_number(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='run_number',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-run-number-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-run-number-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_run_number = SubSection(sub_section=nxp_run_number.m_def,repeats=True)
        class nxp_start_time(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='start_time',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_DATE_TIME',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-start-time-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-start-time-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_start_time = SubSection(sub_section=nxp_start_time.m_def,repeats=True)
        class nxp_title(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='title',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-title-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-title-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_title = SubSection(sub_section=nxp_title.m_def,repeats=True)
        class nxp_total_counts(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='total_counts',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_UINT',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_UNITLESS',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-total-counts-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-total-counts-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_total_counts = SubSection(sub_section=nxp_total_counts.m_def,repeats=True)
        class nxp_total_uncounted_counts(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='total_uncounted_counts',
            )
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_UINT',
            )
            nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NX_UNITLESS',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-total-uncounted-counts-field
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-total-uncounted-counts-field',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_total_uncounted_counts = SubSection(sub_section=nxp_total_uncounted_counts.m_def,repeats=True)
        class nxp_DASlogs(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXcollection.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXcollection',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='DASlogs',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                            Details of all logs, both from cvinfo file and from HistoTool (frequency
                and proton_charge).
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-group
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_LOG(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXlog.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXlog',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-group
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_average_value(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='average_value',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-average-value-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-average-value-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_average_value = SubSection(sub_section=nxp_average_value.m_def,repeats=True)
                class nxp_average_value_error(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='average_value_error',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_deprecated= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='see https://github.com/nexusformat/definitions/issues/821',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-average-value-error-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-average-value-error-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_deprecated= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_average_value_error = SubSection(sub_section=nxp_average_value_error.m_def,repeats=True)
                class nxp_average_value_errors(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='average_value_errors',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-average-value-errors-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-average-value-errors-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_average_value_errors = SubSection(sub_section=nxp_average_value_errors.m_def,repeats=True)
                class nxp_description(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='description',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-description-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-description-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
                class nxp_duration(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='duration',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-duration-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-duration-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_duration = SubSection(sub_section=nxp_duration.m_def,repeats=True)
                class nxp_maximum_value(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='maximum_value',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-maximum-value-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-maximum-value-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_maximum_value = SubSection(sub_section=nxp_maximum_value.m_def,repeats=True)
                class nxp_minimum_value(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='minimum_value',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-minimum-value-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-minimum-value-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_minimum_value = SubSection(sub_section=nxp_minimum_value.m_def,repeats=True)
                class nxp_time(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='time',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-time-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-time-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_time = SubSection(sub_section=nxp_time.m_def,repeats=True)
                class nxp_value(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='value',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-value-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-value-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_value = SubSection(sub_section=nxp_value.m_def,repeats=True)
            nxp_LOG = SubSection(sub_section=nxp_LOG.m_def,repeats=True)
            class nxp_POSITIONER(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXpositioner.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXpositioner',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Motor logs from cvinfo file.
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-group
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-group',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_average_value(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='average_value',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-average-value-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-average-value-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_average_value = SubSection(sub_section=nxp_average_value.m_def,repeats=True)
                class nxp_average_value_error(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='average_value_error',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_deprecated= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='see https://github.com/nexusformat/definitions/issues/821',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-average-value-error-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-average-value-error-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    nxp_deprecated= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_average_value_error = SubSection(sub_section=nxp_average_value_error.m_def,repeats=True)
                class nxp_average_value_errors(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='average_value_errors',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-average-value-errors-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-average-value-errors-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_average_value_errors = SubSection(sub_section=nxp_average_value_errors.m_def,repeats=True)
                class nxp_description(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='description',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-description-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-description-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
                class nxp_duration(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='duration',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-duration-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-duration-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_duration = SubSection(sub_section=nxp_duration.m_def,repeats=True)
                class nxp_maximum_value(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='maximum_value',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-maximum-value-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-maximum-value-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_maximum_value = SubSection(sub_section=nxp_maximum_value.m_def,repeats=True)
                class nxp_minimum_value(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='minimum_value',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-minimum-value-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-minimum-value-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_minimum_value = SubSection(sub_section=nxp_minimum_value.m_def,repeats=True)
                class nxp_time(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='time',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-time-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-time-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_time = SubSection(sub_section=nxp_time.m_def,repeats=True)
                class nxp_value(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='value',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-value-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-value-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_value = SubSection(sub_section=nxp_value.m_def,repeats=True)
            nxp_POSITIONER = SubSection(sub_section=nxp_POSITIONER.m_def,repeats=True)
        nxp_DASlogs = SubSection(sub_section=nxp_DASlogs.m_def,repeats=True)
        class nxp_SNSHistoTool(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXnote.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXnote',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='SNSHistoTool',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-group
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_SNSbanking_file_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='SNSbanking_file_name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-snsbanking-file-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-snsbanking-file-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_SNSbanking_file_name = SubSection(sub_section=nxp_SNSbanking_file_name.m_def,repeats=True)
            class nxp_SNSmapping_file_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='SNSmapping_file_name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-snsmapping-file-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-snsmapping-file-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_SNSmapping_file_name = SubSection(sub_section=nxp_SNSmapping_file_name.m_def,repeats=True)
            class nxp_author(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='author',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-author-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-author-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_author = SubSection(sub_section=nxp_author.m_def,repeats=True)
            class nxp_command1(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='command1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Command string for event2nxl.
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-command1-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-command1-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_command1 = SubSection(sub_section=nxp_command1.m_def,repeats=True)
            class nxp_date(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='date',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-date-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-date-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_date = SubSection(sub_section=nxp_date.m_def,repeats=True)
            class nxp_description(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='description',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-description-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-description-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
            class nxp_version(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='version',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-version-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-version-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_version = SubSection(sub_section=nxp_version.m_def,repeats=True)
        nxp_SNSHistoTool = SubSection(sub_section=nxp_SNSHistoTool.m_def,repeats=True)
        class nxp_DATA(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXdata.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXdata',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='1',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-data-group
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-data-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_DATA = SubSection(sub_section=nxp_DATA.m_def,repeats=True)
        class nxp_EVENT_DATA(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXevent_data.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXevent_data',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='1',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-event-data-group
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-event-data-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
        nxp_EVENT_DATA = SubSection(sub_section=nxp_EVENT_DATA.m_def,repeats=True)
        class nxp_instrument(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXinstrument.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXinstrument',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='instrument',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-group
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_SNSdetector_calibration_id(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='SNSdetector_calibration_id',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                                Detector calibration id from DAS.
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-snsdetector-calibration-id-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-snsdetector-calibration-id-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_SNSdetector_calibration_id = SubSection(sub_section=nxp_SNSdetector_calibration_id.m_def,repeats=True)
            class nxp_SNSgeometry_file_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='SNSgeometry_file_name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-snsgeometry-file-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-snsgeometry-file-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_SNSgeometry_file_name = SubSection(sub_section=nxp_SNSgeometry_file_name.m_def,repeats=True)
            class nxp_SNStranslation_service(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='SNStranslation_service',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-snstranslation-service-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-snstranslation-service-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_SNStranslation_service = SubSection(sub_section=nxp_SNStranslation_service.m_def,repeats=True)
            class nxp_beamline(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='beamline',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-beamline-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-beamline-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_beamline = SubSection(sub_section=nxp_beamline.m_def,repeats=True)
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_SNS(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXsource.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXsource',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='SNS',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-sns-group
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-sns-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_frequency(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='frequency',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FREQUENCY',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-sns-frequency-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-sns-frequency-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_frequency = SubSection(sub_section=nxp_frequency.m_def,repeats=True)
                class nxp_name(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='name',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-sns-name-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-sns-name-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
                class nxp_probe(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='probe',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-sns-probe-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-sns-probe-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_probe = SubSection(sub_section=nxp_probe.m_def,repeats=True)
                class nxp_type(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='type',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-sns-type-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-sns-type-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)
            nxp_SNS = SubSection(sub_section=nxp_SNS.m_def,repeats=True)
            class nxp_DETECTOR(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdetector.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdetector',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='1',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-group
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_azimuthal_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='azimuthal_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-azimuthal-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-azimuthal-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_azimuthal_angle = SubSection(sub_section=nxp_azimuthal_angle.m_def,repeats=True)
                class nxp_data_x_y(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='data_x_y',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_UINT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    expect  ``signal=2 axes="x_pixel_offset,y_pixel_offset``"
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-data-x-y-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-data-x-y-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_data_x_y = SubSection(sub_section=nxp_data_x_y.m_def,repeats=True)
                class nxp_distance(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='distance',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-distance-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-distance-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
                class nxp_event_index(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='event_index',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_UINT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-event-index-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-event-index-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_event_index = SubSection(sub_section=nxp_event_index.m_def,repeats=True)
                class nxp_event_pixel_id(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='event_pixel_id',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_UINT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-event-pixel-id-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-event-pixel-id-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_event_pixel_id = SubSection(sub_section=nxp_event_pixel_id.m_def,repeats=True)
                class nxp_event_time_of_flight(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='event_time_of_flight',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_TIME_OF_FLIGHT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-event-time-of-flight-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-event-time-of-flight-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_event_time_of_flight = SubSection(sub_section=nxp_event_time_of_flight.m_def,repeats=True)
                class nxp_pixel_id(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='pixel_id',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_UINT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-pixel-id-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-pixel-id-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_pixel_id = SubSection(sub_section=nxp_pixel_id.m_def,repeats=True)
                class nxp_polar_angle(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='polar_angle',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_ANGLE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-polar-angle-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-polar-angle-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_polar_angle = SubSection(sub_section=nxp_polar_angle.m_def,repeats=True)
                class nxp_pulse_time(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='pulse_time',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_TIME',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-pulse-time-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-pulse-time-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_pulse_time = SubSection(sub_section=nxp_pulse_time.m_def,repeats=True)
                class nxp_total_counts(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='total_counts',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_UINT',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-total-counts-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-total-counts-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_total_counts = SubSection(sub_section=nxp_total_counts.m_def,repeats=True)
                class nxp_x_pixel_offset(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='x_pixel_offset',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_axis= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_primary= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-x-pixel-offset-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-x-pixel-offset-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_x_pixel_offset = SubSection(sub_section=nxp_x_pixel_offset.m_def,repeats=True)
                class nxp_y_pixel_offset(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='y_pixel_offset',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_axis= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='2',
                    )
                    nxp_primary= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='1',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-y-pixel-offset-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-y-pixel-offset-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_y_pixel_offset = SubSection(sub_section=nxp_y_pixel_offset.m_def,repeats=True)
                class nxp_origin(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NXgeometry',
                    )
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='origin',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-group
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-group',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    class nxp_orientation(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NXorientation.m_def,repeats=True)
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NXorientation',
                        )
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='orientation',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-orientation-group
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-orientation-group',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                        class nxp_value(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='value',
                            )
                            nxp_type= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_FLOAT',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                                            Six out of nine rotation parameters.
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-orientation-value-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-orientation-value-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_value = SubSection(sub_section=nxp_value.m_def,repeats=True)
                    nxp_orientation = SubSection(sub_section=nxp_orientation.m_def,repeats=True)
                    class nxp_shape(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NXshape.m_def,repeats=True)
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NXshape',
                        )
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='shape',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-shape-group
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-shape-group',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                        class nxp_description(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='description',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-shape-description-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-shape-description-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
                        class nxp_shape(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='shape',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-shape-shape-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-shape-shape-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_shape = SubSection(sub_section=nxp_shape.m_def,repeats=True)
                        class nxp_size(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='size',
                            )
                            nxp_type= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_FLOAT',
                            )
                            nxp_units= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_LENGTH',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-shape-size-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-shape-size-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_size = SubSection(sub_section=nxp_size.m_def,repeats=True)
                    nxp_shape = SubSection(sub_section=nxp_shape.m_def,repeats=True)
                    class nxp_translation(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NXtranslation.m_def,repeats=True)
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NXtranslation',
                        )
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='translation',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-translation-group
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-translation-group',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                        class nxp_distance(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='distance',
                            )
                            nxp_type= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_FLOAT',
                            )
                            nxp_units= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_LENGTH',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-translation-distance-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-translation-distance-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
                    nxp_translation = SubSection(sub_section=nxp_translation.m_def,repeats=True)
                nxp_origin = SubSection(sub_section=nxp_origin.m_def,repeats=True)
            nxp_DETECTOR = SubSection(sub_section=nxp_DETECTOR.m_def,repeats=True)
            class nxp_DISK_CHOPPER(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXdisk_chopper.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXdisk_chopper',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-disk-chopper-group
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-disk-chopper-group',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_distance(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='distance',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-disk-chopper-distance-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-disk-chopper-distance-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
            nxp_DISK_CHOPPER = SubSection(sub_section=nxp_DISK_CHOPPER.m_def,repeats=True)
            class nxp_moderator(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXmoderator.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXmoderator',
                )
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='moderator',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-moderator-group
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-moderator-group',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_coupling_material(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='coupling_material',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-moderator-coupling-material-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-moderator-coupling-material-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_coupling_material = SubSection(sub_section=nxp_coupling_material.m_def,repeats=True)
                class nxp_distance(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='distance',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-moderator-distance-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-moderator-distance-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
                class nxp_temperature(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='temperature',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_TEMPERATURE',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-moderator-temperature-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-moderator-temperature-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_temperature = SubSection(sub_section=nxp_temperature.m_def,repeats=True)
                class nxp_type(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='type',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-moderator-type-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-moderator-type-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)
            nxp_moderator = SubSection(sub_section=nxp_moderator.m_def,repeats=True)
            class nxp_APERTURE(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXaperture.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXaperture',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-group
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-group',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_x_pixel_offset(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='x_pixel_offset',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-x-pixel-offset-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-x-pixel-offset-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_x_pixel_offset = SubSection(sub_section=nxp_x_pixel_offset.m_def,repeats=True)
                class nxp_origin(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NXgeometry',
                    )
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='origin',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-group
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-group',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    class nxp_orientation(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NXorientation.m_def,repeats=True)
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NXorientation',
                        )
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='orientation',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-orientation-group
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-orientation-group',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                        class nxp_value(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='value',
                            )
                            nxp_type= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_FLOAT',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                                            Six out of nine rotation parameters.
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-orientation-value-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-orientation-value-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_value = SubSection(sub_section=nxp_value.m_def,repeats=True)
                    nxp_orientation = SubSection(sub_section=nxp_orientation.m_def,repeats=True)
                    class nxp_shape(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NXshape.m_def,repeats=True)
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NXshape',
                        )
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='shape',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-shape-group
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-shape-group',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                        class nxp_description(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='description',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-shape-description-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-shape-description-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
                        class nxp_shape(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='shape',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-shape-shape-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-shape-shape-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_shape = SubSection(sub_section=nxp_shape.m_def,repeats=True)
                        class nxp_size(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='size',
                            )
                            nxp_type= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_FLOAT',
                            )
                            nxp_units= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_LENGTH',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-shape-size-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-shape-size-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_size = SubSection(sub_section=nxp_size.m_def,repeats=True)
                    nxp_shape = SubSection(sub_section=nxp_shape.m_def,repeats=True)
                    class nxp_translation(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NXtranslation.m_def,repeats=True)
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NXtranslation',
                        )
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='translation',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-translation-group
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-translation-group',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                        class nxp_distance(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='distance',
                            )
                            nxp_type= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_FLOAT',
                            )
                            nxp_units= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_LENGTH',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-translation-distance-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-translation-distance-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
                    nxp_translation = SubSection(sub_section=nxp_translation.m_def,repeats=True)
                nxp_origin = SubSection(sub_section=nxp_origin.m_def,repeats=True)
            nxp_APERTURE = SubSection(sub_section=nxp_APERTURE.m_def,repeats=True)
            class nxp_ATTENUATOR(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXattenuator.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXattenuator',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-attenuator-group
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-attenuator-group',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_distance(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='distance',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_LENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-attenuator-distance-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-attenuator-distance-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
            nxp_ATTENUATOR = SubSection(sub_section=nxp_ATTENUATOR.m_def,repeats=True)
            class nxp_POLARIZER(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXpolarizer.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXpolarizer',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-polarizer-group
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-polarizer-group',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_POLARIZER = SubSection(sub_section=nxp_POLARIZER.m_def,repeats=True)
            class nxp_CRYSTAL(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NXcrystal.m_def,repeats=True)
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NXcrystal',
                )
                nxp_minOccurs= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='0',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-group
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-group',
                )
                nxp_optional= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
                class nxp_type(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='type',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-type-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-type-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_type = SubSection(sub_section=nxp_type.m_def,repeats=True)
                class nxp_wavelength(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='wavelength',
                    )
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_FLOAT',
                    )
                    nxp_units= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NX_WAVELENGTH',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-wavelength-field
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-wavelength-field',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                nxp_wavelength = SubSection(sub_section=nxp_wavelength.m_def,repeats=True)
                class nxp_origin(NXobject):
                    m_def = Section(validate=False,extends_base_section=True)
                    nxp_base = SubSection(sub_section=NXgeometry.m_def,repeats=True)
                    nxp_type= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='NXgeometry',
                    )
                    nxp_name= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    ''',
                        default='origin',
                    )
                    nxp_documentation= Quantity(
                        type=str,
                        shape=[],
                        description='''
                    https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-group
                .''',
                        default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-group',
                    )
                    nxp_required= Quantity(
                        type=bool,
                        shape=[],
                        description='''
                    ''',
                        default=True,
                    )
                    class nxp_description(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='description',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-description-field
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-description-field',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                    nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
                    class nxp_orientation(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NXorientation.m_def,repeats=True)
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NXorientation',
                        )
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='orientation',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-orientation-group
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-orientation-group',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                        class nxp_value(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='value',
                            )
                            nxp_type= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_FLOAT',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                                            Six out of nine rotation parameters.
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-orientation-value-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-orientation-value-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_value = SubSection(sub_section=nxp_value.m_def,repeats=True)
                    nxp_orientation = SubSection(sub_section=nxp_orientation.m_def,repeats=True)
                    class nxp_shape(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NXshape.m_def,repeats=True)
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NXshape',
                        )
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='shape',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-shape-group
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-shape-group',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                        class nxp_description(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='description',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-shape-description-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-shape-description-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_description = SubSection(sub_section=nxp_description.m_def,repeats=True)
                        class nxp_shape(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='shape',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-shape-shape-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-shape-shape-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_shape = SubSection(sub_section=nxp_shape.m_def,repeats=True)
                        class nxp_size(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='size',
                            )
                            nxp_type= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_FLOAT',
                            )
                            nxp_units= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_LENGTH',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-shape-size-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-shape-size-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_size = SubSection(sub_section=nxp_size.m_def,repeats=True)
                    nxp_shape = SubSection(sub_section=nxp_shape.m_def,repeats=True)
                    class nxp_translation(NXobject):
                        m_def = Section(validate=False,extends_base_section=True)
                        nxp_base = SubSection(sub_section=NXtranslation.m_def,repeats=True)
                        nxp_type= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='NXtranslation',
                        )
                        nxp_name= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        ''',
                            default='translation',
                        )
                        nxp_documentation= Quantity(
                            type=str,
                            shape=[],
                            description='''
                        https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-translation-group
                .''',
                            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-translation-group',
                        )
                        nxp_required= Quantity(
                            type=bool,
                            shape=[],
                            description='''
                        ''',
                            default=True,
                        )
                        class nxp_distance(NXobject):
                            m_def = Section(validate=False,extends_base_section=True)
                            nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                            nxp_name= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='distance',
                            )
                            nxp_type= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_FLOAT',
                            )
                            nxp_units= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            ''',
                                default='NX_LENGTH',
                            )
                            nxp_documentation= Quantity(
                                type=str,
                                shape=[],
                                description='''
                            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-translation-distance-field
                .''',
                                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-translation-distance-field',
                            )
                            nxp_required= Quantity(
                                type=bool,
                                shape=[],
                                description='''
                            ''',
                                default=True,
                            )
                        nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
                    nxp_translation = SubSection(sub_section=nxp_translation.m_def,repeats=True)
                nxp_origin = SubSection(sub_section=nxp_origin.m_def,repeats=True)
            nxp_CRYSTAL = SubSection(sub_section=nxp_CRYSTAL.m_def,repeats=True)
        nxp_instrument = SubSection(sub_section=nxp_instrument.m_def,repeats=True)
        class nxp_MONITOR(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXmonitor.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXmonitor',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='0',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-monitor-group
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-monitor-group',
            )
            nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_data(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_UINT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='data',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_UINT',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                expect  ``signal=1 axes="time_of_flight"``
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-monitor-data-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-monitor-data-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_data = SubSection(sub_section=nxp_data.m_def,repeats=True)
            class nxp_distance(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='distance',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_LENGTH',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-monitor-distance-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-monitor-distance-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_distance = SubSection(sub_section=nxp_distance.m_def,repeats=True)
            class nxp_mode(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='mode',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-monitor-mode-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-monitor-mode-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_mode = SubSection(sub_section=nxp_mode.m_def,repeats=True)
            class nxp_time_of_flight(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_FLOAT.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='time_of_flight',
                )
                nxp_type= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_FLOAT',
                )
                nxp_units= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='NX_TIME',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-monitor-time-of-flight-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-monitor-time-of-flight-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_time_of_flight = SubSection(sub_section=nxp_time_of_flight.m_def,repeats=True)
        nxp_MONITOR = SubSection(sub_section=nxp_MONITOR.m_def,repeats=True)
        class nxp_sample(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXsample.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXsample',
            )
            nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='sample',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-sample-group
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-sample-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_changer_position(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='changer_position',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-sample-changer-position-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-sample-changer-position-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_changer_position = SubSection(sub_section=nxp_changer_position.m_def,repeats=True)
            class nxp_holder(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='holder',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-sample-holder-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-sample-holder-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_holder = SubSection(sub_section=nxp_holder.m_def,repeats=True)
            class nxp_identifier(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='identifier',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-sample-identifier-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-sample-identifier-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_identifier = SubSection(sub_section=nxp_identifier.m_def,repeats=True)
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                Descriptive name of sample
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-sample-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-sample-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_nature(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='nature',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-sample-nature-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-sample-nature-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_nature = SubSection(sub_section=nxp_nature.m_def,repeats=True)
        nxp_sample = SubSection(sub_section=nxp_sample.m_def,repeats=True)
        class nxp_USER(NXobject):
            m_def = Section(validate=False,extends_base_section=True)
            nxp_base = SubSection(sub_section=NXuser.m_def,repeats=True)
            nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='NXuser',
            )
            nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
            ''',
                default='1',
            )
            nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
            https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-user-group
                .''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-user-group',
            )
            nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
            ''',
                default=True,
            )
            class nxp_facility_user_id(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='facility_user_id',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-user-facility-user-id-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-user-facility-user-id-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_facility_user_id = SubSection(sub_section=nxp_facility_user_id.m_def,repeats=True)
            class nxp_name(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='name',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-user-name-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-user-name-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_name = SubSection(sub_section=nxp_name.m_def,repeats=True)
            class nxp_role(NXobject):
                m_def = Section(validate=False,extends_base_section=True)
                nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
                nxp_name= Quantity(
                    type=str,
                    shape=[],
                    description='''
                ''',
                    default='role',
                )
                nxp_documentation= Quantity(
                    type=str,
                    shape=[],
                    description='''
                https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-user-role-field
                .''',
                    default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-user-role-field',
                )
                nxp_required= Quantity(
                    type=bool,
                    shape=[],
                    description='''
                ''',
                    default=True,
                )
            nxp_role = SubSection(sub_section=nxp_role.m_def,repeats=True)
        nxp_USER = SubSection(sub_section=nxp_USER.m_def,repeats=True)
    nxp_ENTRY = SubSection(sub_section=nxp_ENTRY.m_def,repeats=True)



class NXroot(NXobject):

    m_def = Section(
        validate=False,
        extends_base_section=True)

    nxp_category = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='base',)

    nxp_name = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXroot',)

    nxp_type = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='group',)

    nxp_extends = Quantity(
        type=str,
        shape=[],
        description='''

        ''',
        default='NXobject',)

    nxp_documentation = Quantity(
        type=str,
        shape=[],
        description='''
        Definition of the root NeXus group.
        https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot .
        ''',
        default='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot',)

    nxp_optional = Quantity(
        type=bool,
        shape=[],
        description='''

        ''',
        default=True,)

    class nxp_ENTRY(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NXentry.m_def,repeats=True)
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NXentry',
        )
        nxp_minOccurs= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='1',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        entries
                https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-entry-group
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-entry-group',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_ENTRY = SubSection(sub_section=nxp_ENTRY.m_def,repeats=True)


    class nxp_NX_class(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_class',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        The root of any NeXus data file is an ``NXroot`` class              (no
                other choice is allowed for a valid NeXus data file).               This
                attribute cements that definition.
                https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-nx-class-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-nx-class-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
        nxp_enumeration= Quantity(
            type=str,
            shape=[],
            description='''
        Possible values: NXroot''',
            default='NXroot',
        )
    nxp_NX_class = SubSection(sub_section=nxp_NX_class.m_def,repeats=True)


    class nxp_file_time(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='file_time',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_DATE_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Date and time file was originally created
                https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-file-time-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-file-time-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_file_time = SubSection(sub_section=nxp_file_time.m_def,repeats=True)


    class nxp_file_name(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='file_name',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        File name of original NeXus file
                https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-file-name-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-file-name-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_file_name = SubSection(sub_section=nxp_file_name.m_def,repeats=True)


    class nxp_file_update_time(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_DATE_TIME.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='file_update_time',
        )
        nxp_type= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NX_DATE_TIME',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Date and time of last file change at close
                https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-file-update-time-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-file-update-time-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_file_update_time = SubSection(sub_section=nxp_file_update_time.m_def,repeats=True)


    class nxp_NeXus_version(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='NeXus_version',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Version of NeXus API used in writing the file.
                Only used when the NAPI has written the file.             Note that this
                is different from the version of the             base class or application
                definition version number.
                https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-nexus-version-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-nexus-version-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_NeXus_version = SubSection(sub_section=nxp_NeXus_version.m_def,repeats=True)


    class nxp_HDF_version(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='HDF_version',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Version of HDF (version 4) library used in writing the file
                https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-hdf-version-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-hdf-version-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_HDF_version = SubSection(sub_section=nxp_HDF_version.m_def,repeats=True)


    class nxp_HDF5_Version(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='HDF5_Version',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        Version of HDF5 library used in writing the file.
                Note this attribute is spelled with uppercase "V",             different
                than other version attributes.
                https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-hdf5-version-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-hdf5-version-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_HDF5_Version = SubSection(sub_section=nxp_HDF5_Version.m_def,repeats=True)


    class nxp_XML_version(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='XML_version',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Version of XML support library used in writing the XML file
                https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-xml-version-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-xml-version-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_XML_version = SubSection(sub_section=nxp_XML_version.m_def,repeats=True)


    class nxp_h5py_version(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='h5py_version',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Version of h5py Python package used in writing the file
                https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-h5py-version-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-h5py-version-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_h5py_version = SubSection(sub_section=nxp_h5py_version.m_def,repeats=True)


    class nxp_creator(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='creator',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        facility or program where file originated
                https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-creator-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-creator-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_creator = SubSection(sub_section=nxp_creator.m_def,repeats=True)


    class nxp_creator_version(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='creator_version',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
        Version of facility or program used in writing the file
                https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-creator-version-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-creator-version-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_creator_version = SubSection(sub_section=nxp_creator_version.m_def,repeats=True)


    class nxp_default(NXobject):
        m_def = Section(validate=False,extends_base_section=True)
        nxp_base = SubSection(sub_section=NX_CHAR.m_def,repeats=True)
        nxp_name= Quantity(
            type=str,
            shape=[],
            description='''
        ''',
            default='default',
        )
        nxp_documentation= Quantity(
            type=str,
            shape=[],
            description='''
                        .. index:: plotting                          Declares which :ref:`NXentry`
                group contains              the data to be shown by default.
                It is needed to resolve ambiguity when              more than one
                :ref:`NXentry` group exists.              The value is the name of the
                default :ref:`NXentry` group.                          It is recommended
                (as of NIAC2014) to use this attribute             to help define the path
                to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.
                https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-default-attribute
                .''',
            default='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-default-attribute',
        )
        nxp_optional= Quantity(
            type=bool,
            shape=[],
            description='''
        ''',
            default=True,
        )
    nxp_default = SubSection(sub_section=nxp_default.m_def,repeats=True)



m_package.__init_metainfo__()
#None