import numpy as np            # pylint: disable=unused-import
import typing                 # pylint: disable=unused-import
from nomad.metainfo import (  # pylint: disable=unused-import
    MSection, MCategory, Category, Package, Quantity, Section, SubSection, SectionProxy,
    Reference, MEnum)
#from nomad.metainfo.legacy import LegacyDefinition
#from nomad.datamodel.metainfo.nxobject import NXobject




m_package = Package(
    name='NEXUS',
    description='None')

class NXobject(MSection):
    pass

class NXtranslation(NXobject):
    pass

class NXorientation(NXobject):
    pass

class NXcsg(NXobject):
    pass

class NX_FLOAT(NXobject):
    pass

class NX_BINARY(NXobject):
    pass

class NX_BOOLEAN(NXobject):
    pass

class NX_CHAR(NXobject):
    pass

class NX_DATE_TIME(NXobject):
    pass

class NX_INT(NXobject):
    pass

class NX_NUMBER(NXobject):
    pass

class NX_POSINT(NXobject):
    pass

class NX_UINT(NXobject):
    pass



class NXoff_geometry(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXoff_geometry',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    Geometry (shape) description.     The format closely matches the Object File
        Format (OFF) which can be output     by most CAD software.     It can be used to
        describe the shape of any beamline component, including detectors.     In the case
        of detectors it can be used to define the shape of a single pixel, or,     if the
        pixel shapes are non-uniform, to describe the shape of the whole detector.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_vertices = NX_NUMBER()
        self.nxp_vertices.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='vertices',
                )
        self.nxp_vertices.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_vertices.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_vertices.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                List of x,y,z coordinates for vertices.       The origin of the
                coordinates is the position of the parent component, for       example the
                NXdetector which the geometry describes.       If the shape describes a
                single pixel for a detector with uniform pixel       shape then the origin
                is the position of each pixel as described by the
                ``x/y/z_pixel_offset`` datasets in ``NXdetector``.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry-field',
                )
        self.nxp_vertices.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_winding_order = NX_INT()
        self.nxp_winding_order.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='winding_order',
                )
        self.nxp_winding_order.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_winding_order.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                List of indices of vertices in the ``vertices`` dataset to form each face,
                right-hand rule for face normal.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry-field',
                )
        self.nxp_winding_order.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_faces = NX_INT()
        self.nxp_faces.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='faces',
                )
        self.nxp_faces.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_faces.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The start index in ``winding_order`` for each face.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry-field',
                )
        self.nxp_faces.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_detector_faces = NX_INT()
        self.nxp_detector_faces.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='detector_faces',
                )
        self.nxp_detector_faces.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_detector_faces.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                List of pairs of index in the "faces" dataset and detector id. Face IDs in
                the first column, and corresponding detector IDs in the second column.
                This dataset should only be used only if the ``NXoff_geometry`` group is
                describing a detector.       Note, the face indices must be in ascending
                order but need not be       consecutive as not every face in faces need be
                a detecting surface or       boundary of detecting volume.       Can use
                multiple entries with the same detector id to define detector volumes.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry-field',
                )
        self.nxp_detector_faces.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXoff_geometry.html#nxoff-geometry-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXpolarizer(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXpolarizer',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    A spin polarizer.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_type = NX_CHAR()
        self.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                one of these values: "crystal", "supermirror", "3He"''',
                default='https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer-field',
                )
        self.nxp_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_composition = NX_CHAR()
        self.nxp_composition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='composition',
                )
        self.nxp_composition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                description of the composition of the polarizing material''',
                default='https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer-field',
                )
        self.nxp_composition.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_reflection = NX_INT()
        self.nxp_reflection.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='reflection',
                )
        self.nxp_reflection.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_reflection.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_reflection.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                [hkl] values of nominal reflection''',
                default='https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer-field',
                )
        self.nxp_reflection.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_efficiency = NX_FLOAT()
        self.nxp_efficiency.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='efficiency',
                )
        self.nxp_efficiency.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_efficiency.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DIMENSIONLESS',
                )
        self.nxp_efficiency.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                polarizing efficiency''',
                default='https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer-field',
                )
        self.nxp_efficiency.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXpolarizer.html#nxpolarizer-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXdetector_module(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXdetector_module',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    Geometry and logical description of a detector module. When used, child group to
        NXdetector.                                  Many detectors consist of multiple
        smaller modules. Sometimes it is important to know the exact position of such
        modules.                 This is the purpose of this group. It is a child group to
        NXdetector.

        Note, the pixel size is given as values in the array fast_pixel_direction and
        slow_pixel_direction.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_data_origin = NX_INT()
        self.nxp_data_origin.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data_origin',
                )
        self.nxp_data_origin.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_data_origin.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                A dimension-2 or dimension-3 field which gives the indices
                of the origin of the hyperslab of data for this module in the
                main area detector image in the parent NXdetector module.

                The data_origin is 0-based.

                The frame number dimension (np) is omitted.  Thus the
                data_origin field for a dimension-2 dataset with indices (np, i, j)
                will be an array with indices (i, j), and for a dimension-3
                dataset with indices (np, i, j, k) will be an array with indices
                (i, j, k).

                The :ref:`order <Design-ArrayStorageOrder>` of indices (i, j or i, j, k)
                is slow to fast.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-field',
                )
        self.nxp_data_origin.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_data_size = NX_INT()
        self.nxp_data_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data_size',
                )
        self.nxp_data_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_data_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Two or three values for the size of the module in pixels in
                each direction. Dimensionality and order of indices is the
                same as for data_origin.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-field',
                )
        self.nxp_data_size.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_module_offset = NX_NUMBER()
        self.nxp_module_offset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='module_offset',
                )
        self.nxp_module_offset.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_module_offset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_module_offset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Offset of the module in regards to the origin of the detector in an
                arbitrary direction.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-field',
                )
        self.nxp_module_offset.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_module_offset.nxp_transformation_type = NX_CHAR()
        self.nxp_module_offset.nxp_transformation_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='transformation_type',
                )
        self.nxp_module_offset.nxp_transformation_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-module-offset-attribute',
                )
        self.nxp_module_offset.nxp_transformation_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_module_offset.nxp_transformation_type.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='translation',
                )


        self.nxp_module_offset.nxp_vector = NX_NUMBER()
        self.nxp_module_offset.nxp_vector.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='vector',
                )
        self.nxp_module_offset.nxp_vector.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_module_offset.nxp_vector.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Three values that define the axis for this transformation''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-module-offset-attribute',
                )
        self.nxp_module_offset.nxp_vector.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_module_offset.nxp_offset = NX_NUMBER()
        self.nxp_module_offset.nxp_offset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='offset',
                )
        self.nxp_module_offset.nxp_offset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_module_offset.nxp_offset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                A fixed offset applied before the transformation (three vector
                components).''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-module-offset-attribute',
                )
        self.nxp_module_offset.nxp_offset.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_module_offset.nxp_offset_units = NX_CHAR()
        self.nxp_module_offset.nxp_offset_units.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='offset_units',
                )
        self.nxp_module_offset.nxp_offset_units.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_module_offset.nxp_offset_units.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Units of the offset.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-module-offset-attribute',
                )
        self.nxp_module_offset.nxp_offset_units.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_module_offset.nxp_depends_on = NX_CHAR()
        self.nxp_module_offset.nxp_depends_on.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='depends_on',
                )
        self.nxp_module_offset.nxp_depends_on.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_module_offset.nxp_depends_on.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Points to the path of the next element in the geometry chain.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-module-offset-attribute',
                )
        self.nxp_module_offset.nxp_depends_on.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_fast_pixel_direction = NX_NUMBER()
        self.nxp_fast_pixel_direction.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='fast_pixel_direction',
                )
        self.nxp_fast_pixel_direction.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_fast_pixel_direction.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_fast_pixel_direction.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Values along the direction of :ref:`fastest varying <Design-
                ArrayStorageOrder>`  :index:`pixel direction<dimension; fastest varying>`.
                Each value in this                        array is the size of a pixel in
                the units specified. Alternatively, if only one
                value is given, all pixels in this direction have the same value. The
                direction                        itself is given through the vector
                attribute.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-field',
                )
        self.nxp_fast_pixel_direction.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_fast_pixel_direction.nxp_transformation_type = NX_CHAR()
        self.nxp_fast_pixel_direction.nxp_transformation_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='transformation_type',
                )
        self.nxp_fast_pixel_direction.nxp_transformation_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-fast-pixel-direction-attribute',
                )
        self.nxp_fast_pixel_direction.nxp_transformation_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_fast_pixel_direction.nxp_transformation_type.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='translation',
                )


        self.nxp_fast_pixel_direction.nxp_vector = NX_NUMBER()
        self.nxp_fast_pixel_direction.nxp_vector.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='vector',
                )
        self.nxp_fast_pixel_direction.nxp_vector.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_fast_pixel_direction.nxp_vector.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Three values that define the axis for this transformation''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-fast-pixel-direction-attribute',
                )
        self.nxp_fast_pixel_direction.nxp_vector.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_fast_pixel_direction.nxp_offset = NX_NUMBER()
        self.nxp_fast_pixel_direction.nxp_offset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='offset',
                )
        self.nxp_fast_pixel_direction.nxp_offset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_fast_pixel_direction.nxp_offset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                A fixed offset applied before the transformation (three vector
                components).''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-fast-pixel-direction-attribute',
                )
        self.nxp_fast_pixel_direction.nxp_offset.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_fast_pixel_direction.nxp_offset_units = NX_CHAR()
        self.nxp_fast_pixel_direction.nxp_offset_units.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='offset_units',
                )
        self.nxp_fast_pixel_direction.nxp_offset_units.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_fast_pixel_direction.nxp_offset_units.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Units of the offset.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-fast-pixel-direction-attribute',
                )
        self.nxp_fast_pixel_direction.nxp_offset_units.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_fast_pixel_direction.nxp_depends_on = NX_CHAR()
        self.nxp_fast_pixel_direction.nxp_depends_on.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='depends_on',
                )
        self.nxp_fast_pixel_direction.nxp_depends_on.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_fast_pixel_direction.nxp_depends_on.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Points to the path of the next element in the geometry chain.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-fast-pixel-direction-attribute',
                )
        self.nxp_fast_pixel_direction.nxp_depends_on.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_slow_pixel_direction = NX_NUMBER()
        self.nxp_slow_pixel_direction.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='slow_pixel_direction',
                )
        self.nxp_slow_pixel_direction.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_slow_pixel_direction.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_slow_pixel_direction.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Values along the direction of :ref:`slowest varying<Design-
                ArrayStorageOrder>` :index:`pixel direction<dimension; slowest varying>`.
                Each value in this       array is the size of a pixel in the units
                specified. Alternatively, if only one       value is given, all pixels in
                this direction have the same value. The direction       itself is given
                through the vector attribute.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-field',
                )
        self.nxp_slow_pixel_direction.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_slow_pixel_direction.nxp_transformation_type = NX_CHAR()
        self.nxp_slow_pixel_direction.nxp_transformation_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='transformation_type',
                )
        self.nxp_slow_pixel_direction.nxp_transformation_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-slow-pixel-direction-attribute',
                )
        self.nxp_slow_pixel_direction.nxp_transformation_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_slow_pixel_direction.nxp_transformation_type.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='translation',
                )


        self.nxp_slow_pixel_direction.nxp_vector = NX_NUMBER()
        self.nxp_slow_pixel_direction.nxp_vector.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='vector',
                )
        self.nxp_slow_pixel_direction.nxp_vector.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_slow_pixel_direction.nxp_vector.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Three values that define the axis for this transformation''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-slow-pixel-direction-attribute',
                )
        self.nxp_slow_pixel_direction.nxp_vector.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_slow_pixel_direction.nxp_offset = NX_NUMBER()
        self.nxp_slow_pixel_direction.nxp_offset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='offset',
                )
        self.nxp_slow_pixel_direction.nxp_offset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_slow_pixel_direction.nxp_offset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                A fixed offset applied before the transformation (three vector
                components).''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-slow-pixel-direction-attribute',
                )
        self.nxp_slow_pixel_direction.nxp_offset.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_slow_pixel_direction.nxp_offset_units = NX_CHAR()
        self.nxp_slow_pixel_direction.nxp_offset_units.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='offset_units',
                )
        self.nxp_slow_pixel_direction.nxp_offset_units.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_slow_pixel_direction.nxp_offset_units.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Units of the offset.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-slow-pixel-direction-attribute',
                )
        self.nxp_slow_pixel_direction.nxp_offset_units.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_slow_pixel_direction.nxp_depends_on = NX_CHAR()
        self.nxp_slow_pixel_direction.nxp_depends_on.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='depends_on',
                )
        self.nxp_slow_pixel_direction.nxp_depends_on.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_slow_pixel_direction.nxp_depends_on.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Points to the path of the next element in the geometry chain.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-slow-pixel-direction-attribute',
                )
        self.nxp_slow_pixel_direction.nxp_depends_on.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_module.html#nxdetector-module-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXattenuator(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXattenuator',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    A device that reduces the intensity of a beam by attenuation.

        If uncertain whether to use :ref:`NXfilter` (band-pass filter)         or
        :ref:`NXattenuator` (reduces beam intensity), then choose
        :ref:`NXattenuator`.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_distance = NX_FLOAT()
        self.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Distance from sample''',
                default='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-field',
                )
        self.nxp_distance.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_type = NX_CHAR()
        self.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Type or composition of attenuator, e.g. polythene''',
                default='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-field',
                )
        self.nxp_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_thickness = NX_FLOAT()
        self.nxp_thickness.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='thickness',
                )
        self.nxp_thickness.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_thickness.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_thickness.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Thickness of attenuator along beam direction''',
                default='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-field',
                )
        self.nxp_thickness.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_scattering_cross_section = NX_FLOAT()
        self.nxp_scattering_cross_section.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='scattering_cross_section',
                )
        self.nxp_scattering_cross_section.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_scattering_cross_section.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CROSS_SECTION',
                )
        self.nxp_scattering_cross_section.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Scattering cross section (coherent+incoherent)''',
                default='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-field',
                )
        self.nxp_scattering_cross_section.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_absorption_cross_section = NX_FLOAT()
        self.nxp_absorption_cross_section.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='absorption_cross_section',
                )
        self.nxp_absorption_cross_section.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_absorption_cross_section.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CROSS_SECTION',
                )
        self.nxp_absorption_cross_section.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Absorption cross section''',
                default='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-field',
                )
        self.nxp_absorption_cross_section.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_attenuator_transmission = NX_FLOAT()
        self.nxp_attenuator_transmission.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='attenuator_transmission',
                )
        self.nxp_attenuator_transmission.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_attenuator_transmission.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DIMENSIONLESS',
                )
        self.nxp_attenuator_transmission.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The nominal amount of the beam that gets through             (transmitted
                intensity)/(incident intensity)''',
                default='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-field',
                )
        self.nxp_attenuator_transmission.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_status = NX_CHAR()
        self.nxp_status.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='status',
                )
        self.nxp_status.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                In or out or moving of the beam''',
                default='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-field',
                )
        self.nxp_status.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_status.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='in,out,moving',
                )

        self.nxp_status.nxp_time = NX_DATE_TIME()
        self.nxp_status.nxp_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='time',
                )
        self.nxp_status.nxp_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_status.nxp_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                time stamp for this observation''',
                default='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-status-attribute',
                )
        self.nxp_status.nxp_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXattenuator.html#nxattenuator-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXparameters(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXparameters',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            Container for parameters, usually used in processing or analysis.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXparameters.html#nxparameters',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_term = NX_CHAR()
        self.nxp_term.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='term',
                )
        self.nxp_term.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_term.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unbounded',
                )
        self.nxp_term.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_term.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                A parameter (also known as a term) that is used in or results from
                processing.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXparameters.html#nxparameters-field',
                )
        self.nxp_term.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_term.nxp_units = NX_CHAR()
        self.nxp_term.nxp_units.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='units',
                )
        self.nxp_term.nxp_units.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXparameters.html#nxparameters-term-attribute',
                )
        self.nxp_term.nxp_units.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXparameters.html#nxparameters-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXslit(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXslit',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    A simple slit.                                  For more complex geometries,
        :ref:`NXaperture` should be used.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXslit.html#nxslit',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_depends_on = NX_CHAR()
        self.nxp_depends_on.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='depends_on',
                )
        self.nxp_depends_on.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_depends_on.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Points to the path of the last element in the geometry chain that places
                this object in space.                          When followed through that
                chain is supposed to end at an element depending
                on "." i.e. the origin of the coordinate system.
                If desired the location of the slit can also be described relative to
                an NXbeam, which will allow a simple description of a non-centred slit.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXslit.html#nxslit-field',
                )
        self.nxp_depends_on.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_x_gap = NX_NUMBER()
        self.nxp_x_gap.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x_gap',
                )
        self.nxp_x_gap.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_x_gap.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_x_gap.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Size of the gap opening in the first dimension of the local
                coordinate system.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXslit.html#nxslit-field',
                )
        self.nxp_x_gap.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_y_gap = NX_NUMBER()
        self.nxp_y_gap.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='y_gap',
                )
        self.nxp_y_gap.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_y_gap.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_y_gap.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Size of the gap opening in the second dimension of the local
                coordinate system.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXslit.html#nxslit-field',
                )
        self.nxp_y_gap.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXslit.html#nxslit-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXflipper(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXflipper',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            A spin flipper.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_type = NX_CHAR()
        self.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-field',
                )
        self.nxp_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_type.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='coil,current-sheet',
                )


        self.nxp_flip_turns = NX_FLOAT()
        self.nxp_flip_turns.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='flip_turns',
                )
        self.nxp_flip_turns.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_flip_turns.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_PER_LENGTH',
                )
        self.nxp_flip_turns.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Linear density of turns (such as number of turns/cm) in flipping field
                coils''',
                default='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-field',
                )
        self.nxp_flip_turns.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_comp_turns = NX_FLOAT()
        self.nxp_comp_turns.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='comp_turns',
                )
        self.nxp_comp_turns.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_comp_turns.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_PER_LENGTH',
                )
        self.nxp_comp_turns.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Linear density of turns (such as number of turns/cm) in compensating field
                coils''',
                default='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-field',
                )
        self.nxp_comp_turns.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_guide_turns = NX_FLOAT()
        self.nxp_guide_turns.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='guide_turns',
                )
        self.nxp_guide_turns.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_guide_turns.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_PER_LENGTH',
                )
        self.nxp_guide_turns.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Linear density of turns (such as number of turns/cm) in guide field coils''',
                default='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-field',
                )
        self.nxp_guide_turns.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_flip_current = NX_FLOAT()
        self.nxp_flip_current.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='flip_current',
                )
        self.nxp_flip_current.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_flip_current.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CURRENT',
                )
        self.nxp_flip_current.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Flipping field coil current in "on" state"''',
                default='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-field',
                )
        self.nxp_flip_current.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_comp_current = NX_FLOAT()
        self.nxp_comp_current.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='comp_current',
                )
        self.nxp_comp_current.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_comp_current.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CURRENT',
                )
        self.nxp_comp_current.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Compensating field coil current in "on" state"''',
                default='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-field',
                )
        self.nxp_comp_current.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_guide_current = NX_FLOAT()
        self.nxp_guide_current.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='guide_current',
                )
        self.nxp_guide_current.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_guide_current.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CURRENT',
                )
        self.nxp_guide_current.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Guide field coil current in "on" state"''',
                default='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-field',
                )
        self.nxp_guide_current.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_thickness = NX_FLOAT()
        self.nxp_thickness.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='thickness',
                )
        self.nxp_thickness.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_thickness.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_thickness.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                thickness along path of neutron travel''',
                default='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-field',
                )
        self.nxp_thickness.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXflipper.html#nxflipper-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXcollection(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXcollection',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_ignoreExtraGroups = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='true',)

        self.nxp_ignoreExtraFields = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='true',)

        self.nxp_ignoreExtraAttributes = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='true',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    An unvalidated set of terms, such as the description of a beam line.
        Use :ref:`NXcollection` to gather together any set of terms.                 The
        original suggestion is to use this as a container                  class for the
        description of a beamline.                                  For NeXus validation,
        :ref:`NXcollection` will always generate                  a warning since it is
        always an optional group.                   Anything (groups, fields, or
        attributes) placed in                 an :ref:`NXcollection` group will not be
        validated.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcollection.html#nxcollection',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)


class NXshape(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXshape',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    legacy class - (used by :ref:`NXgeometry`) - the shape and size of a component.
        This is the description of the general shape and size of a
        component, which may be made up of ``numobj`` separate                  elements -
        it is used by the :ref:`NXgeometry` class
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXshape.html#nxshape',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_shape = NX_CHAR()
        self.nxp_shape.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='shape',
                )
        self.nxp_shape.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                general shape of a component''',
                default='https://manual.nexusformat.org/classes/base_classes/NXshape.html#nxshape-field',
                )
        self.nxp_shape.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_shape.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='nxflat,nxcylinder,nxbox,nxsphere,nxcone,nxelliptical,nxtoroidal,nxparabolic,nxpolynomial',
                )


        self.nxp_size = NX_FLOAT()
        self.nxp_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='size',
                )
        self.nxp_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                physical extent of the object along its local axes (after NXorientation)
                with the center of mass at the local origin (after NXtranslation).
                The meaning and location of these axes will vary according to the value
                of the "shape" variable.                          ``nshapepar`` defines
                how many parameters:

                - For "nxcylinder" type the parameters are (diameter,height) and a three
                value orientation vector of the cylinder.                          - For
                the "nxbox" type the parameters are (length,width,height).
                - For the "nxsphere" type the parameters are (diameter).
                - For nxcone cone half aperture                         - For
                nxelliptical, semi-major axis, semi-minor-axis, angle of major axis and
                pole                         - For nxtoroidal, major radius, minor radius
                - For nxparabolic, parabolic parameter a                         - For
                nxpolynomial, an array of polynom coefficients, the dimension of the array
                encodes the degree of the polynom''',
                default='https://manual.nexusformat.org/classes/base_classes/NXshape.html#nxshape-field',
                )
        self.nxp_size.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_direction = NX_CHAR()
        self.nxp_direction.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='direction',
                )
        self.nxp_direction.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXshape.html#nxshape-field',
                )
        self.nxp_direction.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_direction.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='concave,convex',
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXshape.html#nxshape-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXlog(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXlog',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    Information recorded as a function of time.

        Description of information that is recorded against                 time. There
        are two common use cases for this:

        - When logging data such as temperature during a run                 - When data
        is taken in streaming mode data acquisition,                   i.e. just
        timestamp, value pairs are stored and                   correlated later in data
        reduction with other data,

        In both cases, NXlog contains                 the logged or streamed  values and
        the times at which they were measured as elapsed time since a starting
        time recorded in ISO8601 format. The time units are                 specified in
        the units attribute. An optional scaling attribute                 can be used to
        accomodate non standard clocks.

        This method of storing logged data helps to distinguish                 instances
        in which a variable is a dimension scale of the data, in which case it is stored
        in an :ref:`NXdata` group, and instances in which it is logged during the
        run, when it should be stored in an :ref:`NXlog` group.

        In order to make random access to timestamped data faster there is an optional
        array pair of                 ``cue_timestamp_zero`` and ``cue_index``. The
        ``cue_timestamp_zero`` will                 contain coarser timestamps than in the
        time array, say                 every five minutes. The ``cue_index`` will then
        contain the                 index into the time,value pair of arrays for that
        coarser ``cue_timestamp_zero``.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_time = NX_NUMBER()
        self.nxp_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='time',
                )
        self.nxp_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_time.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Time of logged entry. The times are relative to the "start" attribute
                and in the units specified in the "units"
                attribute. Please note that absolute                         timestamps
                under unix are relative to ``1970-01-01T00:00:00.0Z``.

                The scaling_factor, when present, has to be applied to the time values in
                order                         to arrive at the units specified in the
                units attribute. The scaling_factor allows                         for
                arbitrary time units such as ticks of some hardware clock.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-field',
                )
        self.nxp_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_time.nxp_start = NX_DATE_TIME()
        self.nxp_time.nxp_start.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start',
                )
        self.nxp_time.nxp_start.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_time.nxp_start.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-time-attribute',
                )
        self.nxp_time.nxp_start.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_time.nxp_scaling_factor = NX_NUMBER()
        self.nxp_time.nxp_scaling_factor.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='scaling_factor',
                )
        self.nxp_time.nxp_scaling_factor.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_time.nxp_scaling_factor.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-time-attribute',
                )
        self.nxp_time.nxp_scaling_factor.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_value = NX_NUMBER()
        self.nxp_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value',
                )
        self.nxp_value.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Array of logged value, such as temperature. If this is             a
                single value the dimensionality is             nEntries. However, NXlog
                can also be used to store             multi dimensional time stamped data
                such as images. In             this example the dimensionality of values
                would be value[nEntries,xdim,ydim].''',
                default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-field',
                )
        self.nxp_value.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_raw_value = NX_NUMBER()
        self.nxp_raw_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='raw_value',
                )
        self.nxp_raw_value.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_raw_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_raw_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Array of raw information, such as thermocouple voltage''',
                default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-field',
                )
        self.nxp_raw_value.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_description = NX_CHAR()
        self.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Description of logged value''',
                default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-field',
                )
        self.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_average_value = NX_FLOAT()
        self.nxp_average_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='average_value',
                )
        self.nxp_average_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_average_value.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_average_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-field',
                )
        self.nxp_average_value.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_average_value_error = NX_FLOAT()
        self.nxp_average_value_error.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='average_value_error',
                )
        self.nxp_average_value_error.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_average_value_error.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_average_value_error.nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='see: https://github.com/nexusformat/definitions/issues/639',
                )
        self.nxp_average_value_error.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                estimated uncertainty (often used: standard deviation) of average_value''',
                default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-field',
                )
        self.nxp_average_value_error.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_average_value_error.nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_average_value_errors = NX_FLOAT()
        self.nxp_average_value_errors.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='average_value_errors',
                )
        self.nxp_average_value_errors.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_average_value_errors.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_average_value_errors.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                estimated uncertainty (often used: standard deviation) of average_value''',
                default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-field',
                )
        self.nxp_average_value_errors.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_minimum_value = NX_FLOAT()
        self.nxp_minimum_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='minimum_value',
                )
        self.nxp_minimum_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_minimum_value.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_minimum_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-field',
                )
        self.nxp_minimum_value.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_maximum_value = NX_FLOAT()
        self.nxp_maximum_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='maximum_value',
                )
        self.nxp_maximum_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_maximum_value.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_maximum_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-field',
                )
        self.nxp_maximum_value.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_duration = NX_FLOAT()
        self.nxp_duration.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='duration',
                )
        self.nxp_duration.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_duration.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_duration.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Total time log was taken''',
                default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-field',
                )
        self.nxp_duration.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_cue_timestamp_zero = NX_NUMBER()
        self.nxp_cue_timestamp_zero.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='cue_timestamp_zero',
                )
        self.nxp_cue_timestamp_zero.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_cue_timestamp_zero.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_cue_timestamp_zero.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Timestamps matching the corresponding cue_index into the             time,
                value pair.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-field',
                )
        self.nxp_cue_timestamp_zero.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_cue_timestamp_zero.nxp_start = NX_DATE_TIME()
        self.nxp_cue_timestamp_zero.nxp_start.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start',
                )
        self.nxp_cue_timestamp_zero.nxp_start.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_cue_timestamp_zero.nxp_start.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                If missing start is assumed to be the same as for "time".''',
                default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-cue-timestamp-zero-attribute',
                )
        self.nxp_cue_timestamp_zero.nxp_start.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_cue_timestamp_zero.nxp_scaling_factor = NX_NUMBER()
        self.nxp_cue_timestamp_zero.nxp_scaling_factor.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='scaling_factor',
                )
        self.nxp_cue_timestamp_zero.nxp_scaling_factor.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_cue_timestamp_zero.nxp_scaling_factor.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                If missing start is assumed to be the same as for "time".''',
                default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-cue-timestamp-zero-attribute',
                )
        self.nxp_cue_timestamp_zero.nxp_scaling_factor.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_cue_index = NX_INT()
        self.nxp_cue_index.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='cue_index',
                )
        self.nxp_cue_index.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_cue_index.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Index into the time, value pair matching the corresponding
                cue_timestamp_zero.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-field',
                )
        self.nxp_cue_index.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXlog.html#nxlog-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXreflections(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXreflections',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            Reflection data from diffraction experiments
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_experiments = NX_CHAR()
        self.nxp_experiments.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='experiments',
                )
        self.nxp_experiments.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_experiments.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The experiments from which the reflection data derives''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_experiments.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_h = NX_NUMBER()
        self.nxp_h.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='h',
                )
        self.nxp_h.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_h.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_h.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The h component of the miller index''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_h.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_h.nxp_description = NX_CHAR()
        self.nxp_h.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_h.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-h-attribute',
                )
        self.nxp_h.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_k = NX_NUMBER()
        self.nxp_k.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='k',
                )
        self.nxp_k.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_k.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_k.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The k component of the miller index''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_k.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_k.nxp_description = NX_CHAR()
        self.nxp_k.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_k.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-k-attribute',
                )
        self.nxp_k.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_l = NX_NUMBER()
        self.nxp_l.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='l',
                )
        self.nxp_l.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_l.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_l.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The l component of the miller index''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_l.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_l.nxp_description = NX_CHAR()
        self.nxp_l.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_l.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-l-attribute',
                )
        self.nxp_l.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_id = NX_INT()
        self.nxp_id.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='id',
                )
        self.nxp_id.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_id.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_id.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The id of the experiment which resulted in the reflection. If the value
                is greater than 0, the experiments must link to a multi-experiment NXmx
                group''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_id.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_id.nxp_description = NX_CHAR()
        self.nxp_id.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_id.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-id-attribute',
                )
        self.nxp_id.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_reflection_id = NX_INT()
        self.nxp_reflection_id.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='reflection_id',
                )
        self.nxp_reflection_id.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_reflection_id.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_reflection_id.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The id of the reflection. Multiple partials from the same reflection
                should all have the same id''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_reflection_id.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_reflection_id.nxp_description = NX_CHAR()
        self.nxp_reflection_id.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_reflection_id.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-reflection-id-attribute',
                )
        self.nxp_reflection_id.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entering = NX_BOOLEAN()
        self.nxp_entering.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entering',
                )
        self.nxp_entering.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_BOOLEAN',
                )
        self.nxp_entering.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entering.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Is the reflection entering or exiting the Ewald sphere''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_entering.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entering.nxp_description = NX_CHAR()
        self.nxp_entering.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_entering.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-entering-attribute',
                )
        self.nxp_entering.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_det_module = NX_INT()
        self.nxp_det_module.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='det_module',
                )
        self.nxp_det_module.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_det_module.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_det_module.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The detector module on which the reflection was recorded''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_det_module.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_det_module.nxp_description = NX_CHAR()
        self.nxp_det_module.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_det_module.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-det-module-attribute',
                )
        self.nxp_det_module.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_flags = NX_INT()
        self.nxp_flags.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='flags',
                )
        self.nxp_flags.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_flags.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_flags.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Status flags describing the reflection.               This is a bit mask.
                The bits in the mask follow the convention        used by DIALS, and have
                the following names:              ===
                ==========================================       bit   name       ===
                ==========================================       0     ``predicted``
                1     ``observed``       2     ``indexed``       3
                ``used_in_refinement``       4     ``strong``       5
                ``reference_spot``       6     ``dont_integrate``       7
                ``integrated_sum``       8     ``integrated_prf``       9
                ``integrated``       10    ``overloaded``       11    ``overlapped``
                12    ``overlapped_fg``       13    ``in_powder_ring``       14
                ``foreground_includes_bad_pixels``       15
                ``background_includes_bad_pixels``       16    ``includes_bad_pixels``
                17    ``bad_shoebox``       18    ``bad_spot``       19
                ``used_in_modelling``       20    ``centroid_outlier``       21
                ``failed_during_background_modelling``       22
                ``failed_during_summation``       23    ``failed_during_profile_fitting``
                24    ``bad_reference``       ===
                ==========================================''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_flags.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_flags.nxp_description = NX_CHAR()
        self.nxp_flags.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_flags.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-flags-attribute',
                )
        self.nxp_flags.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_d = NX_FLOAT()
        self.nxp_d.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='d',
                )
        self.nxp_d.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_d.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_d.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The resolution of the reflection''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_d.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_d.nxp_description = NX_CHAR()
        self.nxp_d.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_d.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-d-attribute',
                )
        self.nxp_d.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_partiality = NX_FLOAT()
        self.nxp_partiality.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='partiality',
                )
        self.nxp_partiality.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_partiality.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_partiality.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The partiality of the reflection.        Dividing by this number will
                inflate the measured        intensity to the full reflection equivalent.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_partiality.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_partiality.nxp_description = NX_CHAR()
        self.nxp_partiality.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_partiality.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-partiality-attribute',
                )
        self.nxp_partiality.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_predicted_frame = NX_FLOAT()
        self.nxp_predicted_frame.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='predicted_frame',
                )
        self.nxp_predicted_frame.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_predicted_frame.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_predicted_frame.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_predicted_frame.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The frame on which the bragg peak of the reflection is predicted''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_predicted_frame.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_predicted_frame.nxp_description = NX_CHAR()
        self.nxp_predicted_frame.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_predicted_frame.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-frame-attribute',
                )
        self.nxp_predicted_frame.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_predicted_x = NX_FLOAT()
        self.nxp_predicted_x.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='predicted_x',
                )
        self.nxp_predicted_x.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_predicted_x.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_predicted_x.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_predicted_x.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The x position at which the bragg peak of the reflection       is
                predicted''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_predicted_x.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_predicted_x.nxp_description = NX_CHAR()
        self.nxp_predicted_x.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_predicted_x.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-x-attribute',
                )
        self.nxp_predicted_x.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_predicted_y = NX_FLOAT()
        self.nxp_predicted_y.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='predicted_y',
                )
        self.nxp_predicted_y.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_predicted_y.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_predicted_y.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_predicted_y.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The y position at which the bragg peak of the reflection       is
                predicted''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_predicted_y.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_predicted_y.nxp_description = NX_CHAR()
        self.nxp_predicted_y.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_predicted_y.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-y-attribute',
                )
        self.nxp_predicted_y.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_predicted_phi = NX_FLOAT()
        self.nxp_predicted_phi.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='predicted_phi',
                )
        self.nxp_predicted_phi.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_predicted_phi.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_predicted_phi.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_predicted_phi.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The phi angle at which the bragg peak of the reflection is predicted''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_predicted_phi.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_predicted_phi.nxp_description = NX_CHAR()
        self.nxp_predicted_phi.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_predicted_phi.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-phi-attribute',
                )
        self.nxp_predicted_phi.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_predicted_px_x = NX_FLOAT()
        self.nxp_predicted_px_x.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='predicted_px_x',
                )
        self.nxp_predicted_px_x.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_predicted_px_x.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_predicted_px_x.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_predicted_px_x.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The x pixel position at which the bragg peak of the reflection is
                predicted''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_predicted_px_x.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_predicted_px_x.nxp_description = NX_CHAR()
        self.nxp_predicted_px_x.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_predicted_px_x.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-px-x-attribute',
                )
        self.nxp_predicted_px_x.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_predicted_px_y = NX_FLOAT()
        self.nxp_predicted_px_y.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='predicted_px_y',
                )
        self.nxp_predicted_px_y.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_predicted_px_y.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_predicted_px_y.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_predicted_px_y.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The y pixel position at which the bragg peak of the reflection is
                predicted''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_predicted_px_y.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_predicted_px_y.nxp_description = NX_CHAR()
        self.nxp_predicted_px_y.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_predicted_px_y.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-predicted-px-y-attribute',
                )
        self.nxp_predicted_px_y.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_observed_frame = NX_FLOAT()
        self.nxp_observed_frame.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='observed_frame',
                )
        self.nxp_observed_frame.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_observed_frame.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_observed_frame.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_observed_frame.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The estimate of the frame at which the central impact of the
                reflection was recorded''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_observed_frame.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_observed_frame.nxp_description = NX_CHAR()
        self.nxp_observed_frame.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_observed_frame.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-frame-attribute',
                )
        self.nxp_observed_frame.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_observed_frame_var = NX_FLOAT()
        self.nxp_observed_frame_var.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='observed_frame_var',
                )
        self.nxp_observed_frame_var.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_observed_frame_var.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_observed_frame_var.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_observed_frame_var.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The variance on the estimate of the frame at which the central
                impact of the reflection was recorded''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_observed_frame_var.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_observed_frame_var.nxp_description = NX_CHAR()
        self.nxp_observed_frame_var.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_observed_frame_var.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-frame-var-attribute',
                )
        self.nxp_observed_frame_var.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_observed_frame_errors = NX_FLOAT()
        self.nxp_observed_frame_errors.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='observed_frame_errors',
                )
        self.nxp_observed_frame_errors.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_observed_frame_errors.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_observed_frame_errors.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_observed_frame_errors.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The standard deviation of the estimate of the frame at which the central
                impact of the reflection was recorded''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_observed_frame_errors.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_observed_frame_errors.nxp_description = NX_CHAR()
        self.nxp_observed_frame_errors.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_observed_frame_errors.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-frame-errors-attribute',
                )
        self.nxp_observed_frame_errors.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_observed_px_x = NX_FLOAT()
        self.nxp_observed_px_x.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='observed_px_x',
                )
        self.nxp_observed_px_x.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_observed_px_x.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_observed_px_x.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_observed_px_x.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The estimate of the pixel x position at which the central impact of
                the reflection was recorded''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_observed_px_x.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_observed_px_x.nxp_description = NX_CHAR()
        self.nxp_observed_px_x.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_observed_px_x.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-x-attribute',
                )
        self.nxp_observed_px_x.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_observed_px_x_var = NX_FLOAT()
        self.nxp_observed_px_x_var.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='observed_px_x_var',
                )
        self.nxp_observed_px_x_var.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_observed_px_x_var.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_observed_px_x_var.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_observed_px_x_var.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The variance on the estimate of the pixel x position at which the
                central impact of the reflection was recorded''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_observed_px_x_var.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_observed_px_x_var.nxp_description = NX_CHAR()
        self.nxp_observed_px_x_var.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_observed_px_x_var.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-x-var-attribute',
                )
        self.nxp_observed_px_x_var.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_observed_px_x_errors = NX_FLOAT()
        self.nxp_observed_px_x_errors.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='observed_px_x_errors',
                )
        self.nxp_observed_px_x_errors.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_observed_px_x_errors.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_observed_px_x_errors.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_observed_px_x_errors.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The standard deviation of the estimate of the pixel x position at which
                the       central impact of the reflection was recorded''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_observed_px_x_errors.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_observed_px_x_errors.nxp_description = NX_CHAR()
        self.nxp_observed_px_x_errors.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_observed_px_x_errors.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-x-errors-attribute',
                )
        self.nxp_observed_px_x_errors.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_observed_px_y = NX_FLOAT()
        self.nxp_observed_px_y.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='observed_px_y',
                )
        self.nxp_observed_px_y.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_observed_px_y.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_observed_px_y.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_observed_px_y.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The estimate of the pixel y position at which the central impact of
                the reflection was recorded''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_observed_px_y.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_observed_px_y.nxp_description = NX_CHAR()
        self.nxp_observed_px_y.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_observed_px_y.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-y-attribute',
                )
        self.nxp_observed_px_y.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_observed_px_y_var = NX_FLOAT()
        self.nxp_observed_px_y_var.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='observed_px_y_var',
                )
        self.nxp_observed_px_y_var.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_observed_px_y_var.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_observed_px_y_var.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_observed_px_y_var.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The variance on the estimate of the pixel y position at which the
                central impact of the reflection was recorded''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_observed_px_y_var.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_observed_px_y_var.nxp_description = NX_CHAR()
        self.nxp_observed_px_y_var.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_observed_px_y_var.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-y-var-attribute',
                )
        self.nxp_observed_px_y_var.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_observed_px_y_errors = NX_FLOAT()
        self.nxp_observed_px_y_errors.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='observed_px_y_errors',
                )
        self.nxp_observed_px_y_errors.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_observed_px_y_errors.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_observed_px_y_errors.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_observed_px_y_errors.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The standard deviation of the estimate of the pixel y position at which
                the       central impact of the reflection was recorded''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_observed_px_y_errors.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_observed_px_y_errors.nxp_description = NX_CHAR()
        self.nxp_observed_px_y_errors.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_observed_px_y_errors.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-px-y-errors-attribute',
                )
        self.nxp_observed_px_y_errors.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_observed_phi = NX_FLOAT()
        self.nxp_observed_phi.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='observed_phi',
                )
        self.nxp_observed_phi.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_observed_phi.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_observed_phi.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_observed_phi.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The estimate of the phi angle at which the central impact of the
                reflection was recorded''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_observed_phi.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_observed_phi.nxp_description = NX_CHAR()
        self.nxp_observed_phi.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_observed_phi.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-phi-attribute',
                )
        self.nxp_observed_phi.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_observed_phi_var = NX_FLOAT()
        self.nxp_observed_phi_var.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='observed_phi_var',
                )
        self.nxp_observed_phi_var.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_observed_phi_var.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_observed_phi_var.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_observed_phi_var.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The variance on the estimate of the phi angle at which the central
                impact of the reflection was recorded''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_observed_phi_var.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_observed_phi_var.nxp_description = NX_CHAR()
        self.nxp_observed_phi_var.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_observed_phi_var.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-phi-var-attribute',
                )
        self.nxp_observed_phi_var.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_observed_phi_errors = NX_FLOAT()
        self.nxp_observed_phi_errors.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='observed_phi_errors',
                )
        self.nxp_observed_phi_errors.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_observed_phi_errors.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_observed_phi_errors.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_observed_phi_errors.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The standard deviation of the estimate of the phi angle at which the
                central       impact of the reflection was recorded''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_observed_phi_errors.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_observed_phi_errors.nxp_description = NX_CHAR()
        self.nxp_observed_phi_errors.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_observed_phi_errors.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-phi-errors-attribute',
                )
        self.nxp_observed_phi_errors.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_observed_x = NX_FLOAT()
        self.nxp_observed_x.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='observed_x',
                )
        self.nxp_observed_x.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_observed_x.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_observed_x.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_observed_x.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The estimate of the x position at which the central       impact of the
                reflection was recorded''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_observed_x.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_observed_x.nxp_description = NX_CHAR()
        self.nxp_observed_x.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_observed_x.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-x-attribute',
                )
        self.nxp_observed_x.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_observed_x_var = NX_FLOAT()
        self.nxp_observed_x_var.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='observed_x_var',
                )
        self.nxp_observed_x_var.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_observed_x_var.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_observed_x_var.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_observed_x_var.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The variance on the estimate of the x position at which       the central
                impact of the reflection was recorded''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_observed_x_var.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_observed_x_var.nxp_description = NX_CHAR()
        self.nxp_observed_x_var.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_observed_x_var.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-x-var-attribute',
                )
        self.nxp_observed_x_var.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_observed_x_errors = NX_FLOAT()
        self.nxp_observed_x_errors.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='observed_x_errors',
                )
        self.nxp_observed_x_errors.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_observed_x_errors.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_observed_x_errors.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_observed_x_errors.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The standard deviation of the estimate of the x position at which
                the central impact of the reflection was recorded''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_observed_x_errors.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_observed_x_errors.nxp_description = NX_CHAR()
        self.nxp_observed_x_errors.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_observed_x_errors.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-x-errors-attribute',
                )
        self.nxp_observed_x_errors.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_observed_y = NX_FLOAT()
        self.nxp_observed_y.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='observed_y',
                )
        self.nxp_observed_y.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_observed_y.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_observed_y.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_observed_y.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The estimate of the y position at which the central       impact of the
                reflection was recorded''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_observed_y.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_observed_y.nxp_description = NX_CHAR()
        self.nxp_observed_y.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_observed_y.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-y-attribute',
                )
        self.nxp_observed_y.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_observed_y_var = NX_FLOAT()
        self.nxp_observed_y_var.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='observed_y_var',
                )
        self.nxp_observed_y_var.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_observed_y_var.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_observed_y_var.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_observed_y_var.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The variance on the estimate of the y position at which       the central
                impact of the reflection was recorded''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_observed_y_var.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_observed_y_var.nxp_description = NX_CHAR()
        self.nxp_observed_y_var.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_observed_y_var.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-y-var-attribute',
                )
        self.nxp_observed_y_var.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_observed_y_errors = NX_FLOAT()
        self.nxp_observed_y_errors.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='observed_y_errors',
                )
        self.nxp_observed_y_errors.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_observed_y_errors.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_observed_y_errors.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_observed_y_errors.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The standard deviation of the estimate of the y position at which
                the central impact of the reflection was recorded''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_observed_y_errors.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_observed_y_errors.nxp_description = NX_CHAR()
        self.nxp_observed_y_errors.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_observed_y_errors.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-observed-y-errors-attribute',
                )
        self.nxp_observed_y_errors.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_bounding_box = NX_INT()
        self.nxp_bounding_box.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='bounding_box',
                )
        self.nxp_bounding_box.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_bounding_box.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_bounding_box.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_bounding_box.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The bounding box around the recorded recorded reflection.        Should be
                an integer array of length 6, where the 6 values        are pixel
                positions or frame numbers, as follows:              =====
                ===========================       index  meaning       =====
                ===========================       0      The lower pixel x position
                1      The upper pixel x position       2      The lower pixel y position
                3      The upper pixel y position       4      The lower frame number
                5      The upper frame number       =====  ===========================''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_bounding_box.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_bounding_box.nxp_description = NX_CHAR()
        self.nxp_bounding_box.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_bounding_box.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-bounding-box-attribute',
                )
        self.nxp_bounding_box.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_background_mean = NX_FLOAT()
        self.nxp_background_mean.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='background_mean',
                )
        self.nxp_background_mean.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_background_mean.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_background_mean.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The mean background under the reflection peak''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_background_mean.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_background_mean.nxp_description = NX_CHAR()
        self.nxp_background_mean.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_background_mean.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-background-mean-attribute',
                )
        self.nxp_background_mean.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_int_prf = NX_FLOAT()
        self.nxp_int_prf.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='int_prf',
                )
        self.nxp_int_prf.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_int_prf.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_int_prf.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The estimate of the reflection intensity by profile fitting''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_int_prf.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_int_prf.nxp_description = NX_CHAR()
        self.nxp_int_prf.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_int_prf.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-prf-attribute',
                )
        self.nxp_int_prf.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_int_prf_var = NX_FLOAT()
        self.nxp_int_prf_var.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='int_prf_var',
                )
        self.nxp_int_prf_var.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_int_prf_var.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_int_prf_var.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The variance on the estimate of the reflection intensity by profile
                fitting''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_int_prf_var.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_int_prf_var.nxp_description = NX_CHAR()
        self.nxp_int_prf_var.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_int_prf_var.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-prf-var-attribute',
                )
        self.nxp_int_prf_var.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_int_prf_errors = NX_FLOAT()
        self.nxp_int_prf_errors.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='int_prf_errors',
                )
        self.nxp_int_prf_errors.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_int_prf_errors.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_int_prf_errors.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The standard deviation of the estimate of the reflection intensity by
                profile       fitting''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_int_prf_errors.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_int_prf_errors.nxp_description = NX_CHAR()
        self.nxp_int_prf_errors.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_int_prf_errors.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-prf-errors-attribute',
                )
        self.nxp_int_prf_errors.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_int_sum = NX_FLOAT()
        self.nxp_int_sum.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='int_sum',
                )
        self.nxp_int_sum.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_int_sum.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_int_sum.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The estimate of the reflection intensity by summation''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_int_sum.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_int_sum.nxp_description = NX_CHAR()
        self.nxp_int_sum.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_int_sum.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-sum-attribute',
                )
        self.nxp_int_sum.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_int_sum_var = NX_FLOAT()
        self.nxp_int_sum_var.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='int_sum_var',
                )
        self.nxp_int_sum_var.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_int_sum_var.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_int_sum_var.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The variance on the estimate of the reflection intensity by
                summation''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_int_sum_var.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_int_sum_var.nxp_description = NX_CHAR()
        self.nxp_int_sum_var.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_int_sum_var.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-sum-var-attribute',
                )
        self.nxp_int_sum_var.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_int_sum_errors = NX_FLOAT()
        self.nxp_int_sum_errors.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='int_sum_errors',
                )
        self.nxp_int_sum_errors.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_int_sum_errors.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_int_sum_errors.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The standard deviation of the estimate of the reflection intensity by
                summation''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_int_sum_errors.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_int_sum_errors.nxp_description = NX_CHAR()
        self.nxp_int_sum_errors.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_int_sum_errors.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-int-sum-errors-attribute',
                )
        self.nxp_int_sum_errors.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_lp = NX_FLOAT()
        self.nxp_lp.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='lp',
                )
        self.nxp_lp.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_lp.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_lp.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The LP correction factor to be applied to the reflection intensities''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_lp.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_lp.nxp_description = NX_CHAR()
        self.nxp_lp.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_lp.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-lp-attribute',
                )
        self.nxp_lp.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_prf_cc = NX_FLOAT()
        self.nxp_prf_cc.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='prf_cc',
                )
        self.nxp_prf_cc.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_prf_cc.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_prf_cc.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The correlation of the reflection profile with the reference profile
                used in profile fitting''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_prf_cc.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_prf_cc.nxp_description = NX_CHAR()
        self.nxp_prf_cc.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_prf_cc.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-prf-cc-attribute',
                )
        self.nxp_prf_cc.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_overlaps = NX_INT()
        self.nxp_overlaps.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='overlaps',
                )
        self.nxp_overlaps.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_overlaps.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_overlaps.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                An adjacency list specifying the spatial overlaps of reflections. The
                adjacency list is specified using an array data type where the elements
                of the array are the indices of the adjacent overlapped reflection''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_overlaps.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_overlaps.nxp_description = NX_CHAR()
        self.nxp_overlaps.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_overlaps.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-overlaps-attribute',
                )
        self.nxp_overlaps.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_polar_angle = NX_FLOAT()
        self.nxp_polar_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='polar_angle',
                )
        self.nxp_polar_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_polar_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_polar_angle.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_polar_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Polar angle of reflection centroid, following the NeXus simple (spherical
                polar) coordinate system''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_polar_angle.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_polar_angle.nxp_description = NX_CHAR()
        self.nxp_polar_angle.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_polar_angle.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-polar-angle-attribute',
                )
        self.nxp_polar_angle.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_azimuthal_angle = NX_FLOAT()
        self.nxp_azimuthal_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='azimuthal_angle',
                )
        self.nxp_azimuthal_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_azimuthal_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_azimuthal_angle.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_azimuthal_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Azimuthal angle of reflection centroid, following the NeXus simple
                (spherical polar) coordinate system''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-field',
                )
        self.nxp_azimuthal_angle.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_description = NX_CHAR()
        self.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Describes the dataset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-attribute',
                )
        self.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXreflections.html#nxreflections-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXpositioner(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXpositioner',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    A generic positioner such as a motor or piezo-electric transducer.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_name = NX_CHAR()
        self.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                symbolic or mnemonic name (one word)''',
                default='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-field',
                )
        self.nxp_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_description = NX_CHAR()
        self.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                description of positioner''',
                default='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-field',
                )
        self.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_value = NX_NUMBER()
        self.nxp_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value',
                )
        self.nxp_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_value.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                best known value of positioner - need [n] as may be scanned''',
                default='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-field',
                )
        self.nxp_value.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_raw_value = NX_NUMBER()
        self.nxp_raw_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='raw_value',
                )
        self.nxp_raw_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_raw_value.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_raw_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                raw value of positioner - need [n] as may be scanned''',
                default='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-field',
                )
        self.nxp_raw_value.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_target_value = NX_NUMBER()
        self.nxp_target_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='target_value',
                )
        self.nxp_target_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_target_value.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_target_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                targeted (commanded) value of positioner - need [n] as may be scanned''',
                default='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-field',
                )
        self.nxp_target_value.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_tolerance = NX_NUMBER()
        self.nxp_tolerance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='tolerance',
                )
        self.nxp_tolerance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_tolerance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_tolerance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                maximum allowable difference between target_value and value''',
                default='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-field',
                )
        self.nxp_tolerance.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_soft_limit_min = NX_NUMBER()
        self.nxp_soft_limit_min.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='soft_limit_min',
                )
        self.nxp_soft_limit_min.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_soft_limit_min.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_soft_limit_min.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                minimum allowed limit to set value''',
                default='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-field',
                )
        self.nxp_soft_limit_min.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_soft_limit_max = NX_NUMBER()
        self.nxp_soft_limit_max.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='soft_limit_max',
                )
        self.nxp_soft_limit_max.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_soft_limit_max.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_soft_limit_max.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                maximum allowed limit to set value''',
                default='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-field',
                )
        self.nxp_soft_limit_max.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_velocity = NX_NUMBER()
        self.nxp_velocity.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='velocity',
                )
        self.nxp_velocity.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_velocity.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_velocity.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                velocity of the positioner (distance moved per unit time)''',
                default='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-field',
                )
        self.nxp_velocity.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_acceleration_time = NX_NUMBER()
        self.nxp_acceleration_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='acceleration_time',
                )
        self.nxp_acceleration_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_acceleration_time.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_acceleration_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                time to ramp the velocity up to full speed''',
                default='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-field',
                )
        self.nxp_acceleration_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_controller_record = NX_CHAR()
        self.nxp_controller_record.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='controller_record',
                )
        self.nxp_controller_record.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Hardware device record, e.g. EPICS process variable, taco/tango ...''',
                default='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-field',
                )
        self.nxp_controller_record.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXpositioner.html#nxpositioner-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXdata(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXdata',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_ignoreExtraFields = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='true',)

        self.nxp_ignoreExtraAttributes = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='true',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    :ref:`NXdata` describes the plottable data and related dimension scales.
        .. index:: plotting                                  It is mandatory  that there
        is at least one :ref:`NXdata` group                  in each :ref:`NXentry` group.
        Note that the ``variable`` and ``data``                  can be defined with
        different names.                   The ``signal`` and ``axes`` attributes of the
        ``data`` group define which items                  are plottable data and which
        are *dimension scales*, respectively.
        :ref:`NXdata` is used to implement one of the basic motivations in NeXus,
        to provide a default plot for the data of this :ref:`NXentry`.  The actual data
        might be stored in another group and (hard) linked to the :ref:`NXdata` group.

        * Each :ref:`NXdata` group will define only one data set
        containing plottable data, dimension scales, and                    possibly
        associated standard deviations.                   Other data sets may be present
        in the group.                 * The plottable data may be of arbitrary rank up to
        a maximum                   of ``NX_MAXRANK=32``.                 * The plottable
        data will be named as the value of                    the group ``signal``
        attribute, such as::                                        data:NXdata
        @signal = "counts"                       @axes = "mr"
        @mr_indices = 0                       counts: float[100]  --> the default
        dependent data                       mr: float[100]  --> the default independent
        data                                      The field named in the ``signal``
        attribute **must** exist, either                   directly as a dataset or
        defined through a link.                                  * The group ``axes``
        attribute will name the                   *dimension scale* associated with the
        plottable data.

        If available, the standard deviations of the data are to be                 stored
        in a data set of the same rank and dimensions, with the name ``errors``.

        * For each data dimension, there should be a one-dimensional array
        of the same length.                 * These one-dimensional arrays are the
        *dimension scales* of the                   data,  *i.e*. the values of the
        independent variables at which the data                   is measured, such as
        scattering angle or energy transfer.                                  .. index::
        link                 .. index:: axes (attribute)
        The preferred method to associate each data dimension with                 its
        respective dimension scale is to specify the field name                 of each
        dimension scale in the group ``axes`` attribute as a string list.
        Here is an example for a 2-D data set *data* plotted                  against
        *time*, and *pressure*.  (An additional *temperature* data set                  is
        provided and could be selected as an alternate for the *pressure* axis.)::

        data_2d:NXdata                     @signal="data"
        @axes=["time", "pressure"]                     @pressure_indices=1
        @temperature_indices=1                     @time_indices=0
        data: float[1000,20]                     pressure: float[20]
        temperature: float[20]                     time: float[1000]

        .. rubric:: Old methods to identify the plottable data
        There are two older methods of associating                  each data dimension to
        its respective dimension scale.                 Both are now out of date and
        should not be used when writing new data files.                 However, client
        software should expect to see data files                 written with any of these
        methods.                                    * One method uses the ``axes``
        attribute to specify the names of each *dimension scale*.
        * The oldest method uses the ``axis`` attribute on each
        *dimension scale* to identify                     with an integer the axis whose
        value is the number of the dimension.

        .. index: !plot; axis label                    plot, axis units
        units                    dimension scale

        Each axis of the plot may be labeled with information from the
        dimension scale for that axis.  The optional ``@long_name`` attribute
        is provided as the axis label default.  If ``@long_name`` is not
        defined, then use the name of the dimension scale.  A ``@units`` attribute,
        if available, may be added to the axis label for further description.
        See the section :ref:`Design-Units` for more information.

        .. index: !plot; axis title

        The optional ``title`` field, if available, provides a suggested
        title for the plot.  If no ``title`` field is found in the :ref:`NXdata`
        group, look for a ``title`` field in the parent :ref:`NXentry` group,
        with a fallback to displaying the path to the :ref:`NXdata` group.

        NeXus is about how to find and annotate the data to be plotted
        but not to describe how the data is to be plotted.
        (https://www.nexusformat.org/NIAC2018Minutes.html#nxdata-plottype--attribute)
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_VARIABLE = NX_NUMBER()
        self.nxp_VARIABLE.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='VARIABLE',
                )
        self.nxp_VARIABLE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_VARIABLE.nxp_nameType= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='any',
                )
        self.nxp_VARIABLE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Dimension scale defining an axis of the data.
                Client is responsible for defining the dimensions of the data.
                The name of this field may be changed to fit the circumstances.
                Standard NeXus client tools will use the attributes to determine
                how to use this field.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-field',
                )
        self.nxp_VARIABLE.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_VARIABLE.nxp_long_name = NX_CHAR()
        self.nxp_VARIABLE.nxp_long_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='long_name',
                )
        self.nxp_VARIABLE.nxp_long_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Axis label''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-attribute',
                )
        self.nxp_VARIABLE.nxp_long_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_VARIABLE.nxp_distribution = NX_BOOLEAN()
        self.nxp_VARIABLE.nxp_distribution.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distribution',
                )
        self.nxp_VARIABLE.nxp_distribution.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_BOOLEAN',
                )
        self.nxp_VARIABLE.nxp_distribution.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                ``0|false``: single value,                                  ``1|true``:
                multiple values''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-attribute',
                )
        self.nxp_VARIABLE.nxp_distribution.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_VARIABLE.nxp_first_good = NX_INT()
        self.nxp_VARIABLE.nxp_first_good.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='first_good',
                )
        self.nxp_VARIABLE.nxp_first_good.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_VARIABLE.nxp_first_good.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Index of first good value''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-attribute',
                )
        self.nxp_VARIABLE.nxp_first_good.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_VARIABLE.nxp_last_good = NX_INT()
        self.nxp_VARIABLE.nxp_last_good.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='last_good',
                )
        self.nxp_VARIABLE.nxp_last_good.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_VARIABLE.nxp_last_good.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Index of last good value''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-attribute',
                )
        self.nxp_VARIABLE.nxp_last_good.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_VARIABLE.nxp_axis = NX_POSINT()
        self.nxp_VARIABLE.nxp_axis.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='axis',
                )
        self.nxp_VARIABLE.nxp_axis.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_POSINT',
                )
        self.nxp_VARIABLE.nxp_axis.nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='Use the group ``axes`` attribute   (NIAC2014)',
                )
        self.nxp_VARIABLE.nxp_axis.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Index (positive integer) identifying this specific set of numbers.
                N.B. The ``axis`` attribute is the old way of designating a link.
                Do not use the ``axes`` attribute with the ``axis`` attribute.
                The ``axes`` *group* attribute is now preferred.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-variable-attribute',
                )
        self.nxp_VARIABLE.nxp_axis.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_VARIABLE.nxp_axis.nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_VARIABLE_errors = NX_NUMBER()
        self.nxp_VARIABLE_errors.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='VARIABLE_errors',
                )
        self.nxp_VARIABLE_errors.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_VARIABLE_errors.nxp_nameType= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='any',
                )
        self.nxp_VARIABLE_errors.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                "Errors" (actually *uncertainties*) associated with axis ``VARIABLE``.
                Client is responsible for defining the dimensions of the data.
                The name of this field may be changed to fit the circumstances
                but is matched with the *VARIABLE* field with ``_errors`` appended.
                This pattern of using ``VARIABLE_errors`` can be used
                throughout a NeXus data file to associate uncertainties
                with a dataset named ``VARIABLE``.  This pattern also
                applies to other relationships such as ``VARIABLE_resolutions``
                to connect additional data with a certain dataset.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-field',
                )
        self.nxp_VARIABLE_errors.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_DATA = NX_NUMBER()
        self.nxp_DATA.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='DATA',
                )
        self.nxp_DATA.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_DATA.nxp_nameType= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='any',
                )
        self.nxp_DATA.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                                          This field
                contains the data values to be used as the                          NeXus
                *plottable data*.                         Client is responsible for
                defining the dimensions of the data.                         The name of
                this field may be changed to fit the circumstances.
                Standard NeXus client tools will use the attributes to determine
                how to use this field.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-field',
                )
        self.nxp_DATA.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_DATA.nxp_signal = NX_POSINT()
        self.nxp_DATA.nxp_signal.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='signal',
                )
        self.nxp_DATA.nxp_signal.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_POSINT',
                )
        self.nxp_DATA.nxp_signal.nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='Use the group ``signal`` attribute   (NIAC2014)',
                )
        self.nxp_DATA.nxp_signal.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                                          Plottable
                (independent) axis, indicate index number.
                Only one field in a :ref:`NXdata` group may have the
                ``signal=1`` attribute.                                 Do not use the
                ``signal`` attribute with the ``axis`` attribute.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-data-attribute',
                )
        self.nxp_DATA.nxp_signal.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_DATA.nxp_signal.nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_DATA.nxp_axes = NX_CHAR()
        self.nxp_DATA.nxp_axes.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='axes',
                )
        self.nxp_DATA.nxp_axes.nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='Use the group ``axes`` attribute   (NIAC2014)',
                )
        self.nxp_DATA.nxp_axes.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Defines the names of the dimension scales
                (independent axes) for this data set                                 as a
                colon-delimited array.                                 NOTE: The ``axes``
                attribute is the preferred                                 method of
                designating a link.                                 Do not use the
                ``axes`` attribute with the ``axis`` attribute.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-data-attribute',
                )
        self.nxp_DATA.nxp_axes.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_DATA.nxp_axes.nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_DATA.nxp_long_name = NX_CHAR()
        self.nxp_DATA.nxp_long_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='long_name',
                )
        self.nxp_DATA.nxp_long_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                data label''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-data-attribute',
                )
        self.nxp_DATA.nxp_long_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_errors = NX_NUMBER()
        self.nxp_errors.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='errors',
                )
        self.nxp_errors.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_errors.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Standard deviations of data values -                          the data
                array is identified by the group attribute ``signal``.
                The ``errors`` array must have the same dimensions as ``data``.
                Client is responsible for defining the dimensions of the data.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-field',
                )
        self.nxp_errors.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_scaling_factor = NX_FLOAT()
        self.nxp_scaling_factor.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='scaling_factor',
                )
        self.nxp_scaling_factor.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_scaling_factor.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The elements in data are usually float values really. For
                efficiency reasons these are usually stored as integers
                after scaling with a scale factor. This value is the scale
                factor. It is required to get the actual physical value,
                when necessary.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-field',
                )
        self.nxp_scaling_factor.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_offset = NX_FLOAT()
        self.nxp_offset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='offset',
                )
        self.nxp_offset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_offset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                An optional offset to apply to the values in data.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-field',
                )
        self.nxp_offset.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_title = NX_CHAR()
        self.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Title for the plot.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-field',
                )
        self.nxp_title.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_x = NX_FLOAT()
        self.nxp_x.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x',
                )
        self.nxp_x.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_x.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_x.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is an array holding the values to use for the x-axis of
                data.  The units must be appropriate for the measurement.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-field',
                )
        self.nxp_x.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_y = NX_FLOAT()
        self.nxp_y.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='y',
                )
        self.nxp_y.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_y.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_y.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is an array holding the values to use for the y-axis of
                data.  The units must be appropriate for the measurement.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-field',
                )
        self.nxp_y.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_z = NX_FLOAT()
        self.nxp_z.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='z',
                )
        self.nxp_z.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_z.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_z.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is an array holding the values to use for the z-axis of
                data.  The units must be appropriate for the measurement.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-field',
                )
        self.nxp_z.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_auxiliary_signals = NX_CHAR()
        self.nxp_auxiliary_signals.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='auxiliary_signals',
                )
        self.nxp_auxiliary_signals.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                                                  Array
                of strings holding the names of additional signals to
                be plotted with the default signal (specified by the
                ``signal`` attribute).  Each auxiliary signal needs to be of
                the same shape as the default signal.
                ..  NIAC2018:
                https://www.nexusformat.org/NIAC2018Minutes.html''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-attribute',
                )
        self.nxp_auxiliary_signals.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_signal = NX_CHAR()
        self.nxp_signal.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='signal',
                )
        self.nxp_signal.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting
                Declares which dataset is the default.                          The value
                is the name of the dataset to be plotted.                         A field
                of this name *must* exist (either as dataset                          or
                as a link to a dataset).
                It is recommended (as of NIAC2014) to use this attribute
                rather than adding a signal attribute to the dataset.
                See https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-attribute',
                )
        self.nxp_signal.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_axes = NX_CHAR()
        self.nxp_axes.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='axes',
                )
        self.nxp_axes.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting
                String array that defines the independent data fields used in
                the default plot for all of the dimensions of the *signal* field
                (the *signal* field is the field in this group that is named by
                the ``signal`` attribute of this group).                          One
                entry is provided for every dimension in the *signal* field.
                The field(s) named as values (known as "axes") of this attribute
                *must* exist. An axis slice is specified using a field named
                ``AXISNAME_indices`` as described below (where the text shown here
                as ``AXISNAME`` is to be replaced by the actual field name).
                When no default axis is available for a particular dimension
                of the plottable data, use a "." in that position.
                Such as::
                @axes=["time", ".", "."]
                Since there are three items in the list, the the *signal* field
                must must be a three-dimensional array (rank=3).  The first dimension
                is described by the values of a one-dimensional array named ``time``
                while the other two dimensions have no fields to be used as dimension
                scales.                                                  See examples
                provided on the NeXus wiki:
                https://www.nexusformat.org/2014_axes_and_uncertainties.html
                If there are no axes at all (such as with a stack of images),
                the axes attribute can be omitted.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-attribute',
                )
        self.nxp_axes.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_AXISNAME_indices = NX_CHAR()
        self.nxp_AXISNAME_indices.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='AXISNAME_indices',
                )
        self.nxp_AXISNAME_indices.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Each ``AXISNAME_indices`` attribute indicates the dependency
                relationship of the ``AXISNAME`` field (where ``AXISNAME``
                is the name of a field that exists in this ``NXdata`` group)
                with one or more dimensions of the plottable data.
                Integer array that defines the indices of the *signal* field
                (that field will be a multidimensional array)
                which need to be used in the *AXISNAME* dataset in
                order to reference the corresponding axis value.
                The first index of an array is ``0`` (zero).
                Here, *AXISNAME* is to be replaced by the name of each
                field described in the ``axes`` attribute.                           An
                example with 2-D data, :math:`d(t,P)`, will illustrate::
                data_2d:NXdata                                 @signal="data"
                @axes=["time", "pressure"]                                 @time_indices=0
                @pressure_indices=1                                 data: float[1000,20]
                time: float[1000]                                 pressure: float[20]
                This attribute is to be provided in all situations.
                However, if the indices attributes are missing
                (such as for data files written before this specification),
                file readers are encouraged to make their best efforts
                to plot the data.                                Thus the implementation
                of the                          ``AXISNAME_indices`` attribute is based on
                the model of                          "strict writer, liberal reader".
                .. note::  Attributes potentially containing multiple values
                (axes and _indices) are to be written as string or integer arrays,
                to avoid string parsing in reading applications.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdata.html#nxdata-attribute',
                )
        self.nxp_AXISNAME_indices.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXpdb(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXpdb',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_ignoreExtraGroups = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='true',)

        self.nxp_ignoreExtraFields = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='true',)

        self.nxp_ignoreExtraAttributes = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='true',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    A NeXus transliteration of a PDB file, to be validated only as a PDB
        rather than in NeXus.

        Use :ref:`NXpdb` to incorporate the information in an arbitrary
        PDB into a NeXus file.

        The main suggestion is to use this as a container                 class for a PDB
        entry to describe a sample in NXsample,                 but it may be more
        appropriate to place this higher in the                 hierarchy, say in NXentry.

        The structure has to follow the structure of a PDB                 with each PDB
        data block mapped to a NeXus group of class NXpdb,                 using a
        lowercase version of the data block name as the name                 of the NeXus
        group, each PDB category in that data block                 mapped to a NeXus
        group of class NXpdb and with each PDB column                 mapped to a NeXus
        field.  Each column in a looped PDB category                 should always be
        presented as a 1-dimensional array.  The columns                  in an unlooped
        PDB category should be presented as scalar values.                   If a PDB
        category specifies particular units for columns, the same                  units
        should beused for the corresponding fields.

        A PDB entry is unambigous when all information is carried as text.
        All text data should be presented as quoted strings, with the quote
        marks except for the null values "." or "?"

        For clarity in NXpdb form, numeric data may be presented using the
        numeric types specified in the mmCIF dictionary.  In that case,                 if
        a PDB null value, "." or "?", is contained in a numeric column, the
        IEEE nan should be used for "?" and the IEEE inf should be used for ".".

        An arbitrary DDL2 CIF file can be represented in NeXus using NXpdb.
        However, if save frames are required, an NXpdb_class  attribute with the
        value "CBF_cbfsf" is required for each NeXus group representing a save
        frame.  NXpdb attributes are not required for other CIF components,
        but may be used to provide internal documentation.

        The nesting of NXpdb groups and datasets that correspond to a CIF with
        two categories and one saveframe, including the NXpdb_class attribues is::

        (datablock1):NXpdb                            @NXpdb_class:CBF_cbfdb
        (category1):NXpdb                              @NXpdb_class:CBF_cbfcat
        (column_name1):[...]                               (column_name2):[...]
        (column_name3):[...]                               ...
        (category2):NXpdb                               @NXpdb_class:CBF_cbfcat
        (column_name4):[...]                               (column_name5):[...]
        (column_name6):[...]                               ...
        (saveframe1):NXpdb                               @NXpdb_class:CBF_cbfsf
        (category3):NXpdb                                 @NXpdb_class:CBF_cbfcat
        (column_name7):[...]                                 (column_name8):[...]
        (column_name9):[...]                                  ...
        ...                            ...

        For example, a PDB entry that begins::

        data_1YVA                         #                          _entry.id   1YVA
        #                         _audit_conform.dict_name       mmcif_pdbx.dic
        _audit_conform.dict_version    5.279
        _audit_conform.dict_location
        http://mmcif.pdb.org/dictionaries/ascii/mmcif_pdbx.dic                         #
        loop_                         _database_2.database_id
        _database_2.database_code                         PDB   1YVA
        RCSB  RCSB031959                         WWPDB D_1000031959
        #

        would produce::                                  sample:NXsample
        1yva:NXpdb                              entry:NXpdb
        id:"1YVA"                              audit_conform:NXpdb
        dict_name:"mmcif_pdbx.dic"                                  dict_version:"5.279"
        dict_location:"http://mmcif.pdb.org/dictionaries/ascii/mmcif_pdbx.dic"
        database_2:NXpdb
        database_id:["PDB","RCSB","WWPDB"]
        database_code:["1YVA","RCSB031959","D_1000031959"]

        another example is the following excerpt from pdb entry 9ins, giving the sequences
        of the two chains::

        loop_                         _entity_poly.entity_id
        _entity_poly.nstd_linkage                         _entity_poly.nstd_monomer
        _entity_poly.pdbx_seq_one_letter_code
        _entity_poly.pdbx_seq_one_letter_code_can
        _entity_poly.type                         1 no no GIVEQCCTSICSLYQLENYCN
        GIVEQCCTSICSLYQLENYCN polypeptide(L)                         2 no no
        FVNQHLCGSHLVEALYLVCGERGFFYTPKA FVNQHLCGSHLVEALYLVCGERGFFYTPKA
        polypeptide(L)

        which converts to::

        entity_poly:NXpdb                           @NXpdb_class:CBF_cbfcat
        entity_id:["1", "2"]                           nstd_linkage:["no", "no"]
        nstd_monomer:["no", "no"]                           pdbx_seq_one_letter_code:["GIV
        EQCCTSICSLYQLENYCN","FVNQHLCGSHLVEALYLVCGERGFFYTPKA"]                           pd
        bx_seq_one_letter_code_can:["GIVEQCCTSICSLYQLENYCN","FVNQHLCGSHLVEALYLVCGERGFFYTPK
        A"]                           type:["polypeptide(L)", "polypeptide(L)"]
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXpdb.html#nxpdb',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)


class NXtransformations(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXtransformations',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_ignoreExtraGroups = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='true',)

        self.nxp_ignoreExtraFields = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='true',)

        self.nxp_ignoreExtraAttributes = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='true',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    Collection of axis-based translations and rotations to describe a geometry.
        May also contain axes that do not move and therefore do not have a transformation
        type specified, but are useful in understanding coordinate frames within which
        transformations are done, or in documenting important directions, such as the
        direction of gravity.

        A nested sequence of transformations lists the translation and rotation steps
        needed to describe the position and orientation of any movable or fixed device.

        There will be one or more transformations (axes) defined by one or more fields
        for each transformation.  The all-caps name ``AXISNAME`` designates the
        particular axis generating a transformation (e.g. a rotation axis or a translation
        axis or a general axis).   The attribute ``units="NX_TRANSFORMATION"`` designates
        the                 units will be appropriate to the ``transformation_type``
        attribute:

        * ``NX_LENGTH`` for ``translation``                 * ``NX_ANGLE`` for
        ``rotation``                 * ``NX_UNITLESS`` for axes for which no
        transformation type is specified

        This class will usually contain all axes of a sample stage or goniometer or
        a detector.  The NeXus default McSTAS coordinate frame is assumed, but additional
        useful coordinate axes may be defined by using axes for which no transformation
        type has been specified.

        The entry point (``depends_on``) will be outside of this class and point to a
        field in here. Following the chain may also require following ``depends_on``
        links to transformations outside, for example to a common base table.  If
        a relative path is given, it is relative to the group enclosing the ``depends_on``
        specification.

        For a chain of three transformations, where :math:`T_1` depends on :math:`T_2`
        and that in turn depends on :math:`T_3`, the final transformation :math:`T_f` is

        .. math:: T_f = T_3 T_2 T_1

        In explicit terms, the transformations are a subset of affine transformations
        expressed as 4x4 matrices that act on homogeneous coordinates,
        :math:`w=(x,y,z,1)^T`.

        For rotation and translation,

        .. math:: T_r &= \\begin{pmatrix} R & o \\\\ 0_3 & 1 \\end{pmatrix} \\\\ T_t &=
        \\begin{pmatrix} I_3  & t + o \\\\ 0_3 & 1 \\end{pmatrix}

        where :math:`R` is the usual 3x3 rotation matrix, :math:`o` is an offset vector,
        :math:`0_3` is a row of 3 zeros, :math:`I_3` is the 3x3 identity matrix and
        :math:`t` is the translation vector.

        :math:`o` is given by the ``offset`` attribute, :math:`t` is given by the
        ``vector``                 attribute multiplied by the field value, and :math:`R`
        is defined as a rotation                 about an axis in the direction of
        ``vector``, of angle of the field value.

        NOTE                                  One possible use of ``NXtransformations`` is
        to define the motors and                 transformations for a diffractometer
        (goniometer).  Such use is mentioned                 in the ``NXinstrument`` base
        class.  Use one ``NXtransformations`` group                  for each
        diffractometer and name the group appropriate to the device.
        Collecting the motors of a sample table or xyz-stage in an NXtransformation
        group is equally possible.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_AXISNAME = NX_NUMBER()
        self.nxp_AXISNAME.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='AXISNAME',
                )
        self.nxp_AXISNAME.nxp_nameType= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='any',
                )
        self.nxp_AXISNAME.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TRANSFORMATION',
                )
        self.nxp_AXISNAME.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_AXISNAME.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unbounded',
                )
        self.nxp_AXISNAME.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Units need to be appropriate for translation or rotation

                The name of this field is not forced.  The user is free to use any name
                that does not cause confusion.  When using more than one ``AXISNAME``
                field,                         make sure that each field name is unique in
                the same group, as required                         by HDF5.

                The values given should be the start points of exposures for the
                corresponding                         frames.  The end points should be
                given in ``AXISNAME_end``.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-field',
                )
        self.nxp_AXISNAME.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_AXISNAME.nxp_transformation_type = NX_CHAR()
        self.nxp_AXISNAME.nxp_transformation_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='transformation_type',
                )
        self.nxp_AXISNAME.nxp_transformation_type.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_AXISNAME.nxp_transformation_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The transformation_type may be ``translation``, in which case the
                values are linear displacements along the axis, ``rotation``,
                in which case the values are angular rotations around the axis.

                If this attribute is omitted, this is an axis for which there
                is no motion to be specifies, such as the direction of gravity,
                or the direction to the source, or a basis vector of a
                coordinate frame.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-attribute',
                )
        self.nxp_AXISNAME.nxp_transformation_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_AXISNAME.nxp_transformation_type.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='translation,rotation',
                )


        self.nxp_AXISNAME.nxp_vector = NX_NUMBER()
        self.nxp_AXISNAME.nxp_vector.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='vector',
                )
        self.nxp_AXISNAME.nxp_vector.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='false',
                )
        self.nxp_AXISNAME.nxp_vector.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_AXISNAME.nxp_vector.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Three values that define the axis for this transformation.
                The axis should be normalized to unit length, making it
                dimensionless.  For ``rotation`` axes, the direction should be
                chosen for a right-handed rotation with increasing angle.
                For ``translation`` axes the direction should be chosen for
                increasing displacement. For general axes, an appropriate direction
                should be chosen.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-attribute',
                )
        self.nxp_AXISNAME.nxp_vector.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_AXISNAME.nxp_offset = NX_NUMBER()
        self.nxp_AXISNAME.nxp_offset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='offset',
                )
        self.nxp_AXISNAME.nxp_offset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_AXISNAME.nxp_offset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                A fixed offset applied before the transformation (three vector
                components).                                 This is not intended to be a
                substitute for a fixed ``translation`` axis but, for example,
                as the mechanical offset from mounting the axis to its dependency.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-attribute',
                )
        self.nxp_AXISNAME.nxp_offset.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_AXISNAME.nxp_offset_units = NX_CHAR()
        self.nxp_AXISNAME.nxp_offset_units.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='offset_units',
                )
        self.nxp_AXISNAME.nxp_offset_units.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_AXISNAME.nxp_offset_units.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Units of the offset.  Values should be consistent with NX_LENGTH.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-attribute',
                )
        self.nxp_AXISNAME.nxp_offset_units.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_AXISNAME.nxp_depends_on = NX_CHAR()
        self.nxp_AXISNAME.nxp_depends_on.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='depends_on',
                )
        self.nxp_AXISNAME.nxp_depends_on.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_AXISNAME.nxp_depends_on.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Points to the path to a field defining the axis on which this
                depends or the string ".".''',
                default='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-axisname-attribute',
                )
        self.nxp_AXISNAME.nxp_depends_on.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_AXISNAME_end = NX_NUMBER()
        self.nxp_AXISNAME_end.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='AXISNAME_end',
                )
        self.nxp_AXISNAME_end.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TRANSFORMATION',
                )
        self.nxp_AXISNAME_end.nxp_nameType= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='any',
                )
        self.nxp_AXISNAME_end.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_AXISNAME_end.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_AXISNAME_end.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                ``AXISNAME_end`` is a placeholder for a name constructed from the actual
                name of an axis to which ``_end`` has been appended.

                The values in this field are the end points of the motions that start
                at the corresponding positions given in the ``AXISNAME`` field.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-field',
                )
        self.nxp_AXISNAME_end.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_AXISNAME_increment_set = NX_NUMBER()
        self.nxp_AXISNAME_increment_set.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='AXISNAME_increment_set',
                )
        self.nxp_AXISNAME_increment_set.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TRANSFORMATION',
                )
        self.nxp_AXISNAME_increment_set.nxp_nameType= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='any',
                )
        self.nxp_AXISNAME_increment_set.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_AXISNAME_increment_set.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_AXISNAME_increment_set.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                ``AXISNAME_increment_set`` is a placeholder for a name constructed from
                the actual                         name of an axis to which
                ``_increment_set`` has been appended.

                The value of this optional field is the intended average range through
                which                         the corresponding axis moves during the
                exposure of a frame.  Ideally, the                         value of this
                field added to each value of ``AXISNAME`` would agree with the
                corresponding values of ``AXISNAME_end``, but there is a possibility of
                significant                         differences.  Use of ``AXISNAME_end``
                is recommended.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-field',
                )
        self.nxp_AXISNAME_increment_set.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXtransformations.html#nxtransformations-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXuser(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXuser',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    Contact information for a user.                                    The format
        allows more                  than one user with the same affiliation and contact
        information,                  but a second :ref:`NXuser` group should be used if
        they have different                  affiliations, etc.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_name = NX_CHAR()
        self.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Name of user responsible for this entry''',
                default='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-field',
                )
        self.nxp_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_role = NX_CHAR()
        self.nxp_role.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='role',
                )
        self.nxp_role.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Role of user responsible for this entry.                         Suggested
                roles are "local_contact",
                "principal_investigator", and "proposer"''',
                default='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-field',
                )
        self.nxp_role.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_affiliation = NX_CHAR()
        self.nxp_affiliation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='affiliation',
                )
        self.nxp_affiliation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Affiliation of user''',
                default='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-field',
                )
        self.nxp_affiliation.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_address = NX_CHAR()
        self.nxp_address.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='address',
                )
        self.nxp_address.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Address of user''',
                default='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-field',
                )
        self.nxp_address.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_telephone_number = NX_CHAR()
        self.nxp_telephone_number.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='telephone_number',
                )
        self.nxp_telephone_number.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Telephone number of user''',
                default='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-field',
                )
        self.nxp_telephone_number.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_fax_number = NX_CHAR()
        self.nxp_fax_number.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='fax_number',
                )
        self.nxp_fax_number.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Fax number of user''',
                default='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-field',
                )
        self.nxp_fax_number.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_email = NX_CHAR()
        self.nxp_email.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='email',
                )
        self.nxp_email.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Email of user''',
                default='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-field',
                )
        self.nxp_email.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_facility_user_id = NX_CHAR()
        self.nxp_facility_user_id.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='facility_user_id',
                )
        self.nxp_facility_user_id.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                facility based unique identifier for this person
                e.g. their identification code on the facility
                address/contact database''',
                default='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-field',
                )
        self.nxp_facility_user_id.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ORCID = NX_CHAR()
        self.nxp_ORCID.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='ORCID',
                )
        self.nxp_ORCID.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                an author code, Open Researcher and Contributor ID,
                defined by https://orcid.org and expressed as a URI''',
                default='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-field',
                )
        self.nxp_ORCID.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXuser.html#nxuser-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXnote(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXnote',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    Any additional freeform information not covered by the other base classes.
        This class can be used to store additional information in a                  NeXus
        file e.g. pictures, movies, audio, additional text logs
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_author = NX_CHAR()
        self.nxp_author.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='author',
                )
        self.nxp_author.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Author or creator of note''',
                default='https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-field',
                )
        self.nxp_author.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_date = NX_DATE_TIME()
        self.nxp_date.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='date',
                )
        self.nxp_date.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_date.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Date note created/added''',
                default='https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-field',
                )
        self.nxp_date.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_type = NX_CHAR()
        self.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Mime content type of note data field e.g. image/jpeg, text/plain,
                text/html''',
                default='https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-field',
                )
        self.nxp_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_file_name = NX_CHAR()
        self.nxp_file_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='file_name',
                )
        self.nxp_file_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Name of original file name if note was read from an external source''',
                default='https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-field',
                )
        self.nxp_file_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_description = NX_CHAR()
        self.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Title of an image or other details of the note''',
                default='https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-field',
                )
        self.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_sequence_index = NX_POSINT()
        self.nxp_sequence_index.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sequence_index',
                )
        self.nxp_sequence_index.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_POSINT',
                )
        self.nxp_sequence_index.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Sequence index of note, for placing a sequence of              multiple
                **NXnote** groups in an order.  Starts with 1.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-field',
                )
        self.nxp_sequence_index.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_data = NX_BINARY()
        self.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_BINARY',
                )
        self.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Binary note data - if text, line terminator is [CR][LF].''',
                default='https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-field',
                )
        self.nxp_data.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXnote.html#nxnote-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXpinhole(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXpinhole',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    A simple pinhole.                                  For more complex geometries,
        :ref:`NXaperture` should be used.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXpinhole.html#nxpinhole',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_depends_on = NX_CHAR()
        self.nxp_depends_on.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='depends_on',
                )
        self.nxp_depends_on.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_depends_on.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Points to the path of the last element in the geometry chain that places
                this object in space.                          When followed through that
                chain is supposed to end at an element depending
                on "." i.e. the origin of the coordinate system.
                If desired the location of the slit can also be described relative to
                an NXbeam, which will allow a simple description of a non-centred pinhole.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXpinhole.html#nxpinhole-field',
                )
        self.nxp_depends_on.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_diameter = NX_NUMBER()
        self.nxp_diameter.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='diameter',
                )
        self.nxp_diameter.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_diameter.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_diameter.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Size of the circular hole defining the transmitted beam size.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXpinhole.html#nxpinhole-field',
                )
        self.nxp_diameter.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXpinhole.html#nxpinhole-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXdetector_group(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXdetector_group',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    Logical grouping of detectors. When used, describes a group of detectors.

        Each detector is represented as an NXdetector                  with its own
        detector data array.  Each detector data array                 may be further
        decomposed into array sections by use of                 NXdetector_module groups.
        Detectors can be grouped logically                 together using
        NXdetector_group. Groups can be further grouped                 hierarchically in
        a single NXdetector_group (for example, if                 there are multiple
        detectors at an endstation or multiple                  endstations at a
        facility).  Alternatively, multiple                  NXdetector_groups can be
        provided.

        The groups are defined hierarchically, with names given                 in the
        group_names field, unique identifying indices given                 in the field
        group_index, and the level in the hierarchy                 given in the
        group_parent field.  For example if an x-ray                 detector group, DET,
        consists of four detectors in a                 rectangular array::
        DTL    DTR                                  DLL    DLR
        We could have::
        group_names: ["DET", "DTL", "DTR", "DLL", "DLR"]
        group_index: [1, 2, 3, 4, 5]                         group_parent:  [-1, 1, 1, 1,
        1]
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_group_names = NX_CHAR()
        self.nxp_group_names.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='group_names',
                )
        self.nxp_group_names.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_group_names.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                An array of the names of the detectors given in NXdetector
                groups or the names of hierarchical groupings of detectors
                given as names of NXdetector_group groups or in
                NXdetector_group group_names and group_parent fields as
                having children.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group-field',
                )
        self.nxp_group_names.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_group_index = NX_INT()
        self.nxp_group_index.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='group_index',
                )
        self.nxp_group_index.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_group_index.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                An array of unique identifiers for detectors or groupings
                of detectors.                                                  Each ID is
                a unique ID for the corresponding detector or group
                named in the field group_names.  The IDs are positive integers
                starting with 1.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group-field',
                )
        self.nxp_group_index.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_group_parent = NX_INT()
        self.nxp_group_parent.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='group_parent',
                )
        self.nxp_group_parent.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_group_parent.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                An array of the hierarchical levels of the parents of detectors
                or groupings of detectors.
                A top-level grouping has parent level -1.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group-field',
                )
        self.nxp_group_parent.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_group_type = NX_INT()
        self.nxp_group_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='group_type',
                )
        self.nxp_group_type.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_group_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Code number for group type, e.g. bank=1, tube=2 etc.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group-field',
                )
        self.nxp_group_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector_group.html#nxdetector-group-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXcite(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXcite',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    A literature reference                                  Definition to include
        references for example for detectors,                 manuals, instruments,
        acquisition or analysis software used.                                  The idea
        would be to include this in the relevant NeXus object:
        :ref:`NXdetector` for detectors, :ref:`NXinstrument` for instruments, etc.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_description = NX_CHAR()
        self.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_description.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This should describe the reason for including this reference.
                For example: The dataset in this group was normalised using the method
                which is described in detail in this reference.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-field',
                )
        self.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_url = NX_CHAR()
        self.nxp_url.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='url',
                )
        self.nxp_url.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_url.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                URL referencing the document or data.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-field',
                )
        self.nxp_url.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_doi = NX_CHAR()
        self.nxp_doi.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='doi',
                )
        self.nxp_doi.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_doi.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                DOI referencing the document or data.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-field',
                )
        self.nxp_doi.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_endnote = NX_CHAR()
        self.nxp_endnote.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='endnote',
                )
        self.nxp_endnote.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_endnote.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Bibliographic reference data in EndNote format.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-field',
                )
        self.nxp_endnote.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_bibtex = NX_CHAR()
        self.nxp_bibtex.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='bibtex',
                )
        self.nxp_bibtex.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_bibtex.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Bibliographic reference data in BibTeX format.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-field',
                )
        self.nxp_bibtex.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcite.html#nxcite-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXcylindrical_geometry(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXcylindrical_geometry',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    Geometry description for cylindrical shapes.     This class can be used in place
        of ``NXoff_geometry`` when an exact     representation for cylinders is preferred.
        For example, for Helium-tube, neutron detectors.     It can be used to describe
        the shape of any beamline component, including detectors.     In the case of
        detectors it can be used to define the shape of a single pixel, or,     if the
        pixel shapes are non-uniform, to describe the shape of the whole detector.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcylindrical_geometry.html#nxcylindrical-geometry',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_vertices = NX_NUMBER()
        self.nxp_vertices.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='vertices',
                )
        self.nxp_vertices.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_vertices.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_vertices.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                List of x,y,z coordinates for vertices.       The origin of the
                coordinates is the position of the parent component, for       example the
                NXdetector which the geometry describes.       If the shape describes a
                single pixel for a detector with uniform pixel shape       then the origin
                is the position of each pixel as described by the
                ``x/y/z_pixel_offset`` datasets in ``NXdetector``.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcylindrical_geometry.html#nxcylindrical-geometry-field',
                )
        self.nxp_vertices.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_cylinders = NX_INT()
        self.nxp_cylinders.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='cylinders',
                )
        self.nxp_cylinders.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_cylinders.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                List of indices of vertices in the ``vertices`` dataset to form each
                cylinder.       Each cylinder is described by three vertices A, B, C.
                First vertex A lies on the cylinder axis and circular face, second point B
                on edge of the same face as A, and third point C at the other face and on
                axis.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcylindrical_geometry.html#nxcylindrical-geometry-field',
                )
        self.nxp_cylinders.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_detector_number = NX_INT()
        self.nxp_detector_number.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='detector_number',
                )
        self.nxp_detector_number.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_detector_number.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Maps cylinders in ``cylinder``, by index, with a detector id.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcylindrical_geometry.html#nxcylindrical-geometry-field',
                )
        self.nxp_detector_number.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcylindrical_geometry.html#nxcylindrical-geometry-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXgrating(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXgrating',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            A diffraction grating, as could be used in a soft X-ray monochromator
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_shape = NXshape()
        self.nxp_shape.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXshape',
                )
        self.nxp_shape.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='shape',
                )
        self.nxp_shape.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                A NXshape group describing the shape of the mirror''',
                default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-group',
                )
        self.nxp_shape.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_figure_data = NXdata()
        self.nxp_figure_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='figure_data',
                )
        self.nxp_figure_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_figure_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Numerical description of the surface figure of the mirror.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-group',
                )
        self.nxp_figure_data.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_TRANSFORMATIONS = NXtransformations()
        self.nxp_TRANSFORMATIONS.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXtransformations',
                )
        self.nxp_TRANSFORMATIONS.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                "Engineering" position of the grating''',
                default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-group',
                )
        self.nxp_TRANSFORMATIONS.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_angles = NX_FLOAT()
        self.nxp_angles.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='angles',
                )
        self.nxp_angles.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_angles.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_angles.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Blaze or trapezoidal angles, with the angle of the upstream facing edge
                listed first. Blazed gratings can be identified by the low value of the
                first-listed angle.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-field',
                )
        self.nxp_angles.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_period = NX_FLOAT()
        self.nxp_period.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='period',
                )
        self.nxp_period.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_period.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_period.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                List of polynomial coefficients describing the spatial separation of
                lines/grooves as a function of position along the grating, in increasing
                powers of position. Gratings which do not have variable line spacing will
                only have a single coefficient (constant).''',
                default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-field',
                )
        self.nxp_period.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_duty_cycle = NX_FLOAT()
        self.nxp_duty_cycle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='duty_cycle',
                )
        self.nxp_duty_cycle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_duty_cycle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_duty_cycle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-field',
                )
        self.nxp_duty_cycle.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_depth = NX_FLOAT()
        self.nxp_depth.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='depth',
                )
        self.nxp_depth.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_depth.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_depth.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-field',
                )
        self.nxp_depth.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_diffraction_order = NX_INT()
        self.nxp_diffraction_order.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='diffraction_order',
                )
        self.nxp_diffraction_order.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_diffraction_order.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_diffraction_order.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-field',
                )
        self.nxp_diffraction_order.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_deflection_angle = NX_FLOAT()
        self.nxp_deflection_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='deflection_angle',
                )
        self.nxp_deflection_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_deflection_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_deflection_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Angle between the incident beam and the utilised outgoing beam.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-field',
                )
        self.nxp_deflection_angle.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_interior_atmosphere = NX_CHAR()
        self.nxp_interior_atmosphere.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='interior_atmosphere',
                )
        self.nxp_interior_atmosphere.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-field',
                )
        self.nxp_interior_atmosphere.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_interior_atmosphere.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='vacuum,helium,argon',
                )


        self.nxp_substrate_material = NX_CHAR()
        self.nxp_substrate_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='substrate_material',
                )
        self.nxp_substrate_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-field',
                )
        self.nxp_substrate_material.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_substrate_density = NX_FLOAT()
        self.nxp_substrate_density.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='substrate_density',
                )
        self.nxp_substrate_density.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_substrate_density.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_MASS_DENSITY',
                )
        self.nxp_substrate_density.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-field',
                )
        self.nxp_substrate_density.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_substrate_thickness = NX_FLOAT()
        self.nxp_substrate_thickness.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='substrate_thickness',
                )
        self.nxp_substrate_thickness.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_substrate_thickness.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_substrate_thickness.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-field',
                )
        self.nxp_substrate_thickness.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_coating_material = NX_CHAR()
        self.nxp_coating_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='coating_material',
                )
        self.nxp_coating_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-field',
                )
        self.nxp_coating_material.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_substrate_roughness = NX_FLOAT()
        self.nxp_substrate_roughness.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='substrate_roughness',
                )
        self.nxp_substrate_roughness.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_substrate_roughness.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_substrate_roughness.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-field',
                )
        self.nxp_substrate_roughness.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_coating_roughness = NX_FLOAT()
        self.nxp_coating_roughness.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='coating_roughness',
                )
        self.nxp_coating_roughness.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_coating_roughness.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_coating_roughness.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-field',
                )
        self.nxp_coating_roughness.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_layer_thickness = NX_FLOAT()
        self.nxp_layer_thickness.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='layer_thickness',
                )
        self.nxp_layer_thickness.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_layer_thickness.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_layer_thickness.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                An array describing the thickness of each layer''',
                default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-field',
                )
        self.nxp_layer_thickness.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXgrating.html#nxgrating-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXxraylens(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXxraylens',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    An X-ray lens, typically at a synchrotron X-ray beam line.              Based on
        information provided by Gerd Wellenreuther (DESY).
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_cylinder_orientation = NXnote()
        self.nxp_cylinder_orientation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='cylinder_orientation',
                )
        self.nxp_cylinder_orientation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXnote',
                )
        self.nxp_cylinder_orientation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Orientation of the cylinder axis.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-group',
                )
        self.nxp_cylinder_orientation.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_lens_geometry = NX_CHAR()
        self.nxp_lens_geometry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='lens_geometry',
                )
        self.nxp_lens_geometry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_lens_geometry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Geometry of the lens''',
                default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-field',
                )
        self.nxp_lens_geometry.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_lens_geometry.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='paraboloid,spherical,elliptical,hyperbolical',
                )


        self.nxp_symmetric = NX_BOOLEAN()
        self.nxp_symmetric.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='symmetric',
                )
        self.nxp_symmetric.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_BOOLEAN',
                )
        self.nxp_symmetric.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Is the device symmetric?''',
                default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-field',
                )
        self.nxp_symmetric.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_cylindrical = NX_BOOLEAN()
        self.nxp_cylindrical.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='cylindrical',
                )
        self.nxp_cylindrical.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_BOOLEAN',
                )
        self.nxp_cylindrical.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Is the device cylindrical?''',
                default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-field',
                )
        self.nxp_cylindrical.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_focus_type = NX_CHAR()
        self.nxp_focus_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='focus_type',
                )
        self.nxp_focus_type.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_focus_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The type of focus of the lens''',
                default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-field',
                )
        self.nxp_focus_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_focus_type.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='line,point',
                )


        self.nxp_lens_thickness = NX_FLOAT()
        self.nxp_lens_thickness.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='lens_thickness',
                )
        self.nxp_lens_thickness.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_lens_thickness.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_lens_thickness.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Thickness of the lens''',
                default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-field',
                )
        self.nxp_lens_thickness.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_lens_length = NX_FLOAT()
        self.nxp_lens_length.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='lens_length',
                )
        self.nxp_lens_length.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_lens_length.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_lens_length.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Length of the lens''',
                default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-field',
                )
        self.nxp_lens_length.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_curvature = NX_FLOAT()
        self.nxp_curvature.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='curvature',
                )
        self.nxp_curvature.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_curvature.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_curvature.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Radius of the curvature as measured in the middle of the lens''',
                default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-field',
                )
        self.nxp_curvature.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_aperture = NX_FLOAT()
        self.nxp_aperture.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='aperture',
                )
        self.nxp_aperture.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_aperture.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_aperture.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Diameter of the lens.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-field',
                )
        self.nxp_aperture.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_number_of_lenses = NX_INT()
        self.nxp_number_of_lenses.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='number_of_lenses',
                )
        self.nxp_number_of_lenses.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_number_of_lenses.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Number of lenses that make up the compound lens.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-field',
                )
        self.nxp_number_of_lenses.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_lens_material = NX_CHAR()
        self.nxp_lens_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='lens_material',
                )
        self.nxp_lens_material.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_lens_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Material used to make the lens.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-field',
                )
        self.nxp_lens_material.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_gas = NX_CHAR()
        self.nxp_gas.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='gas',
                )
        self.nxp_gas.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_gas.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Gas used to fill the lens''',
                default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-field',
                )
        self.nxp_gas.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_gas_pressure = NX_FLOAT()
        self.nxp_gas_pressure.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='gas_pressure',
                )
        self.nxp_gas_pressure.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_gas_pressure.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_PRESSURE',
                )
        self.nxp_gas_pressure.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Gas pressure in the lens''',
                default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-field',
                )
        self.nxp_gas_pressure.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXxraylens.html#nxxraylens-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXfresnel_zone_plate(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXfresnel_zone_plate',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            A fresnel zone plate
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_TRANSFORMATIONS = NXtransformations()
        self.nxp_TRANSFORMATIONS.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXtransformations',
                )
        self.nxp_TRANSFORMATIONS.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                "Engineering" position of the fresnel zone plate''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-group',
                )
        self.nxp_TRANSFORMATIONS.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_focus_parameters = NX_FLOAT()
        self.nxp_focus_parameters.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='focus_parameters',
                )
        self.nxp_focus_parameters.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_focus_parameters.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                list of polynomial coefficients describing the focal length of the zone
                plate, in increasing powers of photon energy,         that describes the
                focal length of the zone plate (in microns) at an X-ray photon energy (in
                electron volts).''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-field',
                )
        self.nxp_focus_parameters.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_outer_diameter = NX_FLOAT()
        self.nxp_outer_diameter.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='outer_diameter',
                )
        self.nxp_outer_diameter.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_outer_diameter.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_outer_diameter.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-field',
                )
        self.nxp_outer_diameter.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_outermost_zone_width = NX_FLOAT()
        self.nxp_outermost_zone_width.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='outermost_zone_width',
                )
        self.nxp_outermost_zone_width.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_outermost_zone_width.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_outermost_zone_width.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-field',
                )
        self.nxp_outermost_zone_width.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_central_stop_diameter = NX_FLOAT()
        self.nxp_central_stop_diameter.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='central_stop_diameter',
                )
        self.nxp_central_stop_diameter.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_central_stop_diameter.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_central_stop_diameter.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-field',
                )
        self.nxp_central_stop_diameter.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_fabrication = NX_CHAR()
        self.nxp_fabrication.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='fabrication',
                )
        self.nxp_fabrication.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                how the zone plate was manufactured''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-field',
                )
        self.nxp_fabrication.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_fabrication.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='etched,plated,zone doubled,other',
                )


        self.nxp_zone_height = NX_FLOAT()
        self.nxp_zone_height.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='zone_height',
                )
        self.nxp_zone_height.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_zone_height.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_zone_height.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-field',
                )
        self.nxp_zone_height.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_zone_material = NX_CHAR()
        self.nxp_zone_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='zone_material',
                )
        self.nxp_zone_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Material of the zones themselves''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-field',
                )
        self.nxp_zone_material.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_zone_support_material = NX_CHAR()
        self.nxp_zone_support_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='zone_support_material',
                )
        self.nxp_zone_support_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Material present between the zones. This is usually only present for the
                "zone doubled" fabrication process''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-field',
                )
        self.nxp_zone_support_material.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_central_stop_material = NX_CHAR()
        self.nxp_central_stop_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='central_stop_material',
                )
        self.nxp_central_stop_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-field',
                )
        self.nxp_central_stop_material.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_central_stop_thickness = NX_FLOAT()
        self.nxp_central_stop_thickness.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='central_stop_thickness',
                )
        self.nxp_central_stop_thickness.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_central_stop_thickness.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_central_stop_thickness.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-field',
                )
        self.nxp_central_stop_thickness.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_mask_thickness = NX_FLOAT()
        self.nxp_mask_thickness.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='mask_thickness',
                )
        self.nxp_mask_thickness.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_mask_thickness.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_mask_thickness.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-field',
                )
        self.nxp_mask_thickness.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_mask_material = NX_CHAR()
        self.nxp_mask_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='mask_material',
                )
        self.nxp_mask_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                If no mask is present, set mask_thickness to 0 and omit the mask_material
                field''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-field',
                )
        self.nxp_mask_material.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_support_membrane_material = NX_CHAR()
        self.nxp_support_membrane_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='support_membrane_material',
                )
        self.nxp_support_membrane_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-field',
                )
        self.nxp_support_membrane_material.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_support_membrane_thickness = NX_FLOAT()
        self.nxp_support_membrane_thickness.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='support_membrane_thickness',
                )
        self.nxp_support_membrane_thickness.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_support_membrane_thickness.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_support_membrane_thickness.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-field',
                )
        self.nxp_support_membrane_thickness.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfresnel_zone_plate.html#nxfresnel-zone-plate-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXevent_data(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXevent_data',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    NXevent_data is a special group for storing data from neutron     detectors in
        event mode.  In this mode, the detector electronics     emits a stream of
        detectorID, timestamp pairs. With detectorID     describing the detector element
        in which the neutron was detected     and timestamp the timestamp at which the
        neutron event was     detected. In NeXus detectorID maps to event_id,
        event_time_offset     to the timestamp.

        As this kind of data is common at pulsed neutron     sources, the timestamp is
        almost always relative to the start of a     neutron pulse. Thus the pulse
        timestamp is recorded too together     with an index in the event_id,
        event_time_offset pair at which data for     that pulse starts. At reactor source
        the same pulsed data effect     may be achieved through the use of choppers or in
        stroboscopic     measurement setups.

        In order to make random access to timestamped data     faster there is an optional
        array pair of     cue_timestamp_zero and cue_index. The cue_timestamp_zero will
        contain courser timestamps then in the time array, say     every five minutes. The
        cue_index will then contain the     index into the event_id,event_time_offset pair
        of arrays for that     courser cue_timestamp_zero.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_event_time_offset = NX_NUMBER()
        self.nxp_event_time_offset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='event_time_offset',
                )
        self.nxp_event_time_offset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_event_time_offset.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME_OF_FLIGHT',
                )
        self.nxp_event_time_offset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                A list of timestamps for each event as it comes in.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-field',
                )
        self.nxp_event_time_offset.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_event_id = NX_INT()
        self.nxp_event_id.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='event_id',
                )
        self.nxp_event_id.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_event_id.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DIMENSIONLESS',
                )
        self.nxp_event_id.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                There will be extra information in the NXdetector to convert
                event_id to detector_number.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-field',
                )
        self.nxp_event_id.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_event_time_zero = NX_NUMBER()
        self.nxp_event_time_zero.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='event_time_zero',
                )
        self.nxp_event_time_zero.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_event_time_zero.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_event_time_zero.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The time that each pulse started with respect to the offset''',
                default='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-field',
                )
        self.nxp_event_time_zero.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_event_time_zero.nxp_offset = NX_DATE_TIME()
        self.nxp_event_time_zero.nxp_offset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='offset',
                )
        self.nxp_event_time_zero.nxp_offset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_event_time_zero.nxp_offset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ISO8601''',
                default='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-event-time-zero-attribute',
                )
        self.nxp_event_time_zero.nxp_offset.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_event_index = NX_INT()
        self.nxp_event_index.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='event_index',
                )
        self.nxp_event_index.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_event_index.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DIMENSIONLESS',
                )
        self.nxp_event_index.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The index into the event_time_offset, event_id pair for             the
                pulse occurring at the matching entry in event_time_zero.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-field',
                )
        self.nxp_event_index.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_pulse_height = NX_FLOAT()
        self.nxp_pulse_height.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='pulse_height',
                )
        self.nxp_pulse_height.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_pulse_height.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DIMENSIONLESS',
                )
        self.nxp_pulse_height.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                If voltages from the ends of the detector are read out this
                is where they go. This list is for all events with information
                to attach to a particular pulse height. The information to
                attach to a particular pulse is located in events_per_pulse.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-field',
                )
        self.nxp_pulse_height.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_cue_timestamp_zero = NX_DATE_TIME()
        self.nxp_cue_timestamp_zero.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='cue_timestamp_zero',
                )
        self.nxp_cue_timestamp_zero.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_cue_timestamp_zero.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_cue_timestamp_zero.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Timestamps matching the corresponding cue_index into the
                event_id, event_time_offset pair.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-field',
                )
        self.nxp_cue_timestamp_zero.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_cue_timestamp_zero.nxp_start = NX_DATE_TIME()
        self.nxp_cue_timestamp_zero.nxp_start.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start',
                )
        self.nxp_cue_timestamp_zero.nxp_start.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_cue_timestamp_zero.nxp_start.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-cue-timestamp-zero-attribute',
                )
        self.nxp_cue_timestamp_zero.nxp_start.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_cue_index = NX_INT()
        self.nxp_cue_index.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='cue_index',
                )
        self.nxp_cue_index.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_cue_index.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Index into the event_id, event_time_offset pair matching the corresponding
                cue_timestamp.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-field',
                )
        self.nxp_cue_index.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXevent_data.html#nxevent-data-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXspin_rotator(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXspin_rotator',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='contributed',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            definition for a spin rotator.
            ''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_read_Bfield_current = NXlog()
        self.nxp_read_Bfield_current.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='read_Bfield_current',
                )
        self.nxp_read_Bfield_current.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_read_Bfield_current.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_read_Bfield_current.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_read_Bfield_current.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                current read from magnet supply.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-group',
                )
        self.nxp_read_Bfield_current.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_read_Bfield_current.nxp_value = NX_CHAR()
        self.nxp_read_Bfield_current.nxp_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value',
                )
        self.nxp_read_Bfield_current.nxp_value.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CURRENT',
                )
        self.nxp_read_Bfield_current.nxp_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-bfield-current-field',
                )
        self.nxp_read_Bfield_current.nxp_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_read_Bfield_voltage = NXlog()
        self.nxp_read_Bfield_voltage.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='read_Bfield_voltage',
                )
        self.nxp_read_Bfield_voltage.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_read_Bfield_voltage.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_read_Bfield_voltage.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_read_Bfield_voltage.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                voltage read from magnet supply.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-group',
                )
        self.nxp_read_Bfield_voltage.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_read_Bfield_voltage.nxp_value = NX_CHAR()
        self.nxp_read_Bfield_voltage.nxp_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value',
                )
        self.nxp_read_Bfield_voltage.nxp_value.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_VOLTAGE',
                )
        self.nxp_read_Bfield_voltage.nxp_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-bfield-voltage-field',
                )
        self.nxp_read_Bfield_voltage.nxp_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_read_Efield_current = NXlog()
        self.nxp_read_Efield_current.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='read_Efield_current',
                )
        self.nxp_read_Efield_current.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_read_Efield_current.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_read_Efield_current.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_read_Efield_current.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                current read from HT supply.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-group',
                )
        self.nxp_read_Efield_current.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_read_Efield_current.nxp_value = NX_CHAR()
        self.nxp_read_Efield_current.nxp_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value',
                )
        self.nxp_read_Efield_current.nxp_value.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CURRENT',
                )
        self.nxp_read_Efield_current.nxp_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-efield-current-field',
                )
        self.nxp_read_Efield_current.nxp_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_read_Efield_voltage = NXlog()
        self.nxp_read_Efield_voltage.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='read_Efield_voltage',
                )
        self.nxp_read_Efield_voltage.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_read_Efield_voltage.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_read_Efield_voltage.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_read_Efield_voltage.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                voltage read from HT supply.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-group',
                )
        self.nxp_read_Efield_voltage.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_read_Efield_voltage.nxp_value = NX_CHAR()
        self.nxp_read_Efield_voltage.nxp_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value',
                )
        self.nxp_read_Efield_voltage.nxp_value.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_VOLTAGE',
                )
        self.nxp_read_Efield_voltage.nxp_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-read-efield-voltage-field',
                )
        self.nxp_read_Efield_voltage.nxp_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_description = NX_CHAR()
        self.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_description.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                extended description of the spin rotator.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-field',
                )
        self.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_beamline_distance = NX_FLOAT()
        self.nxp_beamline_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='beamline_distance',
                )
        self.nxp_beamline_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_beamline_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_beamline_distance.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_beamline_distance.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_beamline_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                define position of beamline element relative to production target''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-field',
                )
        self.nxp_beamline_distance.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_set_Bfield_current = NX_FLOAT()
        self.nxp_set_Bfield_current.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='set_Bfield_current',
                )
        self.nxp_set_Bfield_current.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_set_Bfield_current.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CURRENT',
                )
        self.nxp_set_Bfield_current.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_set_Bfield_current.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_set_Bfield_current.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                current set on magnet supply.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-field',
                )
        self.nxp_set_Bfield_current.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_set_Efield_voltage = NX_FLOAT()
        self.nxp_set_Efield_voltage.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='set_Efield_voltage',
                )
        self.nxp_set_Efield_voltage.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_set_Efield_voltage.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_VOLTAGE',
                )
        self.nxp_set_Efield_voltage.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_set_Efield_voltage.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_set_Efield_voltage.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                current set on HT supply.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspin_rotator.html#nxspin-rotator-field',
                )
        self.nxp_set_Efield_voltage.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXsolenoid_magnet(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXsolenoid_magnet',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='contributed',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            definition for a solenoid magnet.
            ''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_read_current = NXlog()
        self.nxp_read_current.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='read_current',
                )
        self.nxp_read_current.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_read_current.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_read_current.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_read_current.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                current read from supply.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-group',
                )
        self.nxp_read_current.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_read_current.nxp_value = NX_CHAR()
        self.nxp_read_current.nxp_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value',
                )
        self.nxp_read_current.nxp_value.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CURRENT',
                )
        self.nxp_read_current.nxp_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-read-current-field',
                )
        self.nxp_read_current.nxp_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_read_voltage = NXlog()
        self.nxp_read_voltage.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='read_voltage',
                )
        self.nxp_read_voltage.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_read_voltage.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_read_voltage.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_read_voltage.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                voltage read from supply.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-group',
                )
        self.nxp_read_voltage.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_read_voltage.nxp_value = NX_CHAR()
        self.nxp_read_voltage.nxp_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value',
                )
        self.nxp_read_voltage.nxp_value.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_VOLTAGE',
                )
        self.nxp_read_voltage.nxp_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-read-voltage-field',
                )
        self.nxp_read_voltage.nxp_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_description = NX_CHAR()
        self.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_description.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                extended description of the magnet.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-field',
                )
        self.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_beamline_distance = NX_FLOAT()
        self.nxp_beamline_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='beamline_distance',
                )
        self.nxp_beamline_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_beamline_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_beamline_distance.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_beamline_distance.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_beamline_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                define position of beamline element relative to production target''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-field',
                )
        self.nxp_beamline_distance.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_set_current = NX_FLOAT()
        self.nxp_set_current.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='set_current',
                )
        self.nxp_set_current.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_set_current.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CURRENT',
                )
        self.nxp_set_current.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_set_current.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_set_current.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                current set on supply.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsolenoid_magnet.html#nxsolenoid-magnet-field',
                )
        self.nxp_set_current.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXcsg(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXcsg',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='contributed',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    constructive solid geometry NeXus class, using :ref:`NXquadric`     and
        :ref:`NXoff_geometry`.
            ''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcsg.html#nxcsg',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_a = NXcsg()
        self.nxp_a.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='a',
                )
        self.nxp_a.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcsg',
                )
        self.nxp_a.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_a.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_a.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The first operand of constructive solid geometry      operation.
                Compulsory if 'operation' is UNION, INTERSECTION,      DIFFERENCE or
                COMPLEMENT.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcsg.html#nxcsg-group',
                )
        self.nxp_a.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_b = NXcsg()
        self.nxp_b.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='b',
                )
        self.nxp_b.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcsg',
                )
        self.nxp_b.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_b.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_b.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The second operand of constructive solid geometry      operation.
                Compulsory if 'operation' is UNION, INTERSECTION or      DIFFERENCE.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcsg.html#nxcsg-group',
                )
        self.nxp_b.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_operation = NX_CHAR()
        self.nxp_operation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='operation',
                )
        self.nxp_operation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                One of the standard construction solid geometry set operations,       or
                if the CSG is a pointer to the geometry provided by an
                :ref:`NXquadric` or an :ref:`NXoff_geometry`. Takes values:''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcsg.html#nxcsg-field',
                )
        self.nxp_operation.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_operation.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='UNION,INTERSECTION,DIFFERENCE,COMPLEMENT,IS_QUADRIC,IS_MESH',
                )


        self.nxp_geometry = NX_CHAR()
        self.nxp_geometry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='geometry',
                )
        self.nxp_geometry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_geometry.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_geometry.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_geometry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Path to a field that is either an :ref:`NXquadric` (if       'operation' =
                IS_QUADRIC) or an :ref:`NXoff_geometry` (if       'operation' = IS_MESH)
                that defines the surface making up the       constructive solid geometry
                component. Compulsory if 'operation'       is IS_QUADRIC or IS_MESH.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcsg.html#nxcsg-field',
                )
        self.nxp_geometry.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXquadric(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXquadric',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='contributed',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            definition of a quadric surface.
            ''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXquadric.html#nxquadric',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_parameters = NX_NUMBER()
        self.nxp_parameters.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='parameters',
                )
        self.nxp_parameters.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_parameters.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_PER_LENGTH',
                )
        self.nxp_parameters.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Ten real values of the matrix that defines the quadric surface       in
                projective space. Ordered Q11, Q12, Q13, Q22, Q23, Q33, P1,       P2, P3,
                R. Takes a units attribute of dimension reciprocal       length. R is
                scalar. P has dimension reciprocal length, and the       given units. Q
                has dimension reciprocal length squared, and       units the square of
                those given.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXquadric.html#nxquadric-field',
                )
        self.nxp_parameters.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_surface_type = NX_CHAR()
        self.nxp_surface_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='surface_type',
                )
        self.nxp_surface_type.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_surface_type.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_surface_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                An optional description of the form of the quadric surface:''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXquadric.html#nxquadric-field',
                )
        self.nxp_surface_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_surface_type.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='ELLIPSOID,ELLIPTIC_PARABOLOID,HYPERBOLIC_PARABOLOID,ELLIPTIC_HYPERBOLOID_OF_1_SHEET,ELLIPTIC_HYPERBOLOID_OF_2_SHEETS,ELLIPTIC_CONE,ELLIPTIC_CYLINDER,HYPERBOLIC_CYLINDER,PARABOLIC_CYLINDER,SPHEROID,SPHERE,PARABOLOID,HYPERBOLOID_1_SHEET,HYPERBOLOID_2_SHEET,CONE,CYLINDER,PLANE,IMAGINARY,UNKNOWN',
                )


        self.nxp_depends_on = NX_CHAR()
        self.nxp_depends_on.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='depends_on',
                )
        self.nxp_depends_on.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_depends_on.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_depends_on.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_depends_on.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Path to an :ref:`NXtransformations` that defining the axis on       which
                the orientation of the surface depends.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXquadric.html#nxquadric-field',
                )
        self.nxp_depends_on.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXseparator(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXseparator',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='contributed',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            definition for an electrostatic separator.
            ''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_read_Bfield_current = NXlog()
        self.nxp_read_Bfield_current.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='read_Bfield_current',
                )
        self.nxp_read_Bfield_current.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_read_Bfield_current.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_read_Bfield_current.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_read_Bfield_current.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                current read from magnet supply.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-group',
                )
        self.nxp_read_Bfield_current.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_read_Bfield_current.nxp_value = NX_CHAR()
        self.nxp_read_Bfield_current.nxp_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value',
                )
        self.nxp_read_Bfield_current.nxp_value.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CURRENT',
                )
        self.nxp_read_Bfield_current.nxp_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-bfield-current-field',
                )
        self.nxp_read_Bfield_current.nxp_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_read_Bfield_voltage = NXlog()
        self.nxp_read_Bfield_voltage.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='read_Bfield_voltage',
                )
        self.nxp_read_Bfield_voltage.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_read_Bfield_voltage.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_read_Bfield_voltage.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_read_Bfield_voltage.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                voltage read from magnet supply.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-group',
                )
        self.nxp_read_Bfield_voltage.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_read_Bfield_voltage.nxp_value = NX_CHAR()
        self.nxp_read_Bfield_voltage.nxp_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value',
                )
        self.nxp_read_Bfield_voltage.nxp_value.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_VOLTAGE',
                )
        self.nxp_read_Bfield_voltage.nxp_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-bfield-voltage-field',
                )
        self.nxp_read_Bfield_voltage.nxp_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_read_Efield_current = NXlog()
        self.nxp_read_Efield_current.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='read_Efield_current',
                )
        self.nxp_read_Efield_current.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_read_Efield_current.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_read_Efield_current.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_read_Efield_current.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                current read from HT supply.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-group',
                )
        self.nxp_read_Efield_current.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_read_Efield_current.nxp_value = NX_CHAR()
        self.nxp_read_Efield_current.nxp_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value',
                )
        self.nxp_read_Efield_current.nxp_value.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CURRENT',
                )
        self.nxp_read_Efield_current.nxp_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-efield-current-field',
                )
        self.nxp_read_Efield_current.nxp_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_read_Efield_voltage = NXlog()
        self.nxp_read_Efield_voltage.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='read_Efield_voltage',
                )
        self.nxp_read_Efield_voltage.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_read_Efield_voltage.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_read_Efield_voltage.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_read_Efield_voltage.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                voltage read from HT supply.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-group',
                )
        self.nxp_read_Efield_voltage.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_read_Efield_voltage.nxp_value = NX_CHAR()
        self.nxp_read_Efield_voltage.nxp_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value',
                )
        self.nxp_read_Efield_voltage.nxp_value.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_VOLTAGE',
                )
        self.nxp_read_Efield_voltage.nxp_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-read-efield-voltage-field',
                )
        self.nxp_read_Efield_voltage.nxp_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_description = NX_CHAR()
        self.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_description.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                extended description of the separator.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-field',
                )
        self.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_beamline_distance = NX_FLOAT()
        self.nxp_beamline_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='beamline_distance',
                )
        self.nxp_beamline_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_beamline_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_beamline_distance.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_beamline_distance.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_beamline_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                define position of beamline element relative to production target''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-field',
                )
        self.nxp_beamline_distance.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_set_Bfield_current = NX_FLOAT()
        self.nxp_set_Bfield_current.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='set_Bfield_current',
                )
        self.nxp_set_Bfield_current.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_set_Bfield_current.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CURRENT',
                )
        self.nxp_set_Bfield_current.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_set_Bfield_current.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_set_Bfield_current.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                current set on magnet supply.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-field',
                )
        self.nxp_set_Bfield_current.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_set_Efield_voltage = NX_FLOAT()
        self.nxp_set_Efield_voltage.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='set_Efield_voltage',
                )
        self.nxp_set_Efield_voltage.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_set_Efield_voltage.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_VOLTAGE',
                )
        self.nxp_set_Efield_voltage.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_set_Efield_voltage.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_set_Efield_voltage.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                current set on HT supply.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXseparator.html#nxseparator-field',
                )
        self.nxp_set_Efield_voltage.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXquadrupole_magnet(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXquadrupole_magnet',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='contributed',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            definition for a quadrupole magnet.
            ''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_read_current = NXlog()
        self.nxp_read_current.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='read_current',
                )
        self.nxp_read_current.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_read_current.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_read_current.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_read_current.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                current read from supply.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-group',
                )
        self.nxp_read_current.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_read_current.nxp_value = NX_CHAR()
        self.nxp_read_current.nxp_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value',
                )
        self.nxp_read_current.nxp_value.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CURRENT',
                )
        self.nxp_read_current.nxp_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-read-current-field',
                )
        self.nxp_read_current.nxp_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_read_voltage = NXlog()
        self.nxp_read_voltage.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='read_voltage',
                )
        self.nxp_read_voltage.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_read_voltage.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_read_voltage.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_read_voltage.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                voltage read from supply.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-group',
                )
        self.nxp_read_voltage.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_read_voltage.nxp_value = NX_CHAR()
        self.nxp_read_voltage.nxp_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value',
                )
        self.nxp_read_voltage.nxp_value.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_VOLTAGE',
                )
        self.nxp_read_voltage.nxp_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-read-voltage-field',
                )
        self.nxp_read_voltage.nxp_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_description = NX_CHAR()
        self.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_description.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                extended description of the magnet.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-field',
                )
        self.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_beamline_distance = NX_FLOAT()
        self.nxp_beamline_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='beamline_distance',
                )
        self.nxp_beamline_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_beamline_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_beamline_distance.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_beamline_distance.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_beamline_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                define position of beamline element relative to production target''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-field',
                )
        self.nxp_beamline_distance.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_set_current = NX_FLOAT()
        self.nxp_set_current.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='set_current',
                )
        self.nxp_set_current.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_set_current.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CURRENT',
                )
        self.nxp_set_current.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_set_current.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_set_current.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                current set on supply.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXquadrupole_magnet.html#nxquadrupole-magnet-field',
                )
        self.nxp_set_current.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXelectrostatic_kicker(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXelectrostatic_kicker',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='contributed',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            definition for a electrostatic kicker.
            ''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_read_current = NXlog()
        self.nxp_read_current.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='read_current',
                )
        self.nxp_read_current.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_read_current.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_read_current.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_read_current.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                current read from supply.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-group',
                )
        self.nxp_read_current.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_read_current.nxp_value = NX_CHAR()
        self.nxp_read_current.nxp_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value',
                )
        self.nxp_read_current.nxp_value.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CURRENT',
                )
        self.nxp_read_current.nxp_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-read-current-field',
                )
        self.nxp_read_current.nxp_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_read_voltage = NXlog()
        self.nxp_read_voltage.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='read_voltage',
                )
        self.nxp_read_voltage.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_read_voltage.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_read_voltage.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_read_voltage.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                voltage read from supply.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-group',
                )
        self.nxp_read_voltage.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_read_voltage.nxp_value = NX_CHAR()
        self.nxp_read_voltage.nxp_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value',
                )
        self.nxp_read_voltage.nxp_value.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_VOLTAGE',
                )
        self.nxp_read_voltage.nxp_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-read-voltage-field',
                )
        self.nxp_read_voltage.nxp_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_description = NX_CHAR()
        self.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_description.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                extended description of the kicker.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-field',
                )
        self.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_beamline_distance = NX_FLOAT()
        self.nxp_beamline_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='beamline_distance',
                )
        self.nxp_beamline_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_beamline_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_beamline_distance.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_beamline_distance.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_beamline_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                define position of beamline element relative to production target''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-field',
                )
        self.nxp_beamline_distance.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_timing = NX_FLOAT()
        self.nxp_timing.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='timing',
                )
        self.nxp_timing.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_timing.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_timing.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_timing.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_timing.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                kicker timing as defined by ``description`` attribute''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-field',
                )
        self.nxp_timing.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_timing.nxp_description = NX_CHAR()
        self.nxp_timing.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_timing.nxp_description.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_timing.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-timing-attribute',
                )
        self.nxp_timing.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_set_current = NX_FLOAT()
        self.nxp_set_current.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='set_current',
                )
        self.nxp_set_current.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_set_current.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CURRENT',
                )
        self.nxp_set_current.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_set_current.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_set_current.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                current set on supply.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-field',
                )
        self.nxp_set_current.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_set_voltage = NX_FLOAT()
        self.nxp_set_voltage.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='set_voltage',
                )
        self.nxp_set_voltage.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_set_voltage.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_VOLTAGE',
                )
        self.nxp_set_voltage.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_set_voltage.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_set_voltage.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                volage set on supply.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXelectrostatic_kicker.html#nxelectrostatic-kicker-field',
                )
        self.nxp_set_voltage.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXmagnetic_kicker(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXmagnetic_kicker',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='contributed',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            definition for a magnetic kicker.
            ''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_read_current = NXlog()
        self.nxp_read_current.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='read_current',
                )
        self.nxp_read_current.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_read_current.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_read_current.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_read_current.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                current read from supply.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-group',
                )
        self.nxp_read_current.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_read_current.nxp_value = NX_CHAR()
        self.nxp_read_current.nxp_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value',
                )
        self.nxp_read_current.nxp_value.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CURRENT',
                )
        self.nxp_read_current.nxp_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-read-current-field',
                )
        self.nxp_read_current.nxp_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_read_voltage = NXlog()
        self.nxp_read_voltage.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='read_voltage',
                )
        self.nxp_read_voltage.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_read_voltage.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_read_voltage.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_read_voltage.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                voltage read from supply.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-group',
                )
        self.nxp_read_voltage.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_read_voltage.nxp_value = NX_CHAR()
        self.nxp_read_voltage.nxp_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value',
                )
        self.nxp_read_voltage.nxp_value.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_VOLTAGE',
                )
        self.nxp_read_voltage.nxp_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-read-voltage-field',
                )
        self.nxp_read_voltage.nxp_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_description = NX_CHAR()
        self.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_description.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                extended description of the kicker.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-field',
                )
        self.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_beamline_distance = NX_FLOAT()
        self.nxp_beamline_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='beamline_distance',
                )
        self.nxp_beamline_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_beamline_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_beamline_distance.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_beamline_distance.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_beamline_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                define position of beamline element relative to production target''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-field',
                )
        self.nxp_beamline_distance.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_timing = NX_FLOAT()
        self.nxp_timing.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='timing',
                )
        self.nxp_timing.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_timing.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_timing.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_timing.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_timing.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                kicker timing as defined by ``description`` attribute''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-field',
                )
        self.nxp_timing.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_timing.nxp_description = NX_CHAR()
        self.nxp_timing.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_timing.nxp_description.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_timing.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-timing-attribute',
                )
        self.nxp_timing.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_set_current = NX_FLOAT()
        self.nxp_set_current.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='set_current',
                )
        self.nxp_set_current.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_set_current.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CURRENT',
                )
        self.nxp_set_current.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_set_current.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_set_current.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                current set on supply.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-field',
                )
        self.nxp_set_current.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_set_voltage = NX_FLOAT()
        self.nxp_set_voltage.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='set_voltage',
                )
        self.nxp_set_voltage.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_set_voltage.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_VOLTAGE',
                )
        self.nxp_set_voltage.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_set_voltage.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_set_voltage.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                voltage set on supply.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXmagnetic_kicker.html#nxmagnetic-kicker-field',
                )
        self.nxp_set_voltage.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXprocess(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXprocess',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            Document an event of data processing, reconstruction, or analysis for this data.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_NOTE = NXnote()
        self.nxp_NOTE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXnote',
                )
        self.nxp_NOTE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The note will contain information about how the data was processed
                or anything about the data provenance.              The contents of the
                note can be anything that the processing code              can understand,
                or simple text.                          The name will be numbered to
                allow for ordering of steps.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-group',
                )
        self.nxp_NOTE.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_program = NX_CHAR()
        self.nxp_program.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='program',
                )
        self.nxp_program.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_program.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Name of the program used''',
                default='https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-field',
                )
        self.nxp_program.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_sequence_index = NX_POSINT()
        self.nxp_sequence_index.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sequence_index',
                )
        self.nxp_sequence_index.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_POSINT',
                )
        self.nxp_sequence_index.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Sequence index of processing,              for determining the order of
                multiple **NXprocess** steps.               Starts with 1.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-field',
                )
        self.nxp_sequence_index.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_version = NX_CHAR()
        self.nxp_version.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='version',
                )
        self.nxp_version.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_version.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Version of the program used''',
                default='https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-field',
                )
        self.nxp_version.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_date = NX_DATE_TIME()
        self.nxp_date.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='date',
                )
        self.nxp_date.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_date.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Date and time of processing.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-field',
                )
        self.nxp_date.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXprocess.html#nxprocess-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXcapillary(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXcapillary',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    A capillary lens to focus the X-ray beam.              Based on information
        provided by Gerd Wellenreuther (DESY).
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_gain = NXdata()
        self.nxp_gain.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_gain.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='gain',
                )
        self.nxp_gain.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The gain of the capillary as a function of energy''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-group',
                )
        self.nxp_gain.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_transmission = NXdata()
        self.nxp_transmission.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_transmission.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='transmission',
                )
        self.nxp_transmission.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The transmission of the capillary as a function of energy''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-group',
                )
        self.nxp_transmission.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_type = NX_CHAR()
        self.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_type.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Type of the capillary''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-field',
                )
        self.nxp_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_type.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='single_bounce,polycapillary,conical_capillary',
                )


        self.nxp_manufacturer = NX_CHAR()
        self.nxp_manufacturer.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='manufacturer',
                )
        self.nxp_manufacturer.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_manufacturer.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The manufacturer of the capillary. This is actually important as
                it may have an impact on performance.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-field',
                )
        self.nxp_manufacturer.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_maximum_incident_angle = NX_FLOAT()
        self.nxp_maximum_incident_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='maximum_incident_angle',
                )
        self.nxp_maximum_incident_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_maximum_incident_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_maximum_incident_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-field',
                )
        self.nxp_maximum_incident_angle.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_accepting_aperture = NX_FLOAT()
        self.nxp_accepting_aperture.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='accepting_aperture',
                )
        self.nxp_accepting_aperture.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_accepting_aperture.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_accepting_aperture.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-field',
                )
        self.nxp_accepting_aperture.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_working_distance = NX_FLOAT()
        self.nxp_working_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='working_distance',
                )
        self.nxp_working_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_working_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_working_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-field',
                )
        self.nxp_working_distance.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_focal_size = NX_FLOAT()
        self.nxp_focal_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='focal_size',
                )
        self.nxp_focal_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_focal_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The focal size in FWHM''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-field',
                )
        self.nxp_focal_size.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcapillary.html#nxcapillary-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXgeometry(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXgeometry',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_deprecated = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='as decided at 2014 NIAC meeting, convert to use :ref:`NXtransformations`',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    legacy class - recommend to use :ref:`NXtransformations` now                  It
        is recommended that instances of :ref:`NXgeometry` be converted to          use
        :ref:`NXtransformations`.                  This is the description for a general
        position of a component.          It is recommended to name an instance of
        :ref:`NXgeometry` as "geometry"         to aid in the use of the definition in
        simulation codes such as McStas.         Also, in HDF, linked items must share the
        same name.         However, it might not be possible or practical in all
        situations.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_deprecated = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_SHAPE = NXshape()
        self.nxp_SHAPE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXshape',
                )
        self.nxp_SHAPE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                shape/size information of component''',
                default='https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-group',
                )
        self.nxp_SHAPE.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_TRANSLATION = NXtranslation()
        self.nxp_TRANSLATION.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXtranslation',
                )
        self.nxp_TRANSLATION.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                translation of component''',
                default='https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-group',
                )
        self.nxp_TRANSLATION.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ORIENTATION = NXorientation()
        self.nxp_ORIENTATION.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXorientation',
                )
        self.nxp_ORIENTATION.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                orientation of component''',
                default='https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-group',
                )
        self.nxp_ORIENTATION.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_description = NX_CHAR()
        self.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Optional description/label. Probably only present if we are             an
                additional reference point for components rather than the
                location of a real component.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-field',
                )
        self.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_component_index = NX_INT()
        self.nxp_component_index.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='component_index',
                )
        self.nxp_component_index.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_component_index.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Position of the component along the beam path. The sample is at 0,
                components upstream             have negative component_index, components
                downstream have positive             component_index.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-field',
                )
        self.nxp_component_index.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXgeometry.html#nxgeometry-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXcollimator(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXcollimator',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            A beamline collimator.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_GEOMETRY = NXgeometry()
        self.nxp_GEOMETRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgeometry',
                )
        self.nxp_GEOMETRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                position, shape and size''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-group',
                )
        self.nxp_GEOMETRY.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_frequency_log = NXlog()
        self.nxp_frequency_log.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_frequency_log.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='frequency_log',
                )
        self.nxp_frequency_log.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Log of frequency''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-group',
                )
        self.nxp_frequency_log.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_type = NX_CHAR()
        self.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-field',
                )
        self.nxp_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_type.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='Soller,radial,oscillating,honeycomb',
                )


        self.nxp_soller_angle = NX_FLOAT()
        self.nxp_soller_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='soller_angle',
                )
        self.nxp_soller_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_soller_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_soller_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Angular divergence of Soller collimator''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-field',
                )
        self.nxp_soller_angle.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_divergence_x = NX_FLOAT()
        self.nxp_divergence_x.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='divergence_x',
                )
        self.nxp_divergence_x.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_divergence_x.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_divergence_x.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                divergence of collimator in local x direction''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-field',
                )
        self.nxp_divergence_x.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_divergence_y = NX_FLOAT()
        self.nxp_divergence_y.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='divergence_y',
                )
        self.nxp_divergence_y.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_divergence_y.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_divergence_y.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                divergence of collimator in local y direction''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-field',
                )
        self.nxp_divergence_y.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_frequency = NX_FLOAT()
        self.nxp_frequency.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='frequency',
                )
        self.nxp_frequency.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_frequency.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FREQUENCY',
                )
        self.nxp_frequency.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Frequency of oscillating collimator''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-field',
                )
        self.nxp_frequency.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_blade_thickness = NX_FLOAT()
        self.nxp_blade_thickness.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='blade_thickness',
                )
        self.nxp_blade_thickness.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_blade_thickness.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_blade_thickness.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                blade thickness''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-field',
                )
        self.nxp_blade_thickness.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_blade_spacing = NX_FLOAT()
        self.nxp_blade_spacing.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='blade_spacing',
                )
        self.nxp_blade_spacing.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_blade_spacing.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_blade_spacing.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                blade spacing''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-field',
                )
        self.nxp_blade_spacing.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_absorbing_material = NX_CHAR()
        self.nxp_absorbing_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='absorbing_material',
                )
        self.nxp_absorbing_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                name of absorbing material''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-field',
                )
        self.nxp_absorbing_material.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_transmitting_material = NX_CHAR()
        self.nxp_transmitting_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='transmitting_material',
                )
        self.nxp_transmitting_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                name of transmitting material''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-field',
                )
        self.nxp_transmitting_material.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcollimator.html#nxcollimator-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXbeam(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXbeam',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    Properties of the neutron or X-ray beam at a given location.                   It
        will be referenced         by beamline component groups within the
        :ref:`NXinstrument` group or by the :ref:`NXsample` group. Note         that
        variables such as the incident energy could be scalar values or arrays. This group
        is         especially valuable in storing the results of instrument simulations in
        which it is useful         to specify the beam profile, time distribution etc. at
        each beamline component. Otherwise,         its most likely use is in the
        :ref:`NXsample` group in which it defines the results of the neutron
        scattering by the sample, e.g., energy transfer, polarizations.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_DATA = NXdata()
        self.nxp_DATA.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_DATA.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Distribution of beam with respect to relevant variable e.g. wavelength.
                This is mainly             useful for simulations which need to store
                plottable information at each beamline             component.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-group',
                )
        self.nxp_DATA.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_distance = NX_FLOAT()
        self.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Distance from sample''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-field',
                )
        self.nxp_distance.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_incident_energy = NX_FLOAT()
        self.nxp_incident_energy.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='incident_energy',
                )
        self.nxp_incident_energy.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_incident_energy.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ENERGY',
                )
        self.nxp_incident_energy.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Energy on entering beamline component''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-field',
                )
        self.nxp_incident_energy.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_final_energy = NX_FLOAT()
        self.nxp_final_energy.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='final_energy',
                )
        self.nxp_final_energy.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_final_energy.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ENERGY',
                )
        self.nxp_final_energy.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Energy on leaving beamline component''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-field',
                )
        self.nxp_final_energy.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_energy_transfer = NX_FLOAT()
        self.nxp_energy_transfer.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='energy_transfer',
                )
        self.nxp_energy_transfer.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_energy_transfer.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ENERGY',
                )
        self.nxp_energy_transfer.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Energy change caused by beamline component''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-field',
                )
        self.nxp_energy_transfer.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_incident_wavelength = NX_FLOAT()
        self.nxp_incident_wavelength.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='incident_wavelength',
                )
        self.nxp_incident_wavelength.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_incident_wavelength.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVELENGTH',
                )
        self.nxp_incident_wavelength.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Wavelength on entering beamline component''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-field',
                )
        self.nxp_incident_wavelength.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_incident_wavelength_spread = NX_FLOAT()
        self.nxp_incident_wavelength_spread.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='incident_wavelength_spread',
                )
        self.nxp_incident_wavelength_spread.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_incident_wavelength_spread.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVELENGTH',
                )
        self.nxp_incident_wavelength_spread.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Wavelength spread FWHM on entering component''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-field',
                )
        self.nxp_incident_wavelength_spread.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_incident_beam_divergence = NX_FLOAT()
        self.nxp_incident_beam_divergence.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='incident_beam_divergence',
                )
        self.nxp_incident_beam_divergence.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_incident_beam_divergence.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_incident_beam_divergence.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Divergence of beam entering this component''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-field',
                )
        self.nxp_incident_beam_divergence.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_extent = NX_FLOAT()
        self.nxp_extent.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='extent',
                )
        self.nxp_extent.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_extent.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_extent.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Size of the beam entering this component''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-field',
                )
        self.nxp_extent.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_final_wavelength = NX_FLOAT()
        self.nxp_final_wavelength.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='final_wavelength',
                )
        self.nxp_final_wavelength.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_final_wavelength.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVELENGTH',
                )
        self.nxp_final_wavelength.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Wavelength on leaving beamline component''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-field',
                )
        self.nxp_final_wavelength.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_incident_polarization = NX_FLOAT()
        self.nxp_incident_polarization.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='incident_polarization',
                )
        self.nxp_incident_polarization.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_incident_polarization.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_incident_polarization.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Polarization vector on entering beamline component''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-field',
                )
        self.nxp_incident_polarization.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_final_polarization = NX_FLOAT()
        self.nxp_final_polarization.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='final_polarization',
                )
        self.nxp_final_polarization.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_final_polarization.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_final_polarization.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Polarization vector on leaving beamline component''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-field',
                )
        self.nxp_final_polarization.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_final_wavelength_spread = NX_FLOAT()
        self.nxp_final_wavelength_spread.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='final_wavelength_spread',
                )
        self.nxp_final_wavelength_spread.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_final_wavelength_spread.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVELENGTH',
                )
        self.nxp_final_wavelength_spread.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Wavelength spread FWHM of beam leaving this component''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-field',
                )
        self.nxp_final_wavelength_spread.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_final_beam_divergence = NX_FLOAT()
        self.nxp_final_beam_divergence.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='final_beam_divergence',
                )
        self.nxp_final_beam_divergence.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_final_beam_divergence.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_final_beam_divergence.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Divergence FWHM of beam leaving this component''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-field',
                )
        self.nxp_final_beam_divergence.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_flux = NX_FLOAT()
        self.nxp_flux.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='flux',
                )
        self.nxp_flux.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_flux.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLUX',
                )
        self.nxp_flux.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                flux incident on beam plane area''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-field',
                )
        self.nxp_flux.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbeam.html#nxbeam-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXsample_component(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXsample_component',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    One group like this per component can be recorded For a sample consisting of
        multiple components.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_transmission = NXdata()
        self.nxp_transmission.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='transmission',
                )
        self.nxp_transmission.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_transmission.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                As a function of Wavelength''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-group',
                )
        self.nxp_transmission.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_name = NX_CHAR()
        self.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Descriptive name of sample component''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-field',
                )
        self.nxp_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_chemical_formula = NX_CHAR()
        self.nxp_chemical_formula.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='chemical_formula',
                )
        self.nxp_chemical_formula.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The chemical formula specified using CIF conventions.
                Abbreviated version of CIF standard:
                * Only recognized element symbols may be used.                         *
                Each element symbol is followed by a 'count' number. A count of '1' may be
                omitted.                         * A space or parenthesis must separate
                each cluster of (element symbol + count).                         * Where
                a group of elements is enclosed in parentheses, the multiplier for the
                group must follow the closing parentheses. That is, all element and group
                multipliers are assumed to be printed as subscripted numbers.
                * Unless the elements are ordered in a manner that corresponds to their
                chemical                            structure, the order of the elements
                within any group or moiety depends on                            whether
                or not carbon is present.                         * If carbon is present,
                the order should be:                                                     -
                C, then H, then the other elements in alphabetical order of their symbol.
                - If carbon is not present, the elements are listed purely in alphabetic
                order of their symbol.
                * This is the *Hill* system used by Chemical Abstracts.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-field',
                )
        self.nxp_chemical_formula.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_unit_cell_abc = NX_FLOAT()
        self.nxp_unit_cell_abc.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unit_cell_abc',
                )
        self.nxp_unit_cell_abc.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_unit_cell_abc.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_unit_cell_abc.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Crystallography unit cell parameters a, b, and c''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-field',
                )
        self.nxp_unit_cell_abc.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_unit_cell_alphabetagamma = NX_FLOAT()
        self.nxp_unit_cell_alphabetagamma.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unit_cell_alphabetagamma',
                )
        self.nxp_unit_cell_alphabetagamma.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_unit_cell_alphabetagamma.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_unit_cell_alphabetagamma.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Crystallography unit cell parameters alpha, beta, and gamma''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-field',
                )
        self.nxp_unit_cell_alphabetagamma.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_unit_cell_volume = NX_FLOAT()
        self.nxp_unit_cell_volume.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unit_cell_volume',
                )
        self.nxp_unit_cell_volume.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_unit_cell_volume.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_VOLUME',
                )
        self.nxp_unit_cell_volume.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Volume of the unit cell''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-field',
                )
        self.nxp_unit_cell_volume.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_sample_orientation = NX_FLOAT()
        self.nxp_sample_orientation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample_orientation',
                )
        self.nxp_sample_orientation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_sample_orientation.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_sample_orientation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                This will follow the Busing and Levy convention from Acta.Crysta v22, p457
                (1967)''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-field',
                )
        self.nxp_sample_orientation.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_orientation_matrix = NX_FLOAT()
        self.nxp_orientation_matrix.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='orientation_matrix',
                )
        self.nxp_orientation_matrix.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_orientation_matrix.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Orientation matrix of single crystal sample component.
                This will follow the Busing and Levy convention from Acta.Crysta v22, p457
                (1967)''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-field',
                )
        self.nxp_orientation_matrix.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_mass = NX_FLOAT()
        self.nxp_mass.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='mass',
                )
        self.nxp_mass.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_mass.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_MASS',
                )
        self.nxp_mass.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Mass of sample component''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-field',
                )
        self.nxp_mass.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_density = NX_FLOAT()
        self.nxp_density.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='density',
                )
        self.nxp_density.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_density.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_MASS_DENSITY',
                )
        self.nxp_density.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Density of sample component''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-field',
                )
        self.nxp_density.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_relative_molecular_mass = NX_FLOAT()
        self.nxp_relative_molecular_mass.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='relative_molecular_mass',
                )
        self.nxp_relative_molecular_mass.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_relative_molecular_mass.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_MASS',
                )
        self.nxp_relative_molecular_mass.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Relative Molecular Mass of sample component''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-field',
                )
        self.nxp_relative_molecular_mass.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_description = NX_CHAR()
        self.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Description of the sample component''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-field',
                )
        self.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_volume_fraction = NX_FLOAT()
        self.nxp_volume_fraction.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='volume_fraction',
                )
        self.nxp_volume_fraction.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_volume_fraction.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Volume fraction of component''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-field',
                )
        self.nxp_volume_fraction.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_scattering_length_density = NX_FLOAT()
        self.nxp_scattering_length_density.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='scattering_length_density',
                )
        self.nxp_scattering_length_density.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_scattering_length_density.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_SCATTERING_LENGTH_DENSITY',
                )
        self.nxp_scattering_length_density.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Scattering length density of component''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-field',
                )
        self.nxp_scattering_length_density.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_unit_cell_class = NX_CHAR()
        self.nxp_unit_cell_class.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unit_cell_class',
                )
        self.nxp_unit_cell_class.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                In case it is all we know and we want to record/document it''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-field',
                )
        self.nxp_unit_cell_class.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_unit_cell_class.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='triclinic,monoclinic,orthorhombic,tetragonal,rhombohedral,hexagonal,cubic',
                )


        self.nxp_space_group = NX_CHAR()
        self.nxp_space_group.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='space_group',
                )
        self.nxp_space_group.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Crystallographic space group''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-field',
                )
        self.nxp_space_group.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_point_group = NX_CHAR()
        self.nxp_point_group.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='point_group',
                )
        self.nxp_point_group.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Crystallographic point group, deprecated if space_group present''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-field',
                )
        self.nxp_point_group.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample_component.html#nxsample-component-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXcrystal(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXcrystal',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    A crystal monochromator or analyzer.           Permits double bent
        monochromator comprised of multiple segments with anisotropic      Gaussian
        mosaic.          If curvatures are set to zero or are absent, array      is
        considered to be flat.          Scattering vector is perpendicular to surface.
        Crystal is oriented     parallel to beam incident on crystal before rotation, and
        lies in     vertical plane.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_GEOMETRY = NXgeometry()
        self.nxp_GEOMETRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgeometry',
                )
        self.nxp_GEOMETRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Position of crystal''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-group',
                )
        self.nxp_GEOMETRY.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_temperature_log = NXlog()
        self.nxp_temperature_log.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_temperature_log.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='temperature_log',
                )
        self.nxp_temperature_log.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                log file of crystal temperature''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-group',
                )
        self.nxp_temperature_log.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_reflectivity = NXdata()
        self.nxp_reflectivity.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_reflectivity.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='reflectivity',
                )
        self.nxp_reflectivity.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                crystal reflectivity versus wavelength''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-group',
                )
        self.nxp_reflectivity.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_transmission = NXdata()
        self.nxp_transmission.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_transmission.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='transmission',
                )
        self.nxp_transmission.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                crystal transmission versus wavelength''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-group',
                )
        self.nxp_transmission.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_shape = NXshape()
        self.nxp_shape.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXshape',
                )
        self.nxp_shape.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='shape',
                )
        self.nxp_shape.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                A NXshape group describing the shape of the crystal arrangement''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-group',
                )
        self.nxp_shape.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_usage = NX_CHAR()
        self.nxp_usage.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='usage',
                )
        self.nxp_usage.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_usage.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                How this crystal is used.  Choices are in the list.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_usage.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_usage.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='Bragg,Laue',
                )


        self.nxp_type = NX_CHAR()
        self.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Type or material of monochromating substance.         Chemical formula can
                be specified separately.       Use the "reflection" field to indicate the
                (hkl) orientation.       Use the "d_spacing" field to record the lattice
                plane spacing.              This field was changed (2010-11-17) from an
                enumeration to       a string since common usage showed a wider variety of
                use       than a simple list.  These are the items in the list at
                the time of the change: PG (Highly Oriented Pyrolytic Graphite) |       Ge
                | Si | Cu | Fe3Si | CoFe | Cu2MnAl (Heusler) | Multilayer |       Diamond.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_chemical_formula = NX_CHAR()
        self.nxp_chemical_formula.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='chemical_formula',
                )
        self.nxp_chemical_formula.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The chemical formula specified using CIF conventions.       Abbreviated
                version of CIF standard:

                * Only recognized element symbols may be used.       * Each element symbol
                is followed by a 'count' number. A count of '1' may be omitted.       * A
                space or parenthesis must separate each cluster of (element symbol +
                count).       * Where a group of elements is enclosed in parentheses, the
                multiplier for the          group must follow the closing parentheses.
                That is, all element and group          multipliers are assumed to be
                printed as subscripted numbers.       * Unless the elements are ordered in
                a manner that corresponds to their chemical          structure, the order
                of the elements within any group or moiety depends on          whether or
                not carbon is present.       * If carbon is present, the order should be:
                C, then H, then the other elements in alphabetical order of their symbol.
                If carbon is not present, the elements are listed purely in alphabetic
                order of their symbol.        * This is the *Hill* system used by Chemical
                Abstracts.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_chemical_formula.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_order_no = NX_INT()
        self.nxp_order_no.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='order_no',
                )
        self.nxp_order_no.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_order_no.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                A number which describes if this is the first, second,..
                :math:`n^{th}` crystal in a multi crystal monochromator''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_order_no.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_cut_angle = NX_FLOAT()
        self.nxp_cut_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='cut_angle',
                )
        self.nxp_cut_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_cut_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_cut_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Cut angle of reflecting Bragg plane and plane of crystal surface''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_cut_angle.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_space_group = NX_CHAR()
        self.nxp_space_group.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='space_group',
                )
        self.nxp_space_group.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Space group of crystal structure''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_space_group.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_unit_cell = NX_FLOAT()
        self.nxp_unit_cell.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unit_cell',
                )
        self.nxp_unit_cell.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_unit_cell.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_unit_cell.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Unit cell parameters (lengths and angles)''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_unit_cell.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_unit_cell_a = NX_FLOAT()
        self.nxp_unit_cell_a.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unit_cell_a',
                )
        self.nxp_unit_cell_a.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_unit_cell_a.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_unit_cell_a.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Unit cell lattice parameter: length of side a''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_unit_cell_a.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_unit_cell_b = NX_FLOAT()
        self.nxp_unit_cell_b.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unit_cell_b',
                )
        self.nxp_unit_cell_b.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_unit_cell_b.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_unit_cell_b.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Unit cell lattice parameter: length of side b''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_unit_cell_b.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_unit_cell_c = NX_FLOAT()
        self.nxp_unit_cell_c.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unit_cell_c',
                )
        self.nxp_unit_cell_c.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_unit_cell_c.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_unit_cell_c.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Unit cell lattice parameter: length of side c''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_unit_cell_c.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_unit_cell_alpha = NX_FLOAT()
        self.nxp_unit_cell_alpha.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unit_cell_alpha',
                )
        self.nxp_unit_cell_alpha.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_unit_cell_alpha.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_unit_cell_alpha.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Unit cell lattice parameter: angle alpha''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_unit_cell_alpha.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_unit_cell_beta = NX_FLOAT()
        self.nxp_unit_cell_beta.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unit_cell_beta',
                )
        self.nxp_unit_cell_beta.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_unit_cell_beta.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_unit_cell_beta.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Unit cell lattice parameter: angle beta''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_unit_cell_beta.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_unit_cell_gamma = NX_FLOAT()
        self.nxp_unit_cell_gamma.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unit_cell_gamma',
                )
        self.nxp_unit_cell_gamma.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_unit_cell_gamma.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_unit_cell_gamma.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Unit cell lattice parameter: angle gamma''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_unit_cell_gamma.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_unit_cell_volume = NX_FLOAT()
        self.nxp_unit_cell_volume.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unit_cell_volume',
                )
        self.nxp_unit_cell_volume.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_unit_cell_volume.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_VOLUME',
                )
        self.nxp_unit_cell_volume.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Volume of the unit cell''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_unit_cell_volume.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_orientation_matrix = NX_FLOAT()
        self.nxp_orientation_matrix.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='orientation_matrix',
                )
        self.nxp_orientation_matrix.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_orientation_matrix.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Orientation matrix of single crystal sample using Busing-Levy convention:
                W. R. Busing and H. A. Levy (1967). Acta Cryst. 22, 457-464''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_orientation_matrix.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_wavelength = NX_FLOAT()
        self.nxp_wavelength.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='wavelength',
                )
        self.nxp_wavelength.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_wavelength.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVELENGTH',
                )
        self.nxp_wavelength.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Optimum diffracted wavelength''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_wavelength.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_d_spacing = NX_FLOAT()
        self.nxp_d_spacing.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='d_spacing',
                )
        self.nxp_d_spacing.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_d_spacing.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_d_spacing.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                spacing between crystal planes of the reflection''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_d_spacing.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_scattering_vector = NX_FLOAT()
        self.nxp_scattering_vector.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='scattering_vector',
                )
        self.nxp_scattering_vector.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_scattering_vector.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVENUMBER',
                )
        self.nxp_scattering_vector.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Scattering vector, Q, of nominal reflection''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_scattering_vector.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_reflection = NX_INT()
        self.nxp_reflection.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='reflection',
                )
        self.nxp_reflection.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_reflection.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_reflection.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Miller indices (hkl) values of nominal reflection''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_reflection.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_thickness = NX_FLOAT()
        self.nxp_thickness.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='thickness',
                )
        self.nxp_thickness.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_thickness.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_thickness.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Thickness of the crystal.  (Required for Laue orientations - see "usage"
                field)''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_thickness.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_density = NX_NUMBER()
        self.nxp_density.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='density',
                )
        self.nxp_density.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_density.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_MASS_DENSITY',
                )
        self.nxp_density.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                mass density of the crystal''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_density.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_segment_width = NX_FLOAT()
        self.nxp_segment_width.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='segment_width',
                )
        self.nxp_segment_width.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_segment_width.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_segment_width.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Horizontal width of individual segment''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_segment_width.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_segment_height = NX_FLOAT()
        self.nxp_segment_height.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='segment_height',
                )
        self.nxp_segment_height.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_segment_height.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_segment_height.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Vertical height of individual segment''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_segment_height.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_segment_thickness = NX_FLOAT()
        self.nxp_segment_thickness.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='segment_thickness',
                )
        self.nxp_segment_thickness.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_segment_thickness.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_segment_thickness.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Thickness of individual segment''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_segment_thickness.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_segment_gap = NX_FLOAT()
        self.nxp_segment_gap.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='segment_gap',
                )
        self.nxp_segment_gap.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_segment_gap.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_segment_gap.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Typical gap between adjacent segments''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_segment_gap.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_segment_columns = NX_FLOAT()
        self.nxp_segment_columns.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='segment_columns',
                )
        self.nxp_segment_columns.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_segment_columns.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_segment_columns.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                number of segment columns in horizontal direction''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_segment_columns.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_segment_rows = NX_FLOAT()
        self.nxp_segment_rows.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='segment_rows',
                )
        self.nxp_segment_rows.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_segment_rows.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_segment_rows.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                number of segment rows in vertical direction''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_segment_rows.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_mosaic_horizontal = NX_FLOAT()
        self.nxp_mosaic_horizontal.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='mosaic_horizontal',
                )
        self.nxp_mosaic_horizontal.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_mosaic_horizontal.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_mosaic_horizontal.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                horizontal mosaic Full Width Half Maximum''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_mosaic_horizontal.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_mosaic_vertical = NX_FLOAT()
        self.nxp_mosaic_vertical.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='mosaic_vertical',
                )
        self.nxp_mosaic_vertical.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_mosaic_vertical.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_mosaic_vertical.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                vertical mosaic Full Width Half Maximum''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_mosaic_vertical.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_curvature_horizontal = NX_FLOAT()
        self.nxp_curvature_horizontal.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='curvature_horizontal',
                )
        self.nxp_curvature_horizontal.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_curvature_horizontal.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_curvature_horizontal.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Horizontal curvature of focusing crystal''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_curvature_horizontal.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_curvature_vertical = NX_FLOAT()
        self.nxp_curvature_vertical.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='curvature_vertical',
                )
        self.nxp_curvature_vertical.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_curvature_vertical.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_curvature_vertical.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Vertical curvature of focusing crystal''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_curvature_vertical.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_is_cylindrical = NX_BOOLEAN()
        self.nxp_is_cylindrical.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='is_cylindrical',
                )
        self.nxp_is_cylindrical.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_BOOLEAN',
                )
        self.nxp_is_cylindrical.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Is this crystal bent cylindrically?''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_is_cylindrical.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_cylindrical_orientation_angle = NX_NUMBER()
        self.nxp_cylindrical_orientation_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='cylindrical_orientation_angle',
                )
        self.nxp_cylindrical_orientation_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_cylindrical_orientation_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_cylindrical_orientation_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                If cylindrical: cylinder orientation angle''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_cylindrical_orientation_angle.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_polar_angle = NX_FLOAT()
        self.nxp_polar_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='polar_angle',
                )
        self.nxp_polar_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_polar_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_polar_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Polar (scattering) angle at which crystal assembly is positioned.
                Note: some instrument geometries call this term 2theta.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_polar_angle.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_azimuthal_angle = NX_FLOAT()
        self.nxp_azimuthal_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='azimuthal_angle',
                )
        self.nxp_azimuthal_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_azimuthal_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_azimuthal_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Azimuthal angle at which crystal assembly is positioned''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_azimuthal_angle.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_bragg_angle = NX_FLOAT()
        self.nxp_bragg_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='bragg_angle',
                )
        self.nxp_bragg_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_bragg_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_bragg_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Bragg angle of nominal reflection''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_bragg_angle.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_temperature = NX_FLOAT()
        self.nxp_temperature.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='temperature',
                )
        self.nxp_temperature.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_temperature.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TEMPERATURE',
                )
        self.nxp_temperature.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                average/nominal crystal temperature''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_temperature.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_temperature_coefficient = NX_FLOAT()
        self.nxp_temperature_coefficient.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='temperature_coefficient',
                )
        self.nxp_temperature_coefficient.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_temperature_coefficient.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_temperature_coefficient.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                how lattice parameter changes with temperature''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-field',
                )
        self.nxp_temperature_coefficient.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                      Declares which child group
                contains a path leading            to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute           to help
                define the path to the default dataset to be plotted.           See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXcrystal.html#nxcrystal-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXinsertion_device(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXinsertion_device',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            An insertion device, as used in a synchrotron light source.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_spectrum = NXdata()
        self.nxp_spectrum.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_spectrum.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='spectrum',
                )
        self.nxp_spectrum.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                spectrum of insertion device''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-group',
                )
        self.nxp_spectrum.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_GEOMETRY = NXgeometry()
        self.nxp_GEOMETRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgeometry',
                )
        self.nxp_GEOMETRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                "Engineering" position of insertion device''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-group',
                )
        self.nxp_GEOMETRY.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_type = NX_CHAR()
        self.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-field',
                )
        self.nxp_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_type.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='undulator,wiggler',
                )


        self.nxp_gap = NX_FLOAT()
        self.nxp_gap.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='gap',
                )
        self.nxp_gap.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_gap.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_gap.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                separation between opposing pairs of magnetic poles''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-field',
                )
        self.nxp_gap.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_taper = NX_FLOAT()
        self.nxp_taper.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='taper',
                )
        self.nxp_taper.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_taper.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_taper.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                angular of gap difference between upstream and downstream ends of the
                insertion device''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-field',
                )
        self.nxp_taper.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_phase = NX_FLOAT()
        self.nxp_phase.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='phase',
                )
        self.nxp_phase.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_phase.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_phase.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-field',
                )
        self.nxp_phase.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_poles = NX_INT()
        self.nxp_poles.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='poles',
                )
        self.nxp_poles.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_poles.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_poles.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                number of poles''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-field',
                )
        self.nxp_poles.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_magnetic_wavelength = NX_FLOAT()
        self.nxp_magnetic_wavelength.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='magnetic_wavelength',
                )
        self.nxp_magnetic_wavelength.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_magnetic_wavelength.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVELENGTH',
                )
        self.nxp_magnetic_wavelength.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-field',
                )
        self.nxp_magnetic_wavelength.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_k = NX_FLOAT()
        self.nxp_k.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='k',
                )
        self.nxp_k.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_k.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DIMENSIONLESS',
                )
        self.nxp_k.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                beam displacement parameter''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-field',
                )
        self.nxp_k.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_length = NX_FLOAT()
        self.nxp_length.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='length',
                )
        self.nxp_length.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_length.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_length.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                length of insertion device''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-field',
                )
        self.nxp_length.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_power = NX_FLOAT()
        self.nxp_power.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='power',
                )
        self.nxp_power.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_power.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_POWER',
                )
        self.nxp_power.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                total power delivered by insertion device''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-field',
                )
        self.nxp_power.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_energy = NX_FLOAT()
        self.nxp_energy.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='energy',
                )
        self.nxp_energy.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_energy.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ENERGY',
                )
        self.nxp_energy.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                energy of peak intensity in output spectrum''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-field',
                )
        self.nxp_energy.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_bandwidth = NX_FLOAT()
        self.nxp_bandwidth.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='bandwidth',
                )
        self.nxp_bandwidth.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_bandwidth.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ENERGY',
                )
        self.nxp_bandwidth.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                bandwidth of peak energy''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-field',
                )
        self.nxp_bandwidth.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_harmonic = NX_INT()
        self.nxp_harmonic.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='harmonic',
                )
        self.nxp_harmonic.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_harmonic.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_harmonic.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                harmonic number of peak''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-field',
                )
        self.nxp_harmonic.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinsertion_device.html#nxinsertion-device-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXsensor(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXsensor',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    A sensor used to monitor an external condition
        The condition itself is described in :ref:`NXenvironment`.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_geometry = NXgeometry()
        self.nxp_geometry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='geometry',
                )
        self.nxp_geometry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgeometry',
                )
        self.nxp_geometry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Defines the axes for logged vector quantities if they are not the global
                instrument axes''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-group',
                )
        self.nxp_geometry.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_value_log = NXlog()
        self.nxp_value_log.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value_log',
                )
        self.nxp_value_log.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_value_log.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Time history of sensor readings''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-group',
                )
        self.nxp_value_log.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_value_deriv1_log = NXlog()
        self.nxp_value_deriv1_log.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value_deriv1_log',
                )
        self.nxp_value_deriv1_log.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_value_deriv1_log.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Time history of first derivative of sensor readings''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-group',
                )
        self.nxp_value_deriv1_log.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_value_deriv2_log = NXlog()
        self.nxp_value_deriv2_log.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value_deriv2_log',
                )
        self.nxp_value_deriv2_log.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_value_deriv2_log.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Time history of second derivative of sensor readings''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-group',
                )
        self.nxp_value_deriv2_log.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_external_field_full = NXorientation()
        self.nxp_external_field_full.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='external_field_full',
                )
        self.nxp_external_field_full.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXorientation',
                )
        self.nxp_external_field_full.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                For complex external fields not satisfied by External_field_brief''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-group',
                )
        self.nxp_external_field_full.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_model = NX_CHAR()
        self.nxp_model.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='model',
                )
        self.nxp_model.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Sensor identification code/model number''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-field',
                )
        self.nxp_model.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_name = NX_CHAR()
        self.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Name for the sensor''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-field',
                )
        self.nxp_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_short_name = NX_CHAR()
        self.nxp_short_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='short_name',
                )
        self.nxp_short_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Short name of sensor used e.g. on monitor display program''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-field',
                )
        self.nxp_short_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_attached_to = NX_CHAR()
        self.nxp_attached_to.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='attached_to',
                )
        self.nxp_attached_to.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                where sensor is attached to ("sample" | "can")''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-field',
                )
        self.nxp_attached_to.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_measurement = NX_CHAR()
        self.nxp_measurement.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='measurement',
                )
        self.nxp_measurement.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                name for measured signal''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-field',
                )
        self.nxp_measurement.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_measurement.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='temperature,pH,magnetic_field,electric_field,conductivity,resistance,voltage,pressure,flow,stress,strain,shear,surface_pressure',
                )


        self.nxp_type = NX_CHAR()
        self.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The type of hardware used for the measurement.
                Examples (suggestions but not restrictions):
                :Temperature:                           J | K | T | E | R | S | Pt100 |
                Rh/Fe                         :pH:                           Hg/Hg2Cl2 |
                Ag/AgCl | ISFET                         :Ion selective electrode:
                specify species; e.g. Ca2+                         :Magnetic field:
                Hall                         :Surface pressure:
                wilhelmy plate''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-field',
                )
        self.nxp_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_run_control = NX_BOOLEAN()
        self.nxp_run_control.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='run_control',
                )
        self.nxp_run_control.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_BOOLEAN',
                )
        self.nxp_run_control.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Is data collection controlled or synchronised to this quantity:
                1=no, 0=to "value", 1=to "value_deriv1", etc.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-field',
                )
        self.nxp_run_control.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_high_trip_value = NX_FLOAT()
        self.nxp_high_trip_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='high_trip_value',
                )
        self.nxp_high_trip_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_high_trip_value.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_high_trip_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Upper control bound of sensor reading if using run_control''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-field',
                )
        self.nxp_high_trip_value.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_low_trip_value = NX_FLOAT()
        self.nxp_low_trip_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='low_trip_value',
                )
        self.nxp_low_trip_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_low_trip_value.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_low_trip_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Lower control bound of sensor reading if using run_control''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-field',
                )
        self.nxp_low_trip_value.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_value = NX_FLOAT()
        self.nxp_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value',
                )
        self.nxp_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_value.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                nominal setpoint or average value                          - need [n] as
                may be a vector''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-field',
                )
        self.nxp_value.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_value_deriv1 = NX_FLOAT()
        self.nxp_value_deriv1.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value_deriv1',
                )
        self.nxp_value_deriv1.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_value_deriv1.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_value_deriv1.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Nominal/average first derivative of value                          e.g.
                strain rate                          - same dimensions as "value" (may be
                a vector)''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-field',
                )
        self.nxp_value_deriv1.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_value_deriv2 = NX_FLOAT()
        self.nxp_value_deriv2.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value_deriv2',
                )
        self.nxp_value_deriv2.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_value_deriv2.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_value_deriv2.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Nominal/average second derivative of value                         - same
                dimensions as "value" (may be a vector)''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-field',
                )
        self.nxp_value_deriv2.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_external_field_brief = NX_CHAR()
        self.nxp_external_field_brief.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='external_field_brief',
                )
        self.nxp_external_field_brief.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-field',
                )
        self.nxp_external_field_brief.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_external_field_brief.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='along beam,across beam,transverse,solenoidal,flow shear gradient,flow vorticity',
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsensor.html#nxsensor-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXaperture(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXaperture',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            A beamline aperture.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_GEOMETRY = NXgeometry()
        self.nxp_GEOMETRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgeometry',
                )
        self.nxp_GEOMETRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                location and shape of aperture                          .. TODO:
                documentation needs improvement, contributions welcome
                * description of terms is poor and leaves much to interpretation
                * Describe what is meant by translation _here_ and ...                 *
                Similar throughout base classes                 * Some base classes do
                this much better                 * Such as where is the gap written?''',
                default='https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-group',
                )
        self.nxp_GEOMETRY.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_BLADE_GEOMETRY = NXgeometry()
        self.nxp_BLADE_GEOMETRY.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='BLADE_GEOMETRY',
                )
        self.nxp_BLADE_GEOMETRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgeometry',
                )
        self.nxp_BLADE_GEOMETRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                location and shape of each blade''',
                default='https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-group',
                )
        self.nxp_BLADE_GEOMETRY.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_NOTE = NXnote()
        self.nxp_NOTE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXnote',
                )
        self.nxp_NOTE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                describe any additional information in a note*''',
                default='https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-group',
                )
        self.nxp_NOTE.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_material = NX_CHAR()
        self.nxp_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='material',
                )
        self.nxp_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Absorbing material of the aperture''',
                default='https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-field',
                )
        self.nxp_material.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_description = NX_CHAR()
        self.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Description of aperture''',
                default='https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-field',
                )
        self.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXaperture.html#nxaperture-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXbending_magnet(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXbending_magnet',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            A bending magnet
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_spectrum = NXdata()
        self.nxp_spectrum.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='spectrum',
                )
        self.nxp_spectrum.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_spectrum.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                bending magnet spectrum''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-group',
                )
        self.nxp_spectrum.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_GEOMETRY = NXgeometry()
        self.nxp_GEOMETRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgeometry',
                )
        self.nxp_GEOMETRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                "Engineering" position of bending magnet''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-group',
                )
        self.nxp_GEOMETRY.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_critical_energy = NX_FLOAT()
        self.nxp_critical_energy.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='critical_energy',
                )
        self.nxp_critical_energy.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_critical_energy.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ENERGY',
                )
        self.nxp_critical_energy.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-field',
                )
        self.nxp_critical_energy.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_bending_radius = NX_FLOAT()
        self.nxp_bending_radius.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='bending_radius',
                )
        self.nxp_bending_radius.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_bending_radius.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_bending_radius.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-field',
                )
        self.nxp_bending_radius.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_magnetic_field = NX_FLOAT()
        self.nxp_magnetic_field.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='magnetic_field',
                )
        self.nxp_magnetic_field.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_magnetic_field.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CURRENT',
                )
        self.nxp_magnetic_field.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                strength of magnetic field of dipole magnets''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-field',
                )
        self.nxp_magnetic_field.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_accepted_photon_beam_divergence = NX_FLOAT()
        self.nxp_accepted_photon_beam_divergence.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='accepted_photon_beam_divergence',
                )
        self.nxp_accepted_photon_beam_divergence.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_accepted_photon_beam_divergence.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_accepted_photon_beam_divergence.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                An array of four numbers giving X+, X-, Y+ and Y- half divergence''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-field',
                )
        self.nxp_accepted_photon_beam_divergence.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_source_distance_x = NX_FLOAT()
        self.nxp_source_distance_x.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='source_distance_x',
                )
        self.nxp_source_distance_x.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_source_distance_x.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_source_distance_x.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Distance of source point from particle beam waist in X (horizontal)
                direction.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-field',
                )
        self.nxp_source_distance_x.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_source_distance_y = NX_FLOAT()
        self.nxp_source_distance_y.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='source_distance_y',
                )
        self.nxp_source_distance_y.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_source_distance_y.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_source_distance_y.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Distance of source point from particle beam waist in Y (vertical)
                direction.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-field',
                )
        self.nxp_source_distance_y.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_divergence_x_plus = NX_FLOAT()
        self.nxp_divergence_x_plus.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='divergence_x_plus',
                )
        self.nxp_divergence_x_plus.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_divergence_x_plus.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_divergence_x_plus.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Accepted photon beam divergence in X+ (horizontal outboard) direction.
                Note that divergence_x_plus+divergence_x_minus is the total horizontal
                beam divergence.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-field',
                )
        self.nxp_divergence_x_plus.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_divergence_x_minus = NX_FLOAT()
        self.nxp_divergence_x_minus.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='divergence_x_minus',
                )
        self.nxp_divergence_x_minus.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_divergence_x_minus.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_divergence_x_minus.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Accepted photon beam divergence in X- (horizontal inboard) direction.
                Note that divergence_x_plus+divergence_x_minus is the total horizontal
                beam divergence.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-field',
                )
        self.nxp_divergence_x_minus.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_divergence_y_plus = NX_FLOAT()
        self.nxp_divergence_y_plus.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='divergence_y_plus',
                )
        self.nxp_divergence_y_plus.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_divergence_y_plus.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_divergence_y_plus.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Accepted photon beam divergence in Y+ (vertical upward) direction.
                Note that divergence_y_plus+divergence_y_minus is the total vertical beam
                divergence.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-field',
                )
        self.nxp_divergence_y_plus.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_divergence_y_minus = NX_FLOAT()
        self.nxp_divergence_y_minus.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='divergence_y_minus',
                )
        self.nxp_divergence_y_minus.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_divergence_y_minus.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_divergence_y_minus.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Accepted photon beam divergence in Y- (vertical downward) direction.
                Note that divergence_y_plus+divergence_y_minus is the total vertical beam
                divergence.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-field',
                )
        self.nxp_divergence_y_minus.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                      Declares which child group
                contains a path leading            to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute           to help
                define the path to the default dataset to be plotted.           See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbending_magnet.html#nxbending-magnet-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXmonitor(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXmonitor',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    A monitor of incident beam data.                   It is similar to the
        :ref:`NXdata` groups containing         monitor data and its associated dimension
        scale, e.g. time_of_flight or         wavelength in pulsed neutron instruments.
        However, it may also include         integrals, or scalar monitor counts, which
        are often used in both in both         pulsed and steady-state instrumentation.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_integral_log = NXlog()
        self.nxp_integral_log.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='integral_log',
                )
        self.nxp_integral_log.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_integral_log.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Time variation of monitor counts''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-group',
                )
        self.nxp_integral_log.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_GEOMETRY = NXgeometry()
        self.nxp_GEOMETRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgeometry',
                )
        self.nxp_GEOMETRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Geometry of the monitor''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-group',
                )
        self.nxp_GEOMETRY.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_mode = NX_CHAR()
        self.nxp_mode.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='mode',
                )
        self.nxp_mode.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Count to a preset value based on either clock time (timer)             or
                received monitor counts (monitor).''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-field',
                )
        self.nxp_mode.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_mode.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='monitor,timer',
                )


        self.nxp_start_time = NX_DATE_TIME()
        self.nxp_start_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start_time',
                )
        self.nxp_start_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_start_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Starting time of measurement''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-field',
                )
        self.nxp_start_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_end_time = NX_DATE_TIME()
        self.nxp_end_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='end_time',
                )
        self.nxp_end_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_end_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Ending time of measurement''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-field',
                )
        self.nxp_end_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_preset = NX_NUMBER()
        self.nxp_preset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='preset',
                )
        self.nxp_preset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_preset.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_preset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                preset value for time or monitor''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-field',
                )
        self.nxp_preset.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_distance = NX_FLOAT()
        self.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Distance of monitor from sample''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-field',
                )
        self.nxp_distance.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_range = NX_FLOAT()
        self.nxp_range.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='range',
                )
        self.nxp_range.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_range.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_range.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Range (X-axis, Time-of-flight, etc.) over which the integral was
                calculated''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-field',
                )
        self.nxp_range.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_nominal = NX_NUMBER()
        self.nxp_nominal.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='nominal',
                )
        self.nxp_nominal.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_nominal.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_nominal.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Nominal reading to be used for normalisation purposes.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-field',
                )
        self.nxp_nominal.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_integral = NX_NUMBER()
        self.nxp_integral.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='integral',
                )
        self.nxp_integral.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_integral.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_integral.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Total integral monitor counts''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-field',
                )
        self.nxp_integral.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_type = NX_CHAR()
        self.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-field',
                )
        self.nxp_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_type.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='Fission Chamber,Scintillator',
                )


        self.nxp_time_of_flight = NX_FLOAT()
        self.nxp_time_of_flight.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='time_of_flight',
                )
        self.nxp_time_of_flight.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_time_of_flight.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME_OF_FLIGHT',
                )
        self.nxp_time_of_flight.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Time-of-flight''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-field',
                )
        self.nxp_time_of_flight.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_efficiency = NX_NUMBER()
        self.nxp_efficiency.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='efficiency',
                )
        self.nxp_efficiency.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_efficiency.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DIMENSIONLESS',
                )
        self.nxp_efficiency.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Monitor efficiency''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-field',
                )
        self.nxp_efficiency.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_data = NX_NUMBER()
        self.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_data.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Monitor data''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-field',
                )
        self.nxp_data.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_sampled_fraction = NX_FLOAT()
        self.nxp_sampled_fraction.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sampled_fraction',
                )
        self.nxp_sampled_fraction.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_sampled_fraction.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DIMENSIONLESS',
                )
        self.nxp_sampled_fraction.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Proportion of incident beam sampled by the monitor (0<x<1)''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-field',
                )
        self.nxp_sampled_fraction.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_count_time = NX_FLOAT()
        self.nxp_count_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='count_time',
                )
        self.nxp_count_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_count_time.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_count_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Elapsed actual counting time, can be an array of size ``np``
                when scanning. This is not the difference of the calendar time
                but the time the instrument was really counting, without
                pauses or times lost due beam unavailability''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-field',
                )
        self.nxp_count_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmonitor.html#nxmonitor-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXguide(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXguide',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    A neutron optical element to direct the path of the beam.
        :ref:`NXguide` is used by neutron instruments to describe         a guide consists
        of several mirrors building a shape through which          neutrons can be guided
        or directed. The simplest such form is box shaped         although elliptical
        guides are gaining in popularity.          The individual parts of a guide usually
        have common characteristics          but there are cases where they are different.
        For example,  a neutron guide might consist of 2 or 4 coated walls or         a
        supermirror bender with multiple, coated vanes.

        To describe polarizing supermirrors such as used in neutron reflection,         it
        may be necessary to revise this definition of :ref:`NXguide`         to include
        :ref:`NXpolarizer` and/or :ref:`NXmirror`.

        When even greater complexity exists in the definition of what         constitutes
        a *guide*,  it has been suggested that :ref:`NXguide`          be redefined as a
        :ref:`NXcollection` of :ref:`NXmirror` each          having their own
        :ref:`NXgeometry` describing their location(s).

        For the more general case when describing mirrors, consider using
        :ref:`NXmirror`.

        NOTE: The NeXus International Advisory Committee welcomes          comments for
        revision and improvement of          this definition of :ref:`NXguide`.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_GEOMETRY = NXgeometry()
        self.nxp_GEOMETRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgeometry',
                )
        self.nxp_GEOMETRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                TODO:  Explain what this NXgeometry group means.  What is intended here?''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-group',
                )
        self.nxp_GEOMETRY.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_reflectivity = NXdata()
        self.nxp_reflectivity.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_reflectivity.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='reflectivity',
                )
        self.nxp_reflectivity.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Reflectivity as function of reflecting surface and wavelength''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-group',
                )
        self.nxp_reflectivity.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_reflectivity.nxp_signal = NX_CHAR()
        self.nxp_reflectivity.nxp_signal.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='signal',
                )
        self.nxp_reflectivity.nxp_signal.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-attribute',
                )
        self.nxp_reflectivity.nxp_signal.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_reflectivity.nxp_signal.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )


        self.nxp_reflectivity.nxp_axes = NX_CHAR()
        self.nxp_reflectivity.nxp_axes.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='axes',
                )
        self.nxp_reflectivity.nxp_axes.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-attribute',
                )
        self.nxp_reflectivity.nxp_axes.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_reflectivity.nxp_axes.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='surface wavelength',
                )


        self.nxp_reflectivity.nxp_surface_indices = NX_CHAR()
        self.nxp_reflectivity.nxp_surface_indices.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='surface_indices',
                )
        self.nxp_reflectivity.nxp_surface_indices.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-attribute',
                )
        self.nxp_reflectivity.nxp_surface_indices.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_reflectivity.nxp_surface_indices.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )


        self.nxp_reflectivity.nxp_wavelength_indices = NX_CHAR()
        self.nxp_reflectivity.nxp_wavelength_indices.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='wavelength_indices',
                )
        self.nxp_reflectivity.nxp_wavelength_indices.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-attribute',
                )
        self.nxp_reflectivity.nxp_wavelength_indices.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_reflectivity.nxp_wavelength_indices.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )


        self.nxp_reflectivity.nxp_data = NX_NUMBER()
        self.nxp_reflectivity.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_reflectivity.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_reflectivity.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                reflectivity of each surface as a function of wavelength''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-field',
                )
        self.nxp_reflectivity.nxp_data.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_reflectivity.nxp_surface = NX_NUMBER()
        self.nxp_reflectivity.nxp_surface.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='surface',
                )
        self.nxp_reflectivity.nxp_surface.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_reflectivity.nxp_surface.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_reflectivity.nxp_surface.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                List of surfaces.  Probably best to use index                      numbers
                but the specification is very loose.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-field',
                )
        self.nxp_reflectivity.nxp_surface.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_reflectivity.nxp_wavelength = NX_NUMBER()
        self.nxp_reflectivity.nxp_wavelength.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='wavelength',
                )
        self.nxp_reflectivity.nxp_wavelength.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_reflectivity.nxp_wavelength.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVELENGTH',
                )
        self.nxp_reflectivity.nxp_wavelength.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                wavelengths at which reflectivity was measured''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-reflectivity-field',
                )
        self.nxp_reflectivity.nxp_wavelength.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_description = NX_CHAR()
        self.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                A description of this particular instance of ``NXguide``.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-field',
                )
        self.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_incident_angle = NX_FLOAT()
        self.nxp_incident_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='incident_angle',
                )
        self.nxp_incident_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_incident_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_incident_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                TODO: documentation needed''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-field',
                )
        self.nxp_incident_angle.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_bend_angle_x = NX_FLOAT()
        self.nxp_bend_angle_x.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='bend_angle_x',
                )
        self.nxp_bend_angle_x.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_bend_angle_x.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_bend_angle_x.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                TODO: documentation needed''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-field',
                )
        self.nxp_bend_angle_x.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_bend_angle_y = NX_FLOAT()
        self.nxp_bend_angle_y.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='bend_angle_y',
                )
        self.nxp_bend_angle_y.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_bend_angle_y.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_bend_angle_y.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                TODO: documentation needed''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-field',
                )
        self.nxp_bend_angle_y.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_interior_atmosphere = NX_CHAR()
        self.nxp_interior_atmosphere.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='interior_atmosphere',
                )
        self.nxp_interior_atmosphere.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-field',
                )
        self.nxp_interior_atmosphere.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_interior_atmosphere.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='vacuum,helium,argon',
                )


        self.nxp_external_material = NX_CHAR()
        self.nxp_external_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='external_material',
                )
        self.nxp_external_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                external material outside substrate''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-field',
                )
        self.nxp_external_material.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_m_value = NX_FLOAT()
        self.nxp_m_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='m_value',
                )
        self.nxp_m_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_m_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The ``m`` value for a supermirror, which defines the supermirror
                regime in multiples of the critical angle of Nickel.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-field',
                )
        self.nxp_m_value.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_substrate_material = NX_FLOAT()
        self.nxp_substrate_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='substrate_material',
                )
        self.nxp_substrate_material.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_substrate_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                TODO: documentation needed''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-field',
                )
        self.nxp_substrate_material.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_substrate_thickness = NX_FLOAT()
        self.nxp_substrate_thickness.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='substrate_thickness',
                )
        self.nxp_substrate_thickness.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_substrate_thickness.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_substrate_thickness.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                TODO: documentation needed''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-field',
                )
        self.nxp_substrate_thickness.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_coating_material = NX_FLOAT()
        self.nxp_coating_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='coating_material',
                )
        self.nxp_coating_material.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_coating_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                TODO: documentation needed''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-field',
                )
        self.nxp_coating_material.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_substrate_roughness = NX_FLOAT()
        self.nxp_substrate_roughness.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='substrate_roughness',
                )
        self.nxp_substrate_roughness.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_substrate_roughness.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_substrate_roughness.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                TODO: documentation needed''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-field',
                )
        self.nxp_substrate_roughness.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_coating_roughness = NX_FLOAT()
        self.nxp_coating_roughness.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='coating_roughness',
                )
        self.nxp_coating_roughness.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_coating_roughness.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_coating_roughness.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                TODO: documentation needed''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-field',
                )
        self.nxp_coating_roughness.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_number_sections = NX_INT()
        self.nxp_number_sections.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='number_sections',
                )
        self.nxp_number_sections.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_number_sections.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_number_sections.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                number of substrate sections (also called ``nsurf`` as an
                index in the ``NXguide`` specification)''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-field',
                )
        self.nxp_number_sections.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXguide.html#nxguide-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXmoderator(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXmoderator',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            A neutron moderator
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_GEOMETRY = NXgeometry()
        self.nxp_GEOMETRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgeometry',
                )
        self.nxp_GEOMETRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                "Engineering" position of moderator''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-group',
                )
        self.nxp_GEOMETRY.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_temperature_log = NXlog()
        self.nxp_temperature_log.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_temperature_log.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='temperature_log',
                )
        self.nxp_temperature_log.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                log file of moderator temperature''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-group',
                )
        self.nxp_temperature_log.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_pulse_shape = NXdata()
        self.nxp_pulse_shape.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_pulse_shape.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='pulse_shape',
                )
        self.nxp_pulse_shape.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                moderator pulse shape''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-group',
                )
        self.nxp_pulse_shape.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_distance = NX_FLOAT()
        self.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Effective distance as seen by measuring radiation''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-field',
                )
        self.nxp_distance.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_type = NX_CHAR()
        self.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-field',
                )
        self.nxp_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_type.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='H20,D20,Liquid H2,Liquid CH4,Liquid D2,Solid D2,C,Solid CH4,Solid H2',
                )


        self.nxp_poison_depth = NX_FLOAT()
        self.nxp_poison_depth.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='poison_depth',
                )
        self.nxp_poison_depth.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_poison_depth.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_poison_depth.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-field',
                )
        self.nxp_poison_depth.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_coupled = NX_BOOLEAN()
        self.nxp_coupled.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='coupled',
                )
        self.nxp_coupled.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_BOOLEAN',
                )
        self.nxp_coupled.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                whether the moderator is coupled''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-field',
                )
        self.nxp_coupled.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_coupling_material = NX_CHAR()
        self.nxp_coupling_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='coupling_material',
                )
        self.nxp_coupling_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The material used for coupling. Usually Cd.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-field',
                )
        self.nxp_coupling_material.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_poison_material = NX_CHAR()
        self.nxp_poison_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='poison_material',
                )
        self.nxp_poison_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-field',
                )
        self.nxp_poison_material.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_poison_material.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='Gd,Cd',
                )


        self.nxp_temperature = NX_FLOAT()
        self.nxp_temperature.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='temperature',
                )
        self.nxp_temperature.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_temperature.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TEMPERATURE',
                )
        self.nxp_temperature.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                average/nominal moderator temperature''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-field',
                )
        self.nxp_temperature.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmoderator.html#nxmoderator-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXbeam_stop(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXbeam_stop',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    A device that blocks the beam completely, usually to protect a detector.
        Beamstops and their positions are important for SANS         and SAXS experiments.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_GEOMETRY = NXgeometry()
        self.nxp_GEOMETRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgeometry',
                )
        self.nxp_GEOMETRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                engineering shape, orientation and position of the beam stop.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-group',
                )
        self.nxp_GEOMETRY.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_description = NX_CHAR()
        self.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                description of beamstop''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-field',
                )
        self.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_description.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='circular,rectangular',
                )


        self.nxp_size = NX_FLOAT()
        self.nxp_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='size',
                )
        self.nxp_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                size of beamstop''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-field',
                )
        self.nxp_size.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_x = NX_FLOAT()
        self.nxp_x.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x',
                )
        self.nxp_x.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_x.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_x.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                x position of the beamstop in relation to the detector''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-field',
                )
        self.nxp_x.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_y = NX_FLOAT()
        self.nxp_y.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='y',
                )
        self.nxp_y.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_y.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_y.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                y position of the beamstop in relation to the detector''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-field',
                )
        self.nxp_y.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_distance_to_detector = NX_FLOAT()
        self.nxp_distance_to_detector.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance_to_detector',
                )
        self.nxp_distance_to_detector.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_distance_to_detector.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_distance_to_detector.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                distance of the beamstop to the detector''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-field',
                )
        self.nxp_distance_to_detector.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_status = NX_CHAR()
        self.nxp_status.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='status',
                )
        self.nxp_status.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-field',
                )
        self.nxp_status.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_status.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='in,out',
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXbeam_stop.html#nxbeam-stop-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXmirror(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXmirror',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            A beamline mirror or supermirror.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_GEOMETRY = NXgeometry()
        self.nxp_GEOMETRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgeometry',
                )
        self.nxp_GEOMETRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-group',
                )
        self.nxp_GEOMETRY.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_reflectivity = NXdata()
        self.nxp_reflectivity.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_reflectivity.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='reflectivity',
                )
        self.nxp_reflectivity.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Reflectivity as function of wavelength''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-group',
                )
        self.nxp_reflectivity.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_shape = NXshape()
        self.nxp_shape.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXshape',
                )
        self.nxp_shape.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='shape',
                )
        self.nxp_shape.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                A NXshape group describing the shape of the mirror''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-group',
                )
        self.nxp_shape.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_figure_data = NXdata()
        self.nxp_figure_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='figure_data',
                )
        self.nxp_figure_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_figure_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Numerical description of the surface figure of the mirror.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-group',
                )
        self.nxp_figure_data.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_type = NX_CHAR()
        self.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-field',
                )
        self.nxp_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_type.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='single,multi',
                )


        self.nxp_description = NX_CHAR()
        self.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                description of this mirror''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-field',
                )
        self.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_incident_angle = NX_FLOAT()
        self.nxp_incident_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='incident_angle',
                )
        self.nxp_incident_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_incident_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_incident_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-field',
                )
        self.nxp_incident_angle.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_bend_angle_x = NX_FLOAT()
        self.nxp_bend_angle_x.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='bend_angle_x',
                )
        self.nxp_bend_angle_x.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_bend_angle_x.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_bend_angle_x.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-field',
                )
        self.nxp_bend_angle_x.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_bend_angle_y = NX_FLOAT()
        self.nxp_bend_angle_y.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='bend_angle_y',
                )
        self.nxp_bend_angle_y.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_bend_angle_y.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_bend_angle_y.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-field',
                )
        self.nxp_bend_angle_y.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_interior_atmosphere = NX_CHAR()
        self.nxp_interior_atmosphere.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='interior_atmosphere',
                )
        self.nxp_interior_atmosphere.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-field',
                )
        self.nxp_interior_atmosphere.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_interior_atmosphere.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='vacuum,helium,argon',
                )


        self.nxp_external_material = NX_CHAR()
        self.nxp_external_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='external_material',
                )
        self.nxp_external_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                external material outside substrate''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-field',
                )
        self.nxp_external_material.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_m_value = NX_FLOAT()
        self.nxp_m_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='m_value',
                )
        self.nxp_m_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_m_value.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_m_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The m value for a supermirror, which defines the supermirror
                regime in multiples of the critical angle of Nickel.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-field',
                )
        self.nxp_m_value.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_substrate_material = NX_CHAR()
        self.nxp_substrate_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='substrate_material',
                )
        self.nxp_substrate_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-field',
                )
        self.nxp_substrate_material.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_substrate_density = NX_FLOAT()
        self.nxp_substrate_density.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='substrate_density',
                )
        self.nxp_substrate_density.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_substrate_density.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_MASS_DENSITY',
                )
        self.nxp_substrate_density.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-field',
                )
        self.nxp_substrate_density.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_substrate_thickness = NX_FLOAT()
        self.nxp_substrate_thickness.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='substrate_thickness',
                )
        self.nxp_substrate_thickness.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_substrate_thickness.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_substrate_thickness.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-field',
                )
        self.nxp_substrate_thickness.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_coating_material = NX_CHAR()
        self.nxp_coating_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='coating_material',
                )
        self.nxp_coating_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-field',
                )
        self.nxp_coating_material.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_substrate_roughness = NX_FLOAT()
        self.nxp_substrate_roughness.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='substrate_roughness',
                )
        self.nxp_substrate_roughness.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_substrate_roughness.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_substrate_roughness.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-field',
                )
        self.nxp_substrate_roughness.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_coating_roughness = NX_FLOAT()
        self.nxp_coating_roughness.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='coating_roughness',
                )
        self.nxp_coating_roughness.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_coating_roughness.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_coating_roughness.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-field',
                )
        self.nxp_coating_roughness.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_even_layer_material = NX_CHAR()
        self.nxp_even_layer_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='even_layer_material',
                )
        self.nxp_even_layer_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-field',
                )
        self.nxp_even_layer_material.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_even_layer_density = NX_FLOAT()
        self.nxp_even_layer_density.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='even_layer_density',
                )
        self.nxp_even_layer_density.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_even_layer_density.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_MASS_DENSITY',
                )
        self.nxp_even_layer_density.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-field',
                )
        self.nxp_even_layer_density.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_odd_layer_material = NX_CHAR()
        self.nxp_odd_layer_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='odd_layer_material',
                )
        self.nxp_odd_layer_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-field',
                )
        self.nxp_odd_layer_material.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_odd_layer_density = NX_FLOAT()
        self.nxp_odd_layer_density.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='odd_layer_density',
                )
        self.nxp_odd_layer_density.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_odd_layer_density.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_MASS_DENSITY',
                )
        self.nxp_odd_layer_density.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-field',
                )
        self.nxp_odd_layer_density.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_layer_thickness = NX_FLOAT()
        self.nxp_layer_thickness.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='layer_thickness',
                )
        self.nxp_layer_thickness.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_layer_thickness.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_layer_thickness.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                An array describing the thickness of each layer''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-field',
                )
        self.nxp_layer_thickness.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmirror.html#nxmirror-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXvelocity_selector(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXvelocity_selector',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            A neutron velocity selector
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_geometry = NXgeometry()
        self.nxp_geometry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgeometry',
                )
        self.nxp_geometry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='geometry',
                )
        self.nxp_geometry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-group',
                )
        self.nxp_geometry.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_type = NX_CHAR()
        self.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                velocity selector type''',
                default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-field',
                )
        self.nxp_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_rotation_speed = NX_FLOAT()
        self.nxp_rotation_speed.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='rotation_speed',
                )
        self.nxp_rotation_speed.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_rotation_speed.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FREQUENCY',
                )
        self.nxp_rotation_speed.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                velocity selector rotation speed''',
                default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-field',
                )
        self.nxp_rotation_speed.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_radius = NX_FLOAT()
        self.nxp_radius.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='radius',
                )
        self.nxp_radius.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_radius.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_radius.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                radius at beam centre''',
                default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-field',
                )
        self.nxp_radius.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_spwidth = NX_FLOAT()
        self.nxp_spwidth.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='spwidth',
                )
        self.nxp_spwidth.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_spwidth.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_spwidth.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                spoke width at beam centre''',
                default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-field',
                )
        self.nxp_spwidth.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_length = NX_FLOAT()
        self.nxp_length.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='length',
                )
        self.nxp_length.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_length.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_length.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                rotor length''',
                default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-field',
                )
        self.nxp_length.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_num = NX_INT()
        self.nxp_num.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='num',
                )
        self.nxp_num.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_num.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_num.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                number of spokes/lamella''',
                default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-field',
                )
        self.nxp_num.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_twist = NX_FLOAT()
        self.nxp_twist.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='twist',
                )
        self.nxp_twist.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_twist.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_twist.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                twist angle along axis''',
                default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-field',
                )
        self.nxp_twist.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_table = NX_FLOAT()
        self.nxp_table.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='table',
                )
        self.nxp_table.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_table.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_table.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                offset vertical angle''',
                default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-field',
                )
        self.nxp_table.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_height = NX_FLOAT()
        self.nxp_height.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='height',
                )
        self.nxp_height.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_height.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_height.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                input beam height''',
                default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-field',
                )
        self.nxp_height.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_width = NX_FLOAT()
        self.nxp_width.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='width',
                )
        self.nxp_width.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_width.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_width.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                input beam width''',
                default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-field',
                )
        self.nxp_width.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_wavelength = NX_FLOAT()
        self.nxp_wavelength.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='wavelength',
                )
        self.nxp_wavelength.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_wavelength.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVELENGTH',
                )
        self.nxp_wavelength.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                wavelength''',
                default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-field',
                )
        self.nxp_wavelength.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_wavelength_spread = NX_FLOAT()
        self.nxp_wavelength_spread.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='wavelength_spread',
                )
        self.nxp_wavelength_spread.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_wavelength_spread.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVELENGTH',
                )
        self.nxp_wavelength_spread.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                deviation FWHM /Wavelength''',
                default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-field',
                )
        self.nxp_wavelength_spread.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXvelocity_selector.html#nxvelocity-selector-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXsource(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXsource',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            The neutron or x-ray storage ring/facility.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_notes = NXnote()
        self.nxp_notes.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='notes',
                )
        self.nxp_notes.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXnote',
                )
        self.nxp_notes.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                any source/facility related messages/events that
                occurred during the experiment''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-group',
                )
        self.nxp_notes.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_bunch_pattern = NXdata()
        self.nxp_bunch_pattern.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='bunch_pattern',
                )
        self.nxp_bunch_pattern.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_bunch_pattern.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                For storage rings, description of the bunch pattern.
                This is useful to describe irregular bunch patterns.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-group',
                )
        self.nxp_bunch_pattern.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_bunch_pattern.nxp_title = NX_CHAR()
        self.nxp_bunch_pattern.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_bunch_pattern.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                name of the bunch pattern''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-bunch-pattern-field',
                )
        self.nxp_bunch_pattern.nxp_title.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_pulse_shape = NXdata()
        self.nxp_pulse_shape.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='pulse_shape',
                )
        self.nxp_pulse_shape.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_pulse_shape.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                source pulse shape''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-group',
                )
        self.nxp_pulse_shape.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_geometry = NXgeometry()
        self.nxp_geometry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='geometry',
                )
        self.nxp_geometry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgeometry',
                )
        self.nxp_geometry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                "Engineering" location of source''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-group',
                )
        self.nxp_geometry.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_distribution = NXdata()
        self.nxp_distribution.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_distribution.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distribution',
                )
        self.nxp_distribution.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The wavelength or energy distribution of the source''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-group',
                )
        self.nxp_distribution.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_distance = NX_FLOAT()
        self.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Effective distance from sample                         Distance as seen by
                radiation from sample. This number should be negative
                to signify that it is upstream of the sample.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-field',
                )
        self.nxp_distance.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_name = NX_CHAR()
        self.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Name of source''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-field',
                )
        self.nxp_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_name.nxp_short_name = NX_CHAR()
        self.nxp_name.nxp_short_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='short_name',
                )
        self.nxp_name.nxp_short_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                short name for source, perhaps the acronym''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-name-attribute',
                )
        self.nxp_name.nxp_short_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_type = NX_CHAR()
        self.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                type of radiation source (pick one from the enumerated list and spell
                exactly)''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-field',
                )
        self.nxp_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_type.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='Spallation Neutron Source,Pulsed Reactor Neutron Source,Reactor Neutron Source,Synchrotron X-ray Source,Pulsed Muon Source,Rotating Anode X-ray,Fixed Tube X-ray,UV Laser,Free-Electron Laser,Optical Laser,Ion Source,UV Plasma Source,Metal Jet X-ray',
                )


        self.nxp_probe = NX_CHAR()
        self.nxp_probe.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='probe',
                )
        self.nxp_probe.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                type of radiation probe (pick one from the enumerated list and spell
                exactly)''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-field',
                )
        self.nxp_probe.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_probe.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='neutron,x-ray,muon,electron,ultraviolet,visible light,positron,proton',
                )


        self.nxp_power = NX_FLOAT()
        self.nxp_power.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='power',
                )
        self.nxp_power.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_power.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_POWER',
                )
        self.nxp_power.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Source power''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-field',
                )
        self.nxp_power.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_emittance_x = NX_FLOAT()
        self.nxp_emittance_x.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='emittance_x',
                )
        self.nxp_emittance_x.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_emittance_x.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_EMITTANCE',
                )
        self.nxp_emittance_x.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Source emittance (nm-rad) in X (horizontal) direction.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-field',
                )
        self.nxp_emittance_x.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_emittance_y = NX_FLOAT()
        self.nxp_emittance_y.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='emittance_y',
                )
        self.nxp_emittance_y.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_emittance_y.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_EMITTANCE',
                )
        self.nxp_emittance_y.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Source emittance (nm-rad) in Y (horizontal) direction.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-field',
                )
        self.nxp_emittance_y.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_sigma_x = NX_FLOAT()
        self.nxp_sigma_x.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sigma_x',
                )
        self.nxp_sigma_x.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_sigma_x.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_sigma_x.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                particle beam size in x''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-field',
                )
        self.nxp_sigma_x.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_sigma_y = NX_FLOAT()
        self.nxp_sigma_y.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sigma_y',
                )
        self.nxp_sigma_y.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_sigma_y.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_sigma_y.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                particle beam size in y''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-field',
                )
        self.nxp_sigma_y.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_flux = NX_FLOAT()
        self.nxp_flux.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='flux',
                )
        self.nxp_flux.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_flux.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLUX',
                )
        self.nxp_flux.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Source intensity/area (example: s-1 cm-2)''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-field',
                )
        self.nxp_flux.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_energy = NX_FLOAT()
        self.nxp_energy.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='energy',
                )
        self.nxp_energy.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_energy.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ENERGY',
                )
        self.nxp_energy.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Source energy.                           For storage rings, this would be
                the particle beam energy.                         For X-ray tubes, this
                would be the excitation voltage.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-field',
                )
        self.nxp_energy.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_current = NX_FLOAT()
        self.nxp_current.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='current',
                )
        self.nxp_current.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_current.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CURRENT',
                )
        self.nxp_current.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Accelerator, X-ray tube, or storage ring current''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-field',
                )
        self.nxp_current.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_voltage = NX_FLOAT()
        self.nxp_voltage.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='voltage',
                )
        self.nxp_voltage.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_voltage.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_VOLTAGE',
                )
        self.nxp_voltage.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Accelerator voltage''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-field',
                )
        self.nxp_voltage.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_frequency = NX_FLOAT()
        self.nxp_frequency.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='frequency',
                )
        self.nxp_frequency.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_frequency.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FREQUENCY',
                )
        self.nxp_frequency.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Frequency of pulsed source''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-field',
                )
        self.nxp_frequency.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_period = NX_FLOAT()
        self.nxp_period.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='period',
                )
        self.nxp_period.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_period.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_PERIOD',
                )
        self.nxp_period.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Period of pulsed source''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-field',
                )
        self.nxp_period.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_target_material = NX_CHAR()
        self.nxp_target_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='target_material',
                )
        self.nxp_target_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Pulsed source target material''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-field',
                )
        self.nxp_target_material.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_target_material.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='Ta,W,depleted_U,enriched_U,Hg,Pb,C',
                )


        self.nxp_number_of_bunches = NX_INT()
        self.nxp_number_of_bunches.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='number_of_bunches',
                )
        self.nxp_number_of_bunches.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_number_of_bunches.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                For storage rings, the number of bunches in use.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-field',
                )
        self.nxp_number_of_bunches.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_bunch_length = NX_FLOAT()
        self.nxp_bunch_length.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='bunch_length',
                )
        self.nxp_bunch_length.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_bunch_length.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_bunch_length.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                For storage rings, temporal length of the bunch''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-field',
                )
        self.nxp_bunch_length.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_bunch_distance = NX_FLOAT()
        self.nxp_bunch_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='bunch_distance',
                )
        self.nxp_bunch_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_bunch_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_bunch_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                For storage rings, time between bunches''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-field',
                )
        self.nxp_bunch_distance.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_pulse_width = NX_FLOAT()
        self.nxp_pulse_width.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='pulse_width',
                )
        self.nxp_pulse_width.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_pulse_width.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_pulse_width.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                temporal width of source pulse''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-field',
                )
        self.nxp_pulse_width.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_mode = NX_CHAR()
        self.nxp_mode.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='mode',
                )
        self.nxp_mode.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                source operating mode''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-field',
                )
        self.nxp_mode.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_mode.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='Single Bunch,Multi Bunch',
                )


        self.nxp_top_up = NX_BOOLEAN()
        self.nxp_top_up.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='top_up',
                )
        self.nxp_top_up.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_BOOLEAN',
                )
        self.nxp_top_up.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Is the synchrotron operating in top_up mode?''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-field',
                )
        self.nxp_top_up.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_last_fill = NX_NUMBER()
        self.nxp_last_fill.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='last_fill',
                )
        self.nxp_last_fill.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_last_fill.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CURRENT',
                )
        self.nxp_last_fill.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                For storage rings, the current at the end of the most recent injection.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-field',
                )
        self.nxp_last_fill.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_last_fill.nxp_time = NX_DATE_TIME()
        self.nxp_last_fill.nxp_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='time',
                )
        self.nxp_last_fill.nxp_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_last_fill.nxp_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                date and time of the most recent injection.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-last-fill-attribute',
                )
        self.nxp_last_fill.nxp_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsource.html#nxsource-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXdetector(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXdetector',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    A detector, detector bank, or multidetector.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_GEOMETRY = NXgeometry()
        self.nxp_GEOMETRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgeometry',
                )
        self.nxp_GEOMETRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Position and orientation of detector''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-group',
                )
        self.nxp_GEOMETRY.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_efficiency = NXdata()
        self.nxp_efficiency.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='efficiency',
                )
        self.nxp_efficiency.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_efficiency.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Spectral efficiency of detector with respect to e.g. wavelength''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-group',
                )
        self.nxp_efficiency.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_efficiency.nxp_signal = NX_CHAR()
        self.nxp_efficiency.nxp_signal.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='signal',
                )
        self.nxp_efficiency.nxp_signal.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-efficiency-attribute',
                )
        self.nxp_efficiency.nxp_signal.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_efficiency.nxp_signal.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='efficiency',
                )


        self.nxp_efficiency.nxp_axes = NX_CHAR()
        self.nxp_efficiency.nxp_axes.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='axes',
                )
        self.nxp_efficiency.nxp_axes.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-efficiency-attribute',
                )
        self.nxp_efficiency.nxp_axes.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_efficiency.nxp_axes.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='.,. .,. . .,. . . .,wavelength',
                )


        self.nxp_efficiency.nxp_wavelength_indices = NX_CHAR()
        self.nxp_efficiency.nxp_wavelength_indices.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='wavelength_indices',
                )
        self.nxp_efficiency.nxp_wavelength_indices.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-efficiency-attribute',
                )
        self.nxp_efficiency.nxp_wavelength_indices.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_efficiency.nxp_wavelength_indices.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )


        self.nxp_efficiency.nxp_efficiency = NX_FLOAT()
        self.nxp_efficiency.nxp_efficiency.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='efficiency',
                )
        self.nxp_efficiency.nxp_efficiency.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_efficiency.nxp_efficiency.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DIMENSIONLESS',
                )
        self.nxp_efficiency.nxp_efficiency.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                efficiency of the detector''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-efficiency-field',
                )
        self.nxp_efficiency.nxp_efficiency.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_efficiency.nxp_wavelength = NX_FLOAT()
        self.nxp_efficiency.nxp_wavelength.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='wavelength',
                )
        self.nxp_efficiency.nxp_wavelength.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_efficiency.nxp_wavelength.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVELENGTH',
                )
        self.nxp_efficiency.nxp_wavelength.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This field can be two things:

                #. For a pixel detector it provides the nominal wavelength            for
                which the detector has been calibrated.

                #. For other detectors this field has to be seen together with
                the efficiency field above.            For some detectors, the efficiency
                is wavelength dependent.            Thus this field provides the
                wavelength axis for the efficiency field.            In this use case, the
                efficiency and wavelength arrays must            have the same
                dimensionality.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-efficiency-field',
                )
        self.nxp_efficiency.nxp_wavelength.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_calibration_method = NXnote()
        self.nxp_calibration_method.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='calibration_method',
                )
        self.nxp_calibration_method.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXnote',
                )
        self.nxp_calibration_method.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                summary of conversion of array data to pixels (e.g. polynomial
                approximations) and location of details of the calibrations''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-group',
                )
        self.nxp_calibration_method.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_data_file = NXnote()
        self.nxp_data_file.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data_file',
                )
        self.nxp_data_file.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXnote',
                )
        self.nxp_data_file.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-group',
                )
        self.nxp_data_file.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_COLLECTION = NXcollection()
        self.nxp_COLLECTION.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcollection',
                )
        self.nxp_COLLECTION.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Use this group to provide other data related to this NXdetector group.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-group',
                )
        self.nxp_COLLECTION.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_DETECTOR_MODULE = NXdetector_module()
        self.nxp_DETECTOR_MODULE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector_module',
                )
        self.nxp_DETECTOR_MODULE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                For use in special cases where the data in NXdetector       is represented
                in several parts, each with a separate geometry.

                Use one or more instances of the NXdetector_module       group to declare
                regions of interest or some other       subdivision of a detector.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-group',
                )
        self.nxp_DETECTOR_MODULE.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_time_of_flight = NX_FLOAT()
        self.nxp_time_of_flight.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='time_of_flight',
                )
        self.nxp_time_of_flight.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_time_of_flight.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME_OF_FLIGHT',
                )
        self.nxp_time_of_flight.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Total time of flight''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_time_of_flight.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_time_of_flight.nxp_axis = NX_POSINT()
        self.nxp_time_of_flight.nxp_axis.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='axis',
                )
        self.nxp_time_of_flight.nxp_axis.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_POSINT',
                )
        self.nxp_time_of_flight.nxp_axis.nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='see: https://github.com/nexusformat/definitions/issues/436',
                )
        self.nxp_time_of_flight.nxp_axis.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-time-of-flight-attribute',
                )
        self.nxp_time_of_flight.nxp_axis.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_time_of_flight.nxp_axis.nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_time_of_flight.nxp_axis.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='3',
                )


        self.nxp_time_of_flight.nxp_primary = NX_POSINT()
        self.nxp_time_of_flight.nxp_primary.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='primary',
                )
        self.nxp_time_of_flight.nxp_primary.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_POSINT',
                )
        self.nxp_time_of_flight.nxp_primary.nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='see: https://github.com/nexusformat/definitions/issues/436',
                )
        self.nxp_time_of_flight.nxp_primary.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-time-of-flight-attribute',
                )
        self.nxp_time_of_flight.nxp_primary.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_time_of_flight.nxp_primary.nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_time_of_flight.nxp_primary.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )


        self.nxp_time_of_flight.nxp_long_name = NX_CHAR()
        self.nxp_time_of_flight.nxp_long_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='long_name',
                )
        self.nxp_time_of_flight.nxp_long_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Total time of flight''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-time-of-flight-attribute',
                )
        self.nxp_time_of_flight.nxp_long_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_raw_time_of_flight = NX_INT()
        self.nxp_raw_time_of_flight.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='raw_time_of_flight',
                )
        self.nxp_raw_time_of_flight.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_raw_time_of_flight.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_PULSES',
                )
        self.nxp_raw_time_of_flight.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                In DAQ clock pulses''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_raw_time_of_flight.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_raw_time_of_flight.nxp_frequency = NX_NUMBER()
        self.nxp_raw_time_of_flight.nxp_frequency.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='frequency',
                )
        self.nxp_raw_time_of_flight.nxp_frequency.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_raw_time_of_flight.nxp_frequency.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Clock frequency in Hz''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-raw-time-of-flight-attribute',
                )
        self.nxp_raw_time_of_flight.nxp_frequency.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_detector_number = NX_INT()
        self.nxp_detector_number.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='detector_number',
                )
        self.nxp_detector_number.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_detector_number.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Identifier for detector (pixels)         Can be multidimensional, if
                needed''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_detector_number.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_data = NX_NUMBER()
        self.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_data.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Data values from the detector.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_data.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_data.nxp_long_name = NX_CHAR()
        self.nxp_data.nxp_long_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='long_name',
                )
        self.nxp_data.nxp_long_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Title of measurement''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-data-attribute',
                )
        self.nxp_data.nxp_long_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_data.nxp_check_sum = NX_INT()
        self.nxp_data.nxp_check_sum.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='check_sum',
                )
        self.nxp_data.nxp_check_sum.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_data.nxp_check_sum.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Integral of data as check of data integrity''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-data-attribute',
                )
        self.nxp_data.nxp_check_sum.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_data_errors = NX_NUMBER()
        self.nxp_data_errors.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data_errors',
                )
        self.nxp_data_errors.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_data_errors.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_data_errors.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The best estimate of the uncertainty in the data value. Where
                possible, this should be the standard deviation, which has the same units
                as the data. The form data_error is deprecated.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_data_errors.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_x_pixel_offset = NX_FLOAT()
        self.nxp_x_pixel_offset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x_pixel_offset',
                )
        self.nxp_x_pixel_offset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_x_pixel_offset.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_x_pixel_offset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Offset from the detector center in x-direction.   Can be multidimensional
                when needed.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_x_pixel_offset.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_x_pixel_offset.nxp_axis = NX_POSINT()
        self.nxp_x_pixel_offset.nxp_axis.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='axis',
                )
        self.nxp_x_pixel_offset.nxp_axis.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_POSINT',
                )
        self.nxp_x_pixel_offset.nxp_axis.nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='see: https://github.com/nexusformat/definitions/issues/436',
                )
        self.nxp_x_pixel_offset.nxp_axis.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-x-pixel-offset-attribute',
                )
        self.nxp_x_pixel_offset.nxp_axis.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_x_pixel_offset.nxp_axis.nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_x_pixel_offset.nxp_axis.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )


        self.nxp_x_pixel_offset.nxp_primary = NX_POSINT()
        self.nxp_x_pixel_offset.nxp_primary.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='primary',
                )
        self.nxp_x_pixel_offset.nxp_primary.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_POSINT',
                )
        self.nxp_x_pixel_offset.nxp_primary.nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='see: https://github.com/nexusformat/definitions/issues/436',
                )
        self.nxp_x_pixel_offset.nxp_primary.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-x-pixel-offset-attribute',
                )
        self.nxp_x_pixel_offset.nxp_primary.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_x_pixel_offset.nxp_primary.nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_x_pixel_offset.nxp_primary.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )


        self.nxp_x_pixel_offset.nxp_long_name = NX_CHAR()
        self.nxp_x_pixel_offset.nxp_long_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='long_name',
                )
        self.nxp_x_pixel_offset.nxp_long_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                x-axis offset from detector center''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-x-pixel-offset-attribute',
                )
        self.nxp_x_pixel_offset.nxp_long_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_y_pixel_offset = NX_FLOAT()
        self.nxp_y_pixel_offset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='y_pixel_offset',
                )
        self.nxp_y_pixel_offset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_y_pixel_offset.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_y_pixel_offset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Offset from the detector center in the y-direction.   Can be
                multidimensional when different values are required for each pixel.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_y_pixel_offset.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_y_pixel_offset.nxp_axis = NX_POSINT()
        self.nxp_y_pixel_offset.nxp_axis.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='axis',
                )
        self.nxp_y_pixel_offset.nxp_axis.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_POSINT',
                )
        self.nxp_y_pixel_offset.nxp_axis.nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='see: https://github.com/nexusformat/definitions/issues/436',
                )
        self.nxp_y_pixel_offset.nxp_axis.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-y-pixel-offset-attribute',
                )
        self.nxp_y_pixel_offset.nxp_axis.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_y_pixel_offset.nxp_axis.nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_y_pixel_offset.nxp_axis.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='2',
                )


        self.nxp_y_pixel_offset.nxp_primary = NX_POSINT()
        self.nxp_y_pixel_offset.nxp_primary.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='primary',
                )
        self.nxp_y_pixel_offset.nxp_primary.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_POSINT',
                )
        self.nxp_y_pixel_offset.nxp_primary.nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='see: https://github.com/nexusformat/definitions/issues/436',
                )
        self.nxp_y_pixel_offset.nxp_primary.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-y-pixel-offset-attribute',
                )
        self.nxp_y_pixel_offset.nxp_primary.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_y_pixel_offset.nxp_primary.nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_y_pixel_offset.nxp_primary.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )


        self.nxp_y_pixel_offset.nxp_long_name = NX_CHAR()
        self.nxp_y_pixel_offset.nxp_long_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='long_name',
                )
        self.nxp_y_pixel_offset.nxp_long_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                y-axis offset from detector center''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-y-pixel-offset-attribute',
                )
        self.nxp_y_pixel_offset.nxp_long_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_z_pixel_offset = NX_FLOAT()
        self.nxp_z_pixel_offset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='z_pixel_offset',
                )
        self.nxp_z_pixel_offset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_z_pixel_offset.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_z_pixel_offset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Offset from the detector center in the z-direction.         Can be
                multidimensional when different values are required for each pixel.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_z_pixel_offset.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_z_pixel_offset.nxp_axis = NX_POSINT()
        self.nxp_z_pixel_offset.nxp_axis.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='axis',
                )
        self.nxp_z_pixel_offset.nxp_axis.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_POSINT',
                )
        self.nxp_z_pixel_offset.nxp_axis.nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='see: https://github.com/nexusformat/definitions/issues/436',
                )
        self.nxp_z_pixel_offset.nxp_axis.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-z-pixel-offset-attribute',
                )
        self.nxp_z_pixel_offset.nxp_axis.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_z_pixel_offset.nxp_axis.nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_z_pixel_offset.nxp_axis.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='3',
                )


        self.nxp_z_pixel_offset.nxp_primary = NX_POSINT()
        self.nxp_z_pixel_offset.nxp_primary.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='primary',
                )
        self.nxp_z_pixel_offset.nxp_primary.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_POSINT',
                )
        self.nxp_z_pixel_offset.nxp_primary.nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='see: https://github.com/nexusformat/definitions/issues/436',
                )
        self.nxp_z_pixel_offset.nxp_primary.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-z-pixel-offset-attribute',
                )
        self.nxp_z_pixel_offset.nxp_primary.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_z_pixel_offset.nxp_primary.nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_z_pixel_offset.nxp_primary.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )


        self.nxp_z_pixel_offset.nxp_long_name = NX_CHAR()
        self.nxp_z_pixel_offset.nxp_long_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='long_name',
                )
        self.nxp_z_pixel_offset.nxp_long_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                y-axis offset from detector center''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-z-pixel-offset-attribute',
                )
        self.nxp_z_pixel_offset.nxp_long_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_distance = NX_FLOAT()
        self.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is the distance to the previous component in the       instrument;
                most often the sample. The usage depends on the       nature of the
                detector: Most often it is the distance of the       detector assembly.
                But there are irregular detectors. In this       case the distance must be
                specified for each detector pixel.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_distance.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_polar_angle = NX_FLOAT()
        self.nxp_polar_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='polar_angle',
                )
        self.nxp_polar_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_polar_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_polar_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is the polar angle of the detector towards the previous
                component in the instrument; most often the sample.       The usage
                depends on the       nature of the detector.       Most often it is the
                polar_angle of the detector assembly.       But there are irregular
                detectors.       In this       case, the polar_angle  must be specified
                for each detector pixel.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_polar_angle.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_azimuthal_angle = NX_FLOAT()
        self.nxp_azimuthal_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='azimuthal_angle',
                )
        self.nxp_azimuthal_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_azimuthal_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_azimuthal_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is the azimuthal angle angle of the detector towards       the
                previous component in the instrument; most often the sample.       The
                usage depends on the       nature of the detector.       Most often it is
                the azimuthal_angle of the detector assembly.       But there are
                irregular detectors.       In this       case, the azimuthal_angle  must
                be specified for each detector pixel.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_azimuthal_angle.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_description = NX_CHAR()
        self.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                name/manufacturer/model/etc. information''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_serial_number = NX_CHAR()
        self.nxp_serial_number.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='serial_number',
                )
        self.nxp_serial_number.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Serial number for the detector''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_serial_number.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_local_name = NX_CHAR()
        self.nxp_local_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='local_name',
                )
        self.nxp_local_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Local name for the detector''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_local_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_solid_angle = NX_FLOAT()
        self.nxp_solid_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='solid_angle',
                )
        self.nxp_solid_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_solid_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_SOLID_ANGLE',
                )
        self.nxp_solid_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Solid angle subtended by the detector at the sample''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_solid_angle.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_x_pixel_size = NX_FLOAT()
        self.nxp_x_pixel_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x_pixel_size',
                )
        self.nxp_x_pixel_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_x_pixel_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_x_pixel_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Size of each detector pixel. If it is scalar all pixels are the same size.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_x_pixel_size.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_y_pixel_size = NX_FLOAT()
        self.nxp_y_pixel_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='y_pixel_size',
                )
        self.nxp_y_pixel_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_y_pixel_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_y_pixel_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Size of each detector pixel. If it is scalar all pixels are the same size''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_y_pixel_size.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_dead_time = NX_FLOAT()
        self.nxp_dead_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='dead_time',
                )
        self.nxp_dead_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_dead_time.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_dead_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Detector dead time''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_dead_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_gas_pressure = NX_FLOAT()
        self.nxp_gas_pressure.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='gas_pressure',
                )
        self.nxp_gas_pressure.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_gas_pressure.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_PRESSURE',
                )
        self.nxp_gas_pressure.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Detector gas pressure''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_gas_pressure.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_detection_gas_path = NX_FLOAT()
        self.nxp_detection_gas_path.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='detection_gas_path',
                )
        self.nxp_detection_gas_path.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_detection_gas_path.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_detection_gas_path.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                maximum drift space dimension''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_detection_gas_path.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_crate = NX_INT()
        self.nxp_crate.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='crate',
                )
        self.nxp_crate.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_crate.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Crate number of detector''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_crate.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_crate.nxp_local_name = NX_CHAR()
        self.nxp_crate.nxp_local_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='local_name',
                )
        self.nxp_crate.nxp_local_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Equivalent local term''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-crate-attribute',
                )
        self.nxp_crate.nxp_local_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_slot = NX_INT()
        self.nxp_slot.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='slot',
                )
        self.nxp_slot.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_slot.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Slot number of detector''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_slot.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_slot.nxp_local_name = NX_CHAR()
        self.nxp_slot.nxp_local_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='local_name',
                )
        self.nxp_slot.nxp_local_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Equivalent local term''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-slot-attribute',
                )
        self.nxp_slot.nxp_local_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_input = NX_INT()
        self.nxp_input.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='input',
                )
        self.nxp_input.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_input.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Input number of detector''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_input.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_input.nxp_local_name = NX_CHAR()
        self.nxp_input.nxp_local_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='local_name',
                )
        self.nxp_input.nxp_local_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Equivalent local term''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-input-attribute',
                )
        self.nxp_input.nxp_local_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_type = NX_CHAR()
        self.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Description of type such as He3 gas cylinder, He3 PSD, scintillator,
                fission chamber, proportion counter, ion chamber, ccd, pixel, image plate,
                CMOS, ...''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_real_time = NX_NUMBER()
        self.nxp_real_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='real_time',
                )
        self.nxp_real_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_real_time.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_real_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Real-time of the exposure (use this if exposure time varies for       each
                array element, otherwise use ``count_time`` field).
                Most often there is a single real time value that is constant across
                an entire image frame.  In such cases, only a 1-D array is needed.
                But there are detectors in which the real time       changes per pixel. In
                that case, more than one dimension is needed. Therefore       the rank of
                this field should be less than or equal to (detector rank + 1).''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_real_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_start_time = NX_FLOAT()
        self.nxp_start_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start_time',
                )
        self.nxp_start_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_start_time.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_start_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                start time for each frame, with the ``start`` attribute as absolute
                reference''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_start_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_start_time.nxp_start = NX_DATE_TIME()
        self.nxp_start_time.nxp_start.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start',
                )
        self.nxp_start_time.nxp_start.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_start_time.nxp_start.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-start-time-attribute',
                )
        self.nxp_start_time.nxp_start.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_stop_time = NX_FLOAT()
        self.nxp_stop_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='stop_time',
                )
        self.nxp_stop_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_stop_time.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_stop_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                stop time for each frame, with the ``start`` attribute as absolute
                reference''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_stop_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_stop_time.nxp_start = NX_DATE_TIME()
        self.nxp_stop_time.nxp_start.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start',
                )
        self.nxp_stop_time.nxp_start.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_stop_time.nxp_start.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-stop-time-attribute',
                )
        self.nxp_stop_time.nxp_start.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_calibration_date = NX_DATE_TIME()
        self.nxp_calibration_date.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='calibration_date',
                )
        self.nxp_calibration_date.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_calibration_date.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                date of last calibration (geometry and/or efficiency) measurements''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_calibration_date.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_layout = NX_CHAR()
        self.nxp_layout.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='layout',
                )
        self.nxp_layout.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                How the detector is represented''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_layout.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_layout.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='point,linear,area',
                )


        self.nxp_count_time = NX_NUMBER()
        self.nxp_count_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='count_time',
                )
        self.nxp_count_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_count_time.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_count_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Elapsed actual counting time''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_count_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_sequence_number = NX_INT()
        self.nxp_sequence_number.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sequence_number',
                )
        self.nxp_sequence_number.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_sequence_number.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                In order to properly sort the order of the images taken in (for
                example) a tomography experiment, a sequence number is stored with each
                image.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_sequence_number.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_beam_center_x = NX_FLOAT()
        self.nxp_beam_center_x.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='beam_center_x',
                )
        self.nxp_beam_center_x.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_beam_center_x.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_beam_center_x.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is the x position where the direct beam would hit the detector.
                This is a length and can be outside of the actual       detector. The
                length can be in physical units or pixels       as documented by the units
                attribute.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_beam_center_x.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_beam_center_y = NX_FLOAT()
        self.nxp_beam_center_y.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='beam_center_y',
                )
        self.nxp_beam_center_y.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_beam_center_y.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_beam_center_y.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is the y position where the direct beam would hit the detector.
                This is a length and can be outside of the actual       detector. The
                length can be in physical units or pixels       as documented by the units
                attribute.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_beam_center_y.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_frame_start_number = NX_INT()
        self.nxp_frame_start_number.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='frame_start_number',
                )
        self.nxp_frame_start_number.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_frame_start_number.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is the start number of the first frame of a scan. In PX one
                often scans a couple of frames on a give sample, then does something else,
                then returns to the same sample and scans some more frames. Each time with
                a new data file. This number helps concatenating such measurements.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_frame_start_number.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_diameter = NX_FLOAT()
        self.nxp_diameter.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='diameter',
                )
        self.nxp_diameter.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_diameter.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_diameter.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The diameter of a cylindrical detector''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_diameter.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_acquisition_mode = NX_CHAR()
        self.nxp_acquisition_mode.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='acquisition_mode',
                )
        self.nxp_acquisition_mode.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_acquisition_mode.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The acquisition mode of the detector.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_acquisition_mode.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_acquisition_mode.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='gated,triggered,summed,event,histogrammed,decimated',
                )


        self.nxp_angular_calibration_applied = NX_BOOLEAN()
        self.nxp_angular_calibration_applied.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='angular_calibration_applied',
                )
        self.nxp_angular_calibration_applied.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_BOOLEAN',
                )
        self.nxp_angular_calibration_applied.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                True when the angular calibration has been applied in the
                electronics, false otherwise.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_angular_calibration_applied.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_angular_calibration = NX_FLOAT()
        self.nxp_angular_calibration.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='angular_calibration',
                )
        self.nxp_angular_calibration.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_angular_calibration.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Angular calibration data.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_angular_calibration.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_flatfield_applied = NX_BOOLEAN()
        self.nxp_flatfield_applied.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='flatfield_applied',
                )
        self.nxp_flatfield_applied.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_BOOLEAN',
                )
        self.nxp_flatfield_applied.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                True when the flat field correction has been applied in the
                electronics, false otherwise.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_flatfield_applied.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_flatfield = NX_FLOAT()
        self.nxp_flatfield.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='flatfield',
                )
        self.nxp_flatfield.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_flatfield.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Flat field correction data.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_flatfield.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_flatfield_errors = NX_FLOAT()
        self.nxp_flatfield_errors.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='flatfield_errors',
                )
        self.nxp_flatfield_errors.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_flatfield_errors.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Errors of the flat field correction data.         The form flatfield_error
                is deprecated.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_flatfield_errors.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_pixel_mask_applied = NX_BOOLEAN()
        self.nxp_pixel_mask_applied.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='pixel_mask_applied',
                )
        self.nxp_pixel_mask_applied.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_BOOLEAN',
                )
        self.nxp_pixel_mask_applied.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                True when the pixel mask correction has been applied in the
                electronics, false otherwise.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_pixel_mask_applied.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_pixel_mask = NX_INT()
        self.nxp_pixel_mask.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='pixel_mask',
                )
        self.nxp_pixel_mask.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_pixel_mask.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The 32-bit pixel mask for the detector. Can be either one mask       for
                the whole dataset (i.e. an array with indices i, j) or       each frame
                can have its own mask (in which case it would be       an array with
                indices np, i, j).

                Contains a bit field for each pixel to signal dead,       blind or high or
                otherwise unwanted or undesirable pixels.       They have the following
                meaning:

                .. can't make a table here, a bullet list will have to do for now

                * bit 0: gap (pixel with no sensor)       * bit 1: dead       * bit 2:
                under responding       * bit 3: over responding       * bit 4: noisy
                * bit 5: -undefined-       * bit 6: pixel is part of a cluster of
                problematic pixels (bit set in addition to others)       * bit 7:
                -undefined-       * bit 8: user defined mask (e.g. around beamstop)
                * bits 9-30: -undefined-       * bit 31: virtual pixel (corner pixel with
                interpolated value)

                Normal data analysis software would       not take pixels into account
                when a bit in (mask & 0x0000FFFF) is       set. Tag bit in the upper
                two bytes would indicate special pixel       properties that normally
                would not be a sole reason to reject the       intensity value (unless
                lower bits are set.

                If the full bit depths is not required, providing a       mask with fewer
                bits is permissible.

                If needed, additional pixel masks can be specified by       including
                additional entries named pixel_mask_N, where       N is an integer. For
                example, a general bad pixel mask       could be specified in pixel_mask
                that indicates noisy       and dead pixels, and an additional pixel mask
                from       experiment-specific shadowing could be specified in
                pixel_mask_2. The cumulative mask is the bitwise OR       of pixel_mask
                and any pixel_mask_N entries.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_pixel_mask.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_countrate_correction_applied = NX_BOOLEAN()
        self.nxp_countrate_correction_applied.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='countrate_correction_applied',
                )
        self.nxp_countrate_correction_applied.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_BOOLEAN',
                )
        self.nxp_countrate_correction_applied.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                True when a count-rate correction has already been applied in the
                electronics, false otherwise.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_countrate_correction_applied.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_bit_depth_readout = NX_INT()
        self.nxp_bit_depth_readout.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='bit_depth_readout',
                )
        self.nxp_bit_depth_readout.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_bit_depth_readout.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                How many bits the electronics reads per pixel.       With CCD's and single
                photon counting detectors,       this must not align with traditional
                integer sizes.       This can be 4, 8, 12, 14, 16, ...''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_bit_depth_readout.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_detector_readout_time = NX_FLOAT()
        self.nxp_detector_readout_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='detector_readout_time',
                )
        self.nxp_detector_readout_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_detector_readout_time.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_detector_readout_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Time it takes to read the detector (typically milliseconds).       This is
                important to know for time resolved experiments.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_detector_readout_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_trigger_delay_time = NX_FLOAT()
        self.nxp_trigger_delay_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='trigger_delay_time',
                )
        self.nxp_trigger_delay_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_trigger_delay_time.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_trigger_delay_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Time it takes to start exposure after a trigger signal has been received.
                This is the reaction time of the detector firmware after receiving the
                trigger signal       to when the detector starts to acquire the exposure,
                including any user set delay..       This is important to know for time
                resolved experiments.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_trigger_delay_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_trigger_delay_time_set = NX_FLOAT()
        self.nxp_trigger_delay_time_set.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='trigger_delay_time_set',
                )
        self.nxp_trigger_delay_time_set.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_trigger_delay_time_set.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_trigger_delay_time_set.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                User-specified trigger delay.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_trigger_delay_time_set.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_trigger_internal_delay_time = NX_FLOAT()
        self.nxp_trigger_internal_delay_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='trigger_internal_delay_time',
                )
        self.nxp_trigger_internal_delay_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_trigger_internal_delay_time.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_trigger_internal_delay_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Time it takes to start exposure after a trigger signal has been received.
                This is the reaction time of the detector hardware after receiving the
                trigger signal to when the detector starts to acquire the exposure.
                It forms the lower boundary of the trigger_delay_time when the user
                does not request an additional delay.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_trigger_internal_delay_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_trigger_dead_time = NX_FLOAT()
        self.nxp_trigger_dead_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='trigger_dead_time',
                )
        self.nxp_trigger_dead_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_trigger_dead_time.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_trigger_dead_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Time during which no new trigger signal can be accepted.       Typically
                this is the       trigger_delay_time + exposure_time + readout_time.
                This is important to know for time resolved experiments.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_trigger_dead_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_frame_time = NX_FLOAT()
        self.nxp_frame_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='frame_time',
                )
        self.nxp_frame_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_frame_time.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_frame_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is time for each frame. This is exposure_time + readout time.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_frame_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_gain_setting = NX_CHAR()
        self.nxp_gain_setting.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='gain_setting',
                )
        self.nxp_gain_setting.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_gain_setting.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The gain setting of the detector. This influences background etc.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_gain_setting.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_gain_setting.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='high,standard,fast,auto',
                )


        self.nxp_saturation_value = NX_INT()
        self.nxp_saturation_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='saturation_value',
                )
        self.nxp_saturation_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_saturation_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The value at which the detector goes into saturation.       Especially
                common to CCD detectors, the data       is known to be invalid above this
                value.

                For example, given a saturation_value and an underload_value, the valid
                pixels are those less than or equal to the saturation_value and greater
                than or equal to the underload_value.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_saturation_value.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_underload_value = NX_INT()
        self.nxp_underload_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='underload_value',
                )
        self.nxp_underload_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_underload_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The lowest value at which pixels for this detector would be reasonably
                measured. The data is known to be invalid below this value.

                For example, given a saturation_value and an underload_value, the valid
                pixels are those less than or equal to the saturation_value and greater
                than or equal to the underload_value.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_underload_value.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_number_of_cycles = NX_INT()
        self.nxp_number_of_cycles.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='number_of_cycles',
                )
        self.nxp_number_of_cycles.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_number_of_cycles.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                CCD images are sometimes constructed by summing       together multiple
                short exposures in the       electronics. This reduces background etc.
                This is the number of short exposures used to sum       images for an
                image.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_number_of_cycles.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_sensor_material = NX_CHAR()
        self.nxp_sensor_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sensor_material',
                )
        self.nxp_sensor_material.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_sensor_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                At times, radiation is not directly sensed by the detector.       Rather,
                the detector might sense the output from some       converter like a
                scintillator.       This is the name of this converter material.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_sensor_material.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_sensor_thickness = NX_FLOAT()
        self.nxp_sensor_thickness.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sensor_thickness',
                )
        self.nxp_sensor_thickness.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_sensor_thickness.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_sensor_thickness.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                At times, radiation is not directly sensed by the detector.        Rather,
                the detector might sense the output from some        converter like a
                scintillator.        This is the thickness of this converter material.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_sensor_thickness.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_threshold_energy = NX_FLOAT()
        self.nxp_threshold_energy.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='threshold_energy',
                )
        self.nxp_threshold_energy.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_threshold_energy.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ENERGY',
                )
        self.nxp_threshold_energy.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Single photon counter detectors can be adjusted       for a certain energy
                range in which they       work optimally. This is the energy setting for
                this.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-field',
                )
        self.nxp_threshold_energy.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                      Declares which child group
                contains a path leading            to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute           to help
                define the path to the default dataset to be plotted.           See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdetector.html#nxdetector-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXsolid_geometry(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXsolid_geometry',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='contributed',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    the head node for constructively defined geometry
            ''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsolid_geometry.html#nxsolid-geometry',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_QUADRIC = NXquadric()
        self.nxp_QUADRIC.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXquadric',
                )
        self.nxp_QUADRIC.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_QUADRIC.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Instances of :ref:`NXquadric` making up elements of the geometry.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsolid_geometry.html#nxsolid-geometry-group',
                )
        self.nxp_QUADRIC.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_OFF_GEOMETRY = NXoff_geometry()
        self.nxp_OFF_GEOMETRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXoff_geometry',
                )
        self.nxp_OFF_GEOMETRY.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_OFF_GEOMETRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Instances of :ref:`NXoff_geometry` making up elements of the geometry.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsolid_geometry.html#nxsolid-geometry-group',
                )
        self.nxp_OFF_GEOMETRY.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_CSG = NXcsg()
        self.nxp_CSG.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcsg',
                )
        self.nxp_CSG.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_CSG.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The geometries defined, made up of instances of :ref:`NXquadric` and
                :ref:`NXoff_geometry`.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsolid_geometry.html#nxsolid-geometry-group',
                )
        self.nxp_CSG.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXcontainer(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXcontainer',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='contributed',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    State of a container holding the sample under investigation.
        A container is any object in the beam path which absorbs the beam and
        whose contribution to the overall attenuation/scattering needs to be
        determined to process the experimental data. Examples of containers
        include glass capillary tubes, vanadium cans, windows in furnaces or
        diamonds in a Diamond Anvil Cell. The following figures show a complex
        example of a container:                                  .. figure::
        container/ComplexExampleContainer.png                                        A
        hypothetical capillary furnace. The beam passes from left to right
        (blue dashes), passing through window 1, then window 2, before
        passing through the downstream wall of the capillary. It is then
        scattered by the sample with scattered beams passing through the
        upstream wall of the capillary, then windows 4 and 5. As part of the
        corrections for a PDF experiment it is necessary to subtract the PDF
        of the empty container (i.e. each of the windows and the capillary).
        To calculate the PDF of the empty container it is necessary to have
        the measured scattering data and to know the nature (e.g. density,
        elemental composition, etc.) of the portion of the container which
        the beam passed through.                                     .. figure::
        container/ComplexContainerBeampath.png                                        A
        complete description of the shapes of the container elements with
        their orientation relative to the beam and also information on
        whether they are upstream or downstream of the sample is also
        therefore important. For example, although the windows 2 and 4 have
        the same shape, the path taken through them by the beam is very
        different and this needs to be modelled. Furthermore, it is not
        inconceivable that windows might move during an experiment and thus
        the changes to the beampath would need to be accounted for.
        This class encodes the position of the container with respect to the
        sample and allows the calculation of the beampath through the container.
        It also includes sufficient data to model beam absorption of the
        container and a link to a dataset containing a measurement of the
        container with nothing inside, to allow data corrections (at a specific
        beam energy/measurement time) to be made.
            ''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_beam = NXbeam()
        self.nxp_beam.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='beam',
                )
        self.nxp_beam.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXbeam',
                )
        self.nxp_beam.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Details of beam incident on container, including the position
                relative to the sample (to determine whether the container is
                upstream or downstream of the sample).''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-group',
                )
        self.nxp_beam.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_shape = NXshape()
        self.nxp_shape.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='shape',
                )
        self.nxp_shape.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXshape',
                )
        self.nxp_shape.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Shape of the container. In combination with orientation this
                should allow the beampath through the container to be modelled to
                allow the adsorption to be calculated.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-group',
                )
        self.nxp_shape.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_orientation = NXtransformations()
        self.nxp_orientation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='orientation',
                )
        self.nxp_orientation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXtransformations',
                )
        self.nxp_orientation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The angle the container makes to the beam and how it may change
                during the experiment.In combination with shape this should allow
                the beampath through the container to be modelled to allow the
                adsorption of the container to be calculated.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-group',
                )
        self.nxp_orientation.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_name = NX_CHAR()
        self.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Descriptive name of container.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-field',
                )
        self.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_description = NX_CHAR()
        self.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Verbose description of container and how it fits into the wider
                experimental set up.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-field',
                )
        self.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_chemical_formula = NX_CHAR()
        self.nxp_chemical_formula.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='chemical_formula',
                )
        self.nxp_chemical_formula.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Chemical composition of the material the container is made from.
                Specified using CIF conventions. Abbreviated version of CIF
                standard:                                                   * Only
                recognized element symbols may be used.                         * Each
                element symbol is followed by a 'count' number. A count of
                '1' may be omitted.                         * A space or parenthesis must
                separate each cluster of (element                            symbol +
                count).                         * Where a group of elements is enclosed in
                parentheses, the                            multiplier for the group must
                follow the closing parentheses.                            That is, all
                element and group multipliers are assumed to be
                printed as subscripted numbers.                         * Unless the
                elements are ordered in a manner that corresponds to
                their chemical structure, the order of the elements within any
                group or moiety depends on whether or not carbon is present.
                * If carbon is present, the order should be:
                - C, then H, then the other elements in alphabetical order of
                their symbol.                            - If carbon is not present, the
                elements are listed purely in                              alphabetic
                order of their symbol.
                * This is the *Hill* system used by Chemical Abstracts.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-field',
                )
        self.nxp_chemical_formula.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_density = NX_FLOAT()
        self.nxp_density.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='density',
                )
        self.nxp_density.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_density.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_MASS_DENSITY',
                )
        self.nxp_density.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Density of the material the container is made from.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-field',
                )
        self.nxp_density.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_packing_fraction = NX_FLOAT()
        self.nxp_packing_fraction.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='packing_fraction',
                )
        self.nxp_packing_fraction.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_packing_fraction.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_packing_fraction.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Fraction of the volume of the container occupied by the material
                forming the container.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-field',
                )
        self.nxp_packing_fraction.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_relative_molecular_mass = NX_FLOAT()
        self.nxp_relative_molecular_mass.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='relative_molecular_mass',
                )
        self.nxp_relative_molecular_mass.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_relative_molecular_mass.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_MASS',
                )
        self.nxp_relative_molecular_mass.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Relative molecular mass of container.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcontainer.html#nxcontainer-field',
                )
        self.nxp_relative_molecular_mass.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXdisk_chopper(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXdisk_chopper',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    A device blocking the beam in a temporal periodic pattern.

        A disk which blocks the beam but has one or more slits to periodically
        let neutrons through as the disk rotates. Often used in pairs, one
        NXdisk_chopper should be defined for each disk.

        The rotation of the disk is commonly monitored by recording a timestamp for
        each full rotation of disk, by having a sensor in the stationary disk housing
        sensing when it is aligned with a feature (such as a magnet) on the disk.
        We refer to this below as the "top-dead-center signal".

        Angles and positive rotation speeds are measured in an anticlockwise
        direction when facing away from the source.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_GEOMETRY = NXgeometry()
        self.nxp_GEOMETRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgeometry',
                )
        self.nxp_GEOMETRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-group',
                )
        self.nxp_GEOMETRY.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_type = NX_CHAR()
        self.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Type of the disk-chopper: only one from the enumerated list (match text
                exactly)''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-field',
                )
        self.nxp_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_type.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='Chopper type single,contra_rotating_pair,synchro_pair',
                )


        self.nxp_rotation_speed = NX_FLOAT()
        self.nxp_rotation_speed.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='rotation_speed',
                )
        self.nxp_rotation_speed.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_rotation_speed.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FREQUENCY',
                )
        self.nxp_rotation_speed.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Chopper rotation speed. Positive for anticlockwise rotation when
                facing away from the source, negative otherwise.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-field',
                )
        self.nxp_rotation_speed.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_slits = NX_INT()
        self.nxp_slits.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='slits',
                )
        self.nxp_slits.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_slits.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Number of slits''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-field',
                )
        self.nxp_slits.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_slit_angle = NX_FLOAT()
        self.nxp_slit_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='slit_angle',
                )
        self.nxp_slit_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_slit_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_slit_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Angular opening''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-field',
                )
        self.nxp_slit_angle.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_pair_separation = NX_FLOAT()
        self.nxp_pair_separation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='pair_separation',
                )
        self.nxp_pair_separation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_pair_separation.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_pair_separation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Disk spacing in direction of beam''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-field',
                )
        self.nxp_pair_separation.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_slit_edges = NX_FLOAT()
        self.nxp_slit_edges.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='slit_edges',
                )
        self.nxp_slit_edges.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_slit_edges.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_slit_edges.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Angle of each edge of every slit from the position of the
                top-dead-center timestamp sensor, anticlockwise when facing
                away from the source.                         The first edge must be the
                opening edge of a slit, thus the last edge                         may
                have an angle greater than 360 degrees.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-field',
                )
        self.nxp_slit_edges.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_top_dead_center = NX_NUMBER()
        self.nxp_top_dead_center.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='top_dead_center',
                )
        self.nxp_top_dead_center.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_top_dead_center.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_top_dead_center.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Timestamps of the top-dead-center signal. The times are relative
                to the "start" attribute and in the units specified in the "units"
                attribute. Please note that absolute                         timestamps
                under unix are relative to ``1970-01-01T00:00:00.0Z``.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-field',
                )
        self.nxp_top_dead_center.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_top_dead_center.nxp_start = NX_DATE_TIME()
        self.nxp_top_dead_center.nxp_start.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start',
                )
        self.nxp_top_dead_center.nxp_start.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_top_dead_center.nxp_start.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-top-dead-center-attribute',
                )
        self.nxp_top_dead_center.nxp_start.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_beam_position = NX_FLOAT()
        self.nxp_beam_position.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='beam_position',
                )
        self.nxp_beam_position.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_beam_position.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_beam_position.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Angular separation of the center of the beam and the
                top-dead-center timestamp sensor, anticlockwise when facing
                away from the source.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-field',
                )
        self.nxp_beam_position.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_radius = NX_FLOAT()
        self.nxp_radius.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='radius',
                )
        self.nxp_radius.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_radius.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_radius.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Radius of the disk''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-field',
                )
        self.nxp_radius.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_slit_height = NX_FLOAT()
        self.nxp_slit_height.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='slit_height',
                )
        self.nxp_slit_height.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_slit_height.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_slit_height.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Total slit height''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-field',
                )
        self.nxp_slit_height.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_phase = NX_FLOAT()
        self.nxp_phase.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='phase',
                )
        self.nxp_phase.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_phase.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_phase.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Chopper phase angle''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-field',
                )
        self.nxp_phase.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_delay = NX_NUMBER()
        self.nxp_delay.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='delay',
                )
        self.nxp_delay.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_delay.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_delay.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Time difference between timing system t0 and chopper driving clock signal''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-field',
                )
        self.nxp_delay.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ratio = NX_INT()
        self.nxp_ratio.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='ratio',
                )
        self.nxp_ratio.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_ratio.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Pulse reduction factor of this chopper in relation to other
                choppers/fastest pulse in the instrument''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-field',
                )
        self.nxp_ratio.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_distance = NX_FLOAT()
        self.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Effective distance to the origin''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-field',
                )
        self.nxp_distance.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_wavelength_range = NX_FLOAT()
        self.nxp_wavelength_range.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='wavelength_range',
                )
        self.nxp_wavelength_range.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_wavelength_range.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVELENGTH',
                )
        self.nxp_wavelength_range.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Low and high values of wavelength range transmitted''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-field',
                )
        self.nxp_wavelength_range.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXdisk_chopper.html#nxdisk-chopper-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXfermi_chopper(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXfermi_chopper',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            A Fermi chopper, possibly with curved slits.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_GEOMETRY = NXgeometry()
        self.nxp_GEOMETRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgeometry',
                )
        self.nxp_GEOMETRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                geometry of the fermi chopper''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-group',
                )
        self.nxp_GEOMETRY.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_type = NX_CHAR()
        self.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Fermi chopper type''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-field',
                )
        self.nxp_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_rotation_speed = NX_FLOAT()
        self.nxp_rotation_speed.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='rotation_speed',
                )
        self.nxp_rotation_speed.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_rotation_speed.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FREQUENCY',
                )
        self.nxp_rotation_speed.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                chopper rotation speed''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-field',
                )
        self.nxp_rotation_speed.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_radius = NX_FLOAT()
        self.nxp_radius.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='radius',
                )
        self.nxp_radius.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_radius.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_radius.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                radius of chopper''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-field',
                )
        self.nxp_radius.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_slit = NX_FLOAT()
        self.nxp_slit.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='slit',
                )
        self.nxp_slit.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_slit.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_slit.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                width of an individual slit''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-field',
                )
        self.nxp_slit.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_r_slit = NX_FLOAT()
        self.nxp_r_slit.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='r_slit',
                )
        self.nxp_r_slit.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_r_slit.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_r_slit.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                radius of curvature of slits''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-field',
                )
        self.nxp_r_slit.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_number = NX_INT()
        self.nxp_number.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='number',
                )
        self.nxp_number.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_number.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_number.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                number of slits''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-field',
                )
        self.nxp_number.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_height = NX_FLOAT()
        self.nxp_height.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='height',
                )
        self.nxp_height.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_height.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_height.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                input beam height''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-field',
                )
        self.nxp_height.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_width = NX_FLOAT()
        self.nxp_width.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='width',
                )
        self.nxp_width.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_width.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_width.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                input beam width''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-field',
                )
        self.nxp_width.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_distance = NX_FLOAT()
        self.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                distance''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-field',
                )
        self.nxp_distance.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_wavelength = NX_FLOAT()
        self.nxp_wavelength.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='wavelength',
                )
        self.nxp_wavelength.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_wavelength.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVELENGTH',
                )
        self.nxp_wavelength.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Wavelength transmitted by chopper''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-field',
                )
        self.nxp_wavelength.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_energy = NX_FLOAT()
        self.nxp_energy.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='energy',
                )
        self.nxp_energy.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_energy.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ENERGY',
                )
        self.nxp_energy.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                energy selected''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-field',
                )
        self.nxp_energy.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_absorbing_material = NX_CHAR()
        self.nxp_absorbing_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='absorbing_material',
                )
        self.nxp_absorbing_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                absorbing material''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-field',
                )
        self.nxp_absorbing_material.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_transmitting_material = NX_CHAR()
        self.nxp_transmitting_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='transmitting_material',
                )
        self.nxp_transmitting_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                transmitting material''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-field',
                )
        self.nxp_transmitting_material.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfermi_chopper.html#nxfermi-chopper-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXfilter(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXfilter',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    For band pass beam filters.                                  If uncertain whether
        to use :ref:`NXfilter` (band-pass filter)                 or :ref:`NXattenuator`
        (reduces beam intensity), then use                  :ref:`NXattenuator`.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_GEOMETRY = NXgeometry()
        self.nxp_GEOMETRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgeometry',
                )
        self.nxp_GEOMETRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Geometry of the filter''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-group',
                )
        self.nxp_GEOMETRY.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_transmission = NXdata()
        self.nxp_transmission.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='transmission',
                )
        self.nxp_transmission.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_transmission.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Wavelength transmission profile of filter''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-group',
                )
        self.nxp_transmission.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_temperature_log = NXlog()
        self.nxp_temperature_log.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='temperature_log',
                )
        self.nxp_temperature_log.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_temperature_log.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Linked temperature_log for the filter''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-group',
                )
        self.nxp_temperature_log.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_sensor_type = NXsensor()
        self.nxp_sensor_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sensor_type',
                )
        self.nxp_sensor_type.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsensor',
                )
        self.nxp_sensor_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Sensor(s)used to monitor the filter temperature''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-group',
                )
        self.nxp_sensor_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_description = NX_CHAR()
        self.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Composition of the filter.  Chemical formula can be specified separately.

                This field was changed (2010-11-17) from an enumeration to             a
                string since common usage showed a wider variety of use             than a
                simple list.  These are the items in the list at              the time of
                the change: Beryllium | Pyrolytic Graphite |             Graphite |
                Sapphire | Silicon | Supermirror.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-field',
                )
        self.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_status = NX_CHAR()
        self.nxp_status.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='status',
                )
        self.nxp_status.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                position with respect to in or out of the beam (choice of only "in" or
                "out")''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-field',
                )
        self.nxp_status.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_status.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='in,out',
                )


        self.nxp_temperature = NX_FLOAT()
        self.nxp_temperature.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='temperature',
                )
        self.nxp_temperature.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_temperature.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TEMPERATURE',
                )
        self.nxp_temperature.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                average/nominal filter temperature''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-field',
                )
        self.nxp_temperature.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_thickness = NX_FLOAT()
        self.nxp_thickness.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='thickness',
                )
        self.nxp_thickness.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_thickness.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_thickness.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Thickness of the filter''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-field',
                )
        self.nxp_thickness.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_density = NX_NUMBER()
        self.nxp_density.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='density',
                )
        self.nxp_density.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_density.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_MASS_DENSITY',
                )
        self.nxp_density.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                mass density of the filter''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-field',
                )
        self.nxp_density.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_chemical_formula = NX_CHAR()
        self.nxp_chemical_formula.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='chemical_formula',
                )
        self.nxp_chemical_formula.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The chemical formula specified using CIF conventions.
                Abbreviated version of CIF standard:
                * Only recognized element symbols may be used.                         *
                Each element symbol is followed by a 'count' number. A count of '1' may be
                omitted.                         * A space or parenthesis must separate
                each cluster of (element symbol + count).                         * Where
                a group of elements is enclosed in parentheses, the multiplier for the
                group must follow the closing parentheses. That is, all element and group
                multipliers are assumed to be printed as subscripted numbers.
                * Unless the elements are ordered in a manner that corresponds to their
                chemical                            structure, the order of the elements
                within any group or moiety depends on                            whether
                or not carbon is present.                         * If carbon is present,
                the order should be:                                                     *
                C, then H, then the other elements in alphabetical order of their symbol.
                * If carbon is not present, the elements are listed purely in alphabetic
                order of their symbol.
                * This is the *Hill* system used by Chemical Abstracts.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-field',
                )
        self.nxp_chemical_formula.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_unit_cell_a = NX_FLOAT()
        self.nxp_unit_cell_a.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unit_cell_a',
                )
        self.nxp_unit_cell_a.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_unit_cell_a.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_unit_cell_a.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Unit cell lattice parameter: length of side a''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-field',
                )
        self.nxp_unit_cell_a.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_unit_cell_b = NX_FLOAT()
        self.nxp_unit_cell_b.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unit_cell_b',
                )
        self.nxp_unit_cell_b.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_unit_cell_b.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_unit_cell_b.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Unit cell lattice parameter: length of side b''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-field',
                )
        self.nxp_unit_cell_b.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_unit_cell_c = NX_FLOAT()
        self.nxp_unit_cell_c.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unit_cell_c',
                )
        self.nxp_unit_cell_c.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_unit_cell_c.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_unit_cell_c.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Unit cell lattice parameter: length of side c''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-field',
                )
        self.nxp_unit_cell_c.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_unit_cell_alpha = NX_FLOAT()
        self.nxp_unit_cell_alpha.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unit_cell_alpha',
                )
        self.nxp_unit_cell_alpha.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_unit_cell_alpha.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_unit_cell_alpha.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Unit cell lattice parameter: angle alpha''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-field',
                )
        self.nxp_unit_cell_alpha.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_unit_cell_beta = NX_FLOAT()
        self.nxp_unit_cell_beta.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unit_cell_beta',
                )
        self.nxp_unit_cell_beta.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_unit_cell_beta.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_unit_cell_beta.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Unit cell lattice parameter: angle beta''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-field',
                )
        self.nxp_unit_cell_beta.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_unit_cell_gamma = NX_FLOAT()
        self.nxp_unit_cell_gamma.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unit_cell_gamma',
                )
        self.nxp_unit_cell_gamma.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_unit_cell_gamma.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_unit_cell_gamma.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Unit cell lattice parameter: angle gamma''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-field',
                )
        self.nxp_unit_cell_gamma.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_unit_cell_volume = NX_FLOAT()
        self.nxp_unit_cell_volume.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unit_cell_volume',
                )
        self.nxp_unit_cell_volume.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_unit_cell_volume.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_VOLUME',
                )
        self.nxp_unit_cell_volume.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Unit cell''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-field',
                )
        self.nxp_unit_cell_volume.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_orientation_matrix = NX_FLOAT()
        self.nxp_orientation_matrix.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='orientation_matrix',
                )
        self.nxp_orientation_matrix.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_orientation_matrix.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Orientation matrix of single crystal filter using Busing-Levy convention:
                W. R. Busing and H. A. Levy (1967). Acta Cryst. 22, 457-464''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-field',
                )
        self.nxp_orientation_matrix.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_m_value = NX_FLOAT()
        self.nxp_m_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='m_value',
                )
        self.nxp_m_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_m_value.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DIMENSIONLESS',
                )
        self.nxp_m_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                m value of supermirror filter''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-field',
                )
        self.nxp_m_value.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_substrate_material = NX_CHAR()
        self.nxp_substrate_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='substrate_material',
                )
        self.nxp_substrate_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                substrate material of supermirror filter''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-field',
                )
        self.nxp_substrate_material.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_substrate_thickness = NX_FLOAT()
        self.nxp_substrate_thickness.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='substrate_thickness',
                )
        self.nxp_substrate_thickness.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_substrate_thickness.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_substrate_thickness.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                substrate thickness of supermirror filter''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-field',
                )
        self.nxp_substrate_thickness.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_coating_material = NX_CHAR()
        self.nxp_coating_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='coating_material',
                )
        self.nxp_coating_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                coating material of supermirror filter''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-field',
                )
        self.nxp_coating_material.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_substrate_roughness = NX_FLOAT()
        self.nxp_substrate_roughness.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='substrate_roughness',
                )
        self.nxp_substrate_roughness.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_substrate_roughness.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_substrate_roughness.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                substrate roughness (RMS) of supermirror filter''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-field',
                )
        self.nxp_substrate_roughness.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_coating_roughness = NX_FLOAT()
        self.nxp_coating_roughness.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='coating_roughness',
                )
        self.nxp_coating_roughness.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_coating_roughness.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_coating_roughness.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                coating roughness (RMS) of supermirror filter''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-field',
                )
        self.nxp_coating_roughness.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXfilter.html#nxfilter-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXenvironment(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXenvironment',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            Parameters for controlling external conditions
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_position = NXgeometry()
        self.nxp_position.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='position',
                )
        self.nxp_position.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgeometry',
                )
        self.nxp_position.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The position and orientation of the apparatus''',
                default='https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-group',
                )
        self.nxp_position.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_NOTE = NXnote()
        self.nxp_NOTE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXnote',
                )
        self.nxp_NOTE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Additional information, LabView logs, digital photographs, etc''',
                default='https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-group',
                )
        self.nxp_NOTE.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_SENSOR = NXsensor()
        self.nxp_SENSOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsensor',
                )
        self.nxp_SENSOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-group',
                )
        self.nxp_SENSOR.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_name = NX_CHAR()
        self.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Apparatus identification code/model number; e.g. OC100 011''',
                default='https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-field',
                )
        self.nxp_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_short_name = NX_CHAR()
        self.nxp_short_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='short_name',
                )
        self.nxp_short_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Alternative short name, perhaps for dashboard display like a present
                Seblock name''',
                default='https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-field',
                )
        self.nxp_short_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_type = NX_CHAR()
        self.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Type of apparatus. This could be the SE codes in scheduling database; e.g.
                OC/100''',
                default='https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-field',
                )
        self.nxp_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_description = NX_CHAR()
        self.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Description of the apparatus; e.g. 100mm bore orange cryostat with Roots
                pump''',
                default='https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-field',
                )
        self.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_program = NX_CHAR()
        self.nxp_program.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='program',
                )
        self.nxp_program.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Program controlling the apparatus; e.g. LabView VI name''',
                default='https://manual.nexusformat.org/classes/base_classes/NXenvironment.html#nxenvironment-field',
                )
        self.nxp_program.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXsample(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXsample',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    Any information on the sample.                                   This could
        include scanned variables that                 are associated with one of the data
        dimensions, e.g. the magnetic field, or                 logged data, e.g.
        monitored temperature vs elapsed time.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_geometry = NXgeometry()
        self.nxp_geometry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='geometry',
                )
        self.nxp_geometry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgeometry',
                )
        self.nxp_geometry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The position and orientation of the center of mass of the sample''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-group',
                )
        self.nxp_geometry.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_BEAM = NXbeam()
        self.nxp_BEAM.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXbeam',
                )
        self.nxp_BEAM.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Details of beam incident on sample - used to calculate sample/beam
                interaction point''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-group',
                )
        self.nxp_BEAM.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_SAMPLE_COMPONENT = NXsample_component()
        self.nxp_SAMPLE_COMPONENT.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample_component',
                )
        self.nxp_SAMPLE_COMPONENT.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                One group per sample component                         This is the
                perferred way of recording per component information over the n_comp
                arrays''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-group',
                )
        self.nxp_SAMPLE_COMPONENT.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_transmission = NXdata()
        self.nxp_transmission.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='transmission',
                )
        self.nxp_transmission.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_transmission.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                As a function of Wavelength''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-group',
                )
        self.nxp_transmission.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_temperature = NXlog()
        self.nxp_temperature.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='temperature',
                )
        self.nxp_temperature.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_temperature.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                temperature.value is a link to e.g. temperature_env.sensor1.value''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-group',
                )
        self.nxp_temperature.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_temperature_log = NXlog()
        self.nxp_temperature_log.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='temperature_log',
                )
        self.nxp_temperature_log.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_temperature_log.nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='use ``temperature``, see: https://github.com/nexusformat/definitions/issues/816',
                )
        self.nxp_temperature_log.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                temperature_log.value is a link to e.g.
                temperature_env.sensor1.value_log.value''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-group',
                )
        self.nxp_temperature_log.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_temperature_log.nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_temperature_env = NXenvironment()
        self.nxp_temperature_env.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='temperature_env',
                )
        self.nxp_temperature_env.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXenvironment',
                )
        self.nxp_temperature_env.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Additional sample temperature environment information''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-group',
                )
        self.nxp_temperature_env.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_magnetic_field = NXlog()
        self.nxp_magnetic_field.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='magnetic_field',
                )
        self.nxp_magnetic_field.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_magnetic_field.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                magnetic_field.value is a link to e.g. magnetic_field_env.sensor1.value''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-group',
                )
        self.nxp_magnetic_field.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_magnetic_field_log = NXlog()
        self.nxp_magnetic_field_log.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='magnetic_field_log',
                )
        self.nxp_magnetic_field_log.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_magnetic_field_log.nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='use ``magnetic_field``, see: https://github.com/nexusformat/definitions/issues/816',
                )
        self.nxp_magnetic_field_log.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                magnetic_field_log.value is a link to e.g.
                magnetic_field_env.sensor1.value_log.value''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-group',
                )
        self.nxp_magnetic_field_log.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_magnetic_field_log.nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_magnetic_field_env = NXenvironment()
        self.nxp_magnetic_field_env.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='magnetic_field_env',
                )
        self.nxp_magnetic_field_env.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXenvironment',
                )
        self.nxp_magnetic_field_env.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Additional sample magnetic environment information''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-group',
                )
        self.nxp_magnetic_field_env.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_external_ADC = NXlog()
        self.nxp_external_ADC.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='external_ADC',
                )
        self.nxp_external_ADC.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_external_ADC.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                logged value (or logic state) read from user's setup''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-group',
                )
        self.nxp_external_ADC.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_POSITIONER = NXpositioner()
        self.nxp_POSITIONER.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXpositioner',
                )
        self.nxp_POSITIONER.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Any positioner (motor, PZT, ...) used to locate the sample''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-group',
                )
        self.nxp_POSITIONER.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_name = NX_CHAR()
        self.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Descriptive name of sample''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_chemical_formula = NX_CHAR()
        self.nxp_chemical_formula.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='chemical_formula',
                )
        self.nxp_chemical_formula.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The chemical formula specified using CIF conventions.
                Abbreviated version of CIF standard:
                * Only recognized element symbols may be used.                         *
                Each element symbol is followed by a 'count' number. A count of '1' may be
                omitted.                         * A space or parenthesis must separate
                each cluster of (element symbol + count).                         * Where
                a group of elements is enclosed in parentheses, the multiplier for the
                group must follow the closing parentheses. That is, all element and group
                multipliers are assumed to be printed as subscripted numbers.
                * Unless the elements are ordered in a manner that corresponds to their
                chemical                            structure, the order of the elements
                within any group or moiety depends on                            whether
                or not carbon is present.                         * If carbon is present,
                the order should be:                                                     -
                C, then H, then the other elements in alphabetical order of their symbol.
                - If carbon is not present, the elements are listed purely in alphabetic
                order of their symbol.
                * This is the *Hill* system used by Chemical Abstracts.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_chemical_formula.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_temperature = NX_FLOAT()
        self.nxp_temperature.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='temperature',
                )
        self.nxp_temperature.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_temperature.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TEMPERATURE',
                )
        self.nxp_temperature.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Sample temperature. This could be a scanned variable''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_temperature.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_electric_field = NX_FLOAT()
        self.nxp_electric_field.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='electric_field',
                )
        self.nxp_electric_field.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_electric_field.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_VOLTAGE',
                )
        self.nxp_electric_field.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Applied electric field''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_electric_field.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_electric_field.nxp_direction = NX_CHAR()
        self.nxp_electric_field.nxp_direction.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='direction',
                )
        self.nxp_electric_field.nxp_direction.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-electric-field-attribute',
                )
        self.nxp_electric_field.nxp_direction.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_electric_field.nxp_direction.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x,y,z',
                )



        self.nxp_magnetic_field = NX_FLOAT()
        self.nxp_magnetic_field.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='magnetic_field',
                )
        self.nxp_magnetic_field.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_magnetic_field.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_magnetic_field.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Applied magnetic field''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_magnetic_field.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_magnetic_field.nxp_direction = NX_CHAR()
        self.nxp_magnetic_field.nxp_direction.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='direction',
                )
        self.nxp_magnetic_field.nxp_direction.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-magnetic-field-attribute',
                )
        self.nxp_magnetic_field.nxp_direction.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_magnetic_field.nxp_direction.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x,y,z',
                )



        self.nxp_stress_field = NX_FLOAT()
        self.nxp_stress_field.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='stress_field',
                )
        self.nxp_stress_field.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_stress_field.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_stress_field.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Applied external stress field''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_stress_field.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_stress_field.nxp_direction = NX_CHAR()
        self.nxp_stress_field.nxp_direction.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='direction',
                )
        self.nxp_stress_field.nxp_direction.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-stress-field-attribute',
                )
        self.nxp_stress_field.nxp_direction.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_stress_field.nxp_direction.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x,y,z',
                )



        self.nxp_pressure = NX_FLOAT()
        self.nxp_pressure.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='pressure',
                )
        self.nxp_pressure.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_pressure.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_PRESSURE',
                )
        self.nxp_pressure.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Applied pressure''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_pressure.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_changer_position = NX_INT()
        self.nxp_changer_position.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='changer_position',
                )
        self.nxp_changer_position.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_changer_position.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_changer_position.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Sample changer position''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_changer_position.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_unit_cell_abc = NX_FLOAT()
        self.nxp_unit_cell_abc.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unit_cell_abc',
                )
        self.nxp_unit_cell_abc.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_unit_cell_abc.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_unit_cell_abc.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Crystallography unit cell parameters a, b, and c''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_unit_cell_abc.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_unit_cell_alphabetagamma = NX_FLOAT()
        self.nxp_unit_cell_alphabetagamma.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unit_cell_alphabetagamma',
                )
        self.nxp_unit_cell_alphabetagamma.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_unit_cell_alphabetagamma.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_unit_cell_alphabetagamma.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Crystallography unit cell parameters alpha, beta, and gamma''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_unit_cell_alphabetagamma.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_unit_cell = NX_FLOAT()
        self.nxp_unit_cell.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unit_cell',
                )
        self.nxp_unit_cell.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_unit_cell.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_unit_cell.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Unit cell parameters (lengths and angles)''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_unit_cell.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_unit_cell_volume = NX_FLOAT()
        self.nxp_unit_cell_volume.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unit_cell_volume',
                )
        self.nxp_unit_cell_volume.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_unit_cell_volume.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_VOLUME',
                )
        self.nxp_unit_cell_volume.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Volume of the unit cell''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_unit_cell_volume.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_sample_orientation = NX_FLOAT()
        self.nxp_sample_orientation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample_orientation',
                )
        self.nxp_sample_orientation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_sample_orientation.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_sample_orientation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This will follow the Busing-Levy convention:                         W. R.
                Busing and H. A. Levy (1967). Acta Cryst. 22, 457-464''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_sample_orientation.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_orientation_matrix = NX_FLOAT()
        self.nxp_orientation_matrix.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='orientation_matrix',
                )
        self.nxp_orientation_matrix.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_orientation_matrix.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Orientation matrix of single crystal sample using Busing-Levy convention:
                W. R. Busing and H. A. Levy (1967). Acta Cryst. 22, 457-464''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_orientation_matrix.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ub_matrix = NX_FLOAT()
        self.nxp_ub_matrix.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='ub_matrix',
                )
        self.nxp_ub_matrix.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ub_matrix.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                UB matrix of single crystal sample using Busing-Levy convention:
                W. R. Busing and H. A. Levy (1967). Acta Cryst. 22, 457-464. This is
                the multiplication of the orientation_matrix, given above,
                with the :math:`B` matrix which                          can be derived
                from the lattice constants.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_ub_matrix.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_mass = NX_FLOAT()
        self.nxp_mass.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='mass',
                )
        self.nxp_mass.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_mass.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_MASS',
                )
        self.nxp_mass.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Mass of sample''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_mass.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_density = NX_FLOAT()
        self.nxp_density.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='density',
                )
        self.nxp_density.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_density.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_MASS_DENSITY',
                )
        self.nxp_density.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Density of sample''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_density.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_relative_molecular_mass = NX_FLOAT()
        self.nxp_relative_molecular_mass.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='relative_molecular_mass',
                )
        self.nxp_relative_molecular_mass.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_relative_molecular_mass.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_MASS',
                )
        self.nxp_relative_molecular_mass.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Relative Molecular Mass of sample''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_relative_molecular_mass.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_type = NX_CHAR()
        self.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_type.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample,sample+can,can,sample+buffer,buffer,calibration sample,normalisation sample,simulated data,none,sample environment',
                )


        self.nxp_situation = NX_CHAR()
        self.nxp_situation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='situation',
                )
        self.nxp_situation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The atmosphere will be one of the components, which is where
                its details will be stored; the relevant components will be
                indicated by the entry in the sample_component member.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_situation.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_situation.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='air,vacuum,inert atmosphere,oxidising atmosphere,reducing atmosphere,sealed can,other',
                )


        self.nxp_description = NX_CHAR()
        self.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Description of the sample''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_preparation_date = NX_DATE_TIME()
        self.nxp_preparation_date.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='preparation_date',
                )
        self.nxp_preparation_date.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_preparation_date.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Date of preparation of the sample''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_preparation_date.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_component = NX_CHAR()
        self.nxp_component.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='component',
                )
        self.nxp_component.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Details of the component of the sample and/or can''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_component.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_sample_component = NX_CHAR()
        self.nxp_sample_component.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample_component',
                )
        self.nxp_sample_component.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Type of component''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_sample_component.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_sample_component.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample,can,atmosphere,kit',
                )


        self.nxp_concentration = NX_FLOAT()
        self.nxp_concentration.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='concentration',
                )
        self.nxp_concentration.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_concentration.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_MASS_DENSITY',
                )
        self.nxp_concentration.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Concentration of each component''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_concentration.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_volume_fraction = NX_FLOAT()
        self.nxp_volume_fraction.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='volume_fraction',
                )
        self.nxp_volume_fraction.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_volume_fraction.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Volume fraction of each component''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_volume_fraction.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_scattering_length_density = NX_FLOAT()
        self.nxp_scattering_length_density.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='scattering_length_density',
                )
        self.nxp_scattering_length_density.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_scattering_length_density.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_SCATTERING_LENGTH_DENSITY',
                )
        self.nxp_scattering_length_density.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Scattering length density of each component''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_scattering_length_density.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_unit_cell_class = NX_CHAR()
        self.nxp_unit_cell_class.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unit_cell_class',
                )
        self.nxp_unit_cell_class.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                In case it is all we know and we want to record/document it''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_unit_cell_class.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_unit_cell_class.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='triclinic,monoclinic,orthorhombic,tetragonal,rhombohedral,hexagonal,cubic',
                )


        self.nxp_space_group = NX_CHAR()
        self.nxp_space_group.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='space_group',
                )
        self.nxp_space_group.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Crystallographic space group''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_space_group.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_point_group = NX_CHAR()
        self.nxp_point_group.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='point_group',
                )
        self.nxp_point_group.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Crystallographic point group, deprecated if space_group present''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_point_group.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_path_length = NX_FLOAT()
        self.nxp_path_length.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='path_length',
                )
        self.nxp_path_length.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_path_length.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_path_length.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Path length through sample/can for simple case when
                it does not vary with scattering direction''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_path_length.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_path_length_window = NX_FLOAT()
        self.nxp_path_length_window.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='path_length_window',
                )
        self.nxp_path_length_window.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_path_length_window.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_path_length_window.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Thickness of a beam entry/exit window on the can (mm)
                - assumed same for entry and exit''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_path_length_window.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_thickness = NX_FLOAT()
        self.nxp_thickness.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='thickness',
                )
        self.nxp_thickness.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_thickness.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_thickness.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                sample thickness''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_thickness.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_external_DAC = NX_FLOAT()
        self.nxp_external_DAC.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='external_DAC',
                )
        self.nxp_external_DAC.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_external_DAC.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_external_DAC.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                value sent to user's sample setup''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_external_DAC.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_short_title = NX_CHAR()
        self.nxp_short_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='short_title',
                )
        self.nxp_short_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                20 character fixed length sample description for legends''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_short_title.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_rotation_angle = NX_FLOAT()
        self.nxp_rotation_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='rotation_angle',
                )
        self.nxp_rotation_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_rotation_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_rotation_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Optional rotation angle for the case when the powder diagram has
                been obtained through an omega-2theta scan like from a traditional
                single detector powder diffractometer''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_rotation_angle.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_x_translation = NX_FLOAT()
        self.nxp_x_translation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x_translation',
                )
        self.nxp_x_translation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_x_translation.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_x_translation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Translation of the sample along the X-direction of the laboratory
                coordinate system''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_x_translation.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_distance = NX_FLOAT()
        self.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Translation of the sample along the Z-direction of the laboratory
                coordinate system''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-field',
                )
        self.nxp_distance.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsample.html#nxsample-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXmonochromator(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXmonochromator',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    A  wavelength defining device.                  This is a base class for
        everything which         selects a wavelength or energy, be it a
        monochromator crystal, a velocity selector,         an undulator or whatever.
        The expected units are:                  * wavelength: angstrom         * energy:
        eV
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_distribution = NXdata()
        self.nxp_distribution.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_distribution.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distribution',
                )
        self.nxp_distribution.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-group',
                )
        self.nxp_distribution.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_geometry = NXgeometry()
        self.nxp_geometry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgeometry',
                )
        self.nxp_geometry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='geometry',
                )
        self.nxp_geometry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-group',
                )
        self.nxp_geometry.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_CRYSTAL = NXcrystal()
        self.nxp_CRYSTAL.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcrystal',
                )
        self.nxp_CRYSTAL.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Use as many crystals as necessary to describe''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-group',
                )
        self.nxp_CRYSTAL.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_VELOCITY_SELECTOR = NXvelocity_selector()
        self.nxp_VELOCITY_SELECTOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXvelocity_selector',
                )
        self.nxp_VELOCITY_SELECTOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-group',
                )
        self.nxp_VELOCITY_SELECTOR.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_GRATING = NXgrating()
        self.nxp_GRATING.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgrating',
                )
        self.nxp_GRATING.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                For diffraction grating based monochromators''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-group',
                )
        self.nxp_GRATING.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_wavelength = NX_FLOAT()
        self.nxp_wavelength.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='wavelength',
                )
        self.nxp_wavelength.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_wavelength.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVELENGTH',
                )
        self.nxp_wavelength.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                wavelength selected''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-field',
                )
        self.nxp_wavelength.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_wavelength_error = NX_FLOAT()
        self.nxp_wavelength_error.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='wavelength_error',
                )
        self.nxp_wavelength_error.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_wavelength_error.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVELENGTH',
                )
        self.nxp_wavelength_error.nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='see https://github.com/nexusformat/definitions/issues/820',
                )
        self.nxp_wavelength_error.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                wavelength standard deviation''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-field',
                )
        self.nxp_wavelength_error.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_wavelength_error.nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_wavelength_errors = NX_FLOAT()
        self.nxp_wavelength_errors.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='wavelength_errors',
                )
        self.nxp_wavelength_errors.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_wavelength_errors.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVELENGTH',
                )
        self.nxp_wavelength_errors.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                wavelength standard deviation''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-field',
                )
        self.nxp_wavelength_errors.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_energy = NX_FLOAT()
        self.nxp_energy.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='energy',
                )
        self.nxp_energy.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_energy.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ENERGY',
                )
        self.nxp_energy.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                energy selected''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-field',
                )
        self.nxp_energy.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_energy_error = NX_FLOAT()
        self.nxp_energy_error.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='energy_error',
                )
        self.nxp_energy_error.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_energy_error.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ENERGY',
                )
        self.nxp_energy_error.nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='see https://github.com/nexusformat/definitions/issues/820',
                )
        self.nxp_energy_error.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                energy standard deviation''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-field',
                )
        self.nxp_energy_error.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_energy_error.nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_energy_errors = NX_FLOAT()
        self.nxp_energy_errors.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='energy_errors',
                )
        self.nxp_energy_errors.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_energy_errors.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ENERGY',
                )
        self.nxp_energy_errors.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                energy standard deviation''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-field',
                )
        self.nxp_energy_errors.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXmonochromator.html#nxmonochromator-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXinstrument(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXinstrument',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    Collection of the components of the instrument or beamline.
        Template of instrument descriptions comprising various beamline components.
        Each component will also be a NeXus group defined by its distance from the
        sample. Negative distances represent beamline components that are before the
        sample while positive distances represent components that are after the sample.
        This device allows the unique identification of beamline components in a way
        that is valid for both reactor and pulsed instrumentation.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_APERTURE = NXaperture()
        self.nxp_APERTURE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXaperture',
                )
        self.nxp_APERTURE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-group',
                )
        self.nxp_APERTURE.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ATTENUATOR = NXattenuator()
        self.nxp_ATTENUATOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXattenuator',
                )
        self.nxp_ATTENUATOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-group',
                )
        self.nxp_ATTENUATOR.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_BEAM = NXbeam()
        self.nxp_BEAM.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXbeam',
                )
        self.nxp_BEAM.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-group',
                )
        self.nxp_BEAM.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_BEAM_STOP = NXbeam_stop()
        self.nxp_BEAM_STOP.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXbeam_stop',
                )
        self.nxp_BEAM_STOP.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-group',
                )
        self.nxp_BEAM_STOP.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_BENDING_MAGNET = NXbending_magnet()
        self.nxp_BENDING_MAGNET.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXbending_magnet',
                )
        self.nxp_BENDING_MAGNET.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-group',
                )
        self.nxp_BENDING_MAGNET.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_COLLIMATOR = NXcollimator()
        self.nxp_COLLIMATOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcollimator',
                )
        self.nxp_COLLIMATOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-group',
                )
        self.nxp_COLLIMATOR.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_COLLECTION = NXcollection()
        self.nxp_COLLECTION.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcollection',
                )
        self.nxp_COLLECTION.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-group',
                )
        self.nxp_COLLECTION.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_CAPILLARY = NXcapillary()
        self.nxp_CAPILLARY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcapillary',
                )
        self.nxp_CAPILLARY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-group',
                )
        self.nxp_CAPILLARY.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_CRYSTAL = NXcrystal()
        self.nxp_CRYSTAL.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcrystal',
                )
        self.nxp_CRYSTAL.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-group',
                )
        self.nxp_CRYSTAL.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_DETECTOR = NXdetector()
        self.nxp_DETECTOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_DETECTOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-group',
                )
        self.nxp_DETECTOR.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_DETECTOR_GROUP = NXdetector_group()
        self.nxp_DETECTOR_GROUP.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector_group',
                )
        self.nxp_DETECTOR_GROUP.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-group',
                )
        self.nxp_DETECTOR_GROUP.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_DISK_CHOPPER = NXdisk_chopper()
        self.nxp_DISK_CHOPPER.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdisk_chopper',
                )
        self.nxp_DISK_CHOPPER.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-group',
                )
        self.nxp_DISK_CHOPPER.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_EVENT_DATA = NXevent_data()
        self.nxp_EVENT_DATA.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXevent_data',
                )
        self.nxp_EVENT_DATA.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-group',
                )
        self.nxp_EVENT_DATA.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_FERMI_CHOPPER = NXfermi_chopper()
        self.nxp_FERMI_CHOPPER.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXfermi_chopper',
                )
        self.nxp_FERMI_CHOPPER.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-group',
                )
        self.nxp_FERMI_CHOPPER.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_FILTER = NXfilter()
        self.nxp_FILTER.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXfilter',
                )
        self.nxp_FILTER.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-group',
                )
        self.nxp_FILTER.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_FLIPPER = NXflipper()
        self.nxp_FLIPPER.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXflipper',
                )
        self.nxp_FLIPPER.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-group',
                )
        self.nxp_FLIPPER.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_GUIDE = NXguide()
        self.nxp_GUIDE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXguide',
                )
        self.nxp_GUIDE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-group',
                )
        self.nxp_GUIDE.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_INSERTION_DEVICE = NXinsertion_device()
        self.nxp_INSERTION_DEVICE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinsertion_device',
                )
        self.nxp_INSERTION_DEVICE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-group',
                )
        self.nxp_INSERTION_DEVICE.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_MIRROR = NXmirror()
        self.nxp_MIRROR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmirror',
                )
        self.nxp_MIRROR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-group',
                )
        self.nxp_MIRROR.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_MODERATOR = NXmoderator()
        self.nxp_MODERATOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmoderator',
                )
        self.nxp_MODERATOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-group',
                )
        self.nxp_MODERATOR.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_MONOCHROMATOR = NXmonochromator()
        self.nxp_MONOCHROMATOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonochromator',
                )
        self.nxp_MONOCHROMATOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-group',
                )
        self.nxp_MONOCHROMATOR.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_POLARIZER = NXpolarizer()
        self.nxp_POLARIZER.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXpolarizer',
                )
        self.nxp_POLARIZER.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-group',
                )
        self.nxp_POLARIZER.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_POSITIONER = NXpositioner()
        self.nxp_POSITIONER.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXpositioner',
                )
        self.nxp_POSITIONER.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-group',
                )
        self.nxp_POSITIONER.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_SOURCE = NXsource()
        self.nxp_SOURCE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsource',
                )
        self.nxp_SOURCE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-group',
                )
        self.nxp_SOURCE.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_DIFFRACTOMETER = NXtransformations()
        self.nxp_DIFFRACTOMETER.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXtransformations',
                )
        self.nxp_DIFFRACTOMETER.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='DIFFRACTOMETER',
                )
        self.nxp_DIFFRACTOMETER.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-group',
                )
        self.nxp_DIFFRACTOMETER.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_VELOCITY_SELECTOR = NXvelocity_selector()
        self.nxp_VELOCITY_SELECTOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXvelocity_selector',
                )
        self.nxp_VELOCITY_SELECTOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-group',
                )
        self.nxp_VELOCITY_SELECTOR.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_XRAYLENS = NXxraylens()
        self.nxp_XRAYLENS.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXxraylens',
                )
        self.nxp_XRAYLENS.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-group',
                )
        self.nxp_XRAYLENS.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_name = NX_CHAR()
        self.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Name of instrument''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-field',
                )
        self.nxp_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_name.nxp_short_name = NX_CHAR()
        self.nxp_name.nxp_short_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='short_name',
                )
        self.nxp_name.nxp_short_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                short name for instrument, perhaps the acronym''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-name-attribute',
                )
        self.nxp_name.nxp_short_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which child group
                contains a path leading              to a :ref:`NXdata` group.
                It is recommended (as of NIAC2014) to use this attribute             to
                help define the path to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXinstrument.html#nxinstrument-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXsubentry(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXsubentry',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    Group of multiple application definitions for "multi-modal" (e.g. SAXS/WAXS)
        measurements.                                  ``NXsubentry`` is a base class
        virtually identical to :ref:`NXentry`                 and is used as the (overlay)
        location for application definitions.                 Use a separate
        ``NXsubentry`` for each application definition.
        To use ``NXsubentry`` with a hypothetical application definition
        called ``NXmyappdef``:

        * Create a group with attribute ``NX_class="NXsubentry"``                 * Within
        that group, create a field called ``definition="NXmyappdef"``.                 *
        There are two optional attributes of definition: ``version`` and ``URL``

        The intended use is to define application definitions for a
        multi-modal (a.k.a. multi-technique) :ref:`NXentry`.                  Previously,
        an application definition                  replaced :ref:`NXentry` with its own
        definition.                  With the increasing popularity of instruments
        combining                  multiple techniques for data collection (such as
        SAXS/WAXS instruments),                  it was recognized the application
        definitions must be entered in the NeXus                 data file tree as
        children of :ref:`NXentry`.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_experiment_documentation = NXnote()
        self.nxp_experiment_documentation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXnote',
                )
        self.nxp_experiment_documentation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='experiment_documentation',
                )
        self.nxp_experiment_documentation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Description of the full experiment (document in pdf, latex, ...)''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-group',
                )
        self.nxp_experiment_documentation.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_notes = NXnote()
        self.nxp_notes.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='notes',
                )
        self.nxp_notes.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXnote',
                )
        self.nxp_notes.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Notes describing entry''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-group',
                )
        self.nxp_notes.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_thumbnail = NXnote()
        self.nxp_thumbnail.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='thumbnail',
                )
        self.nxp_thumbnail.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXnote',
                )
        self.nxp_thumbnail.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                A small image that is representative of the entry. An example of this is a
                640x480                         jpeg image automatically produced by a low
                resolution plot of the NXdata.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-group',
                )
        self.nxp_thumbnail.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_thumbnail.nxp_mime_type = NX_CHAR()
        self.nxp_thumbnail.nxp_mime_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='mime_type',
                )
        self.nxp_thumbnail.nxp_mime_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The value should be an ``image/*``''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-thumbnail-attribute',
                )
        self.nxp_thumbnail.nxp_mime_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_thumbnail.nxp_mime_type.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='image/*',
                )



        self.nxp_USER = NXuser()
        self.nxp_USER.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXuser',
                )
        self.nxp_USER.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-group',
                )
        self.nxp_USER.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_SAMPLE = NXsample()
        self.nxp_SAMPLE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_SAMPLE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-group',
                )
        self.nxp_SAMPLE.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_INSTRUMENT = NXinstrument()
        self.nxp_INSTRUMENT.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_INSTRUMENT.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-group',
                )
        self.nxp_INSTRUMENT.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_COLLECTION = NXcollection()
        self.nxp_COLLECTION.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcollection',
                )
        self.nxp_COLLECTION.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-group',
                )
        self.nxp_COLLECTION.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_MONITOR = NXmonitor()
        self.nxp_MONITOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonitor',
                )
        self.nxp_MONITOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-group',
                )
        self.nxp_MONITOR.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_DATA = NXdata()
        self.nxp_DATA.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_DATA.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-group',
                )
        self.nxp_DATA.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_PARAMETERS = NXparameters()
        self.nxp_PARAMETERS.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXparameters',
                )
        self.nxp_PARAMETERS.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-group',
                )
        self.nxp_PARAMETERS.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_PROCESS = NXprocess()
        self.nxp_PROCESS.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXprocess',
                )
        self.nxp_PROCESS.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-group',
                )
        self.nxp_PROCESS.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_title = NX_CHAR()
        self.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Extended title for entry''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-field',
                )
        self.nxp_title.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_experiment_identifier = NX_CHAR()
        self.nxp_experiment_identifier.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='experiment_identifier',
                )
        self.nxp_experiment_identifier.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Unique identifier for the experiment, defined by                     the
                facility, possibly linked to the proposals''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-field',
                )
        self.nxp_experiment_identifier.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_experiment_description = NX_CHAR()
        self.nxp_experiment_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='experiment_description',
                )
        self.nxp_experiment_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Brief summary of the experiment, including key objectives.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-field',
                )
        self.nxp_experiment_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_collection_identifier = NX_CHAR()
        self.nxp_collection_identifier.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='collection_identifier',
                )
        self.nxp_collection_identifier.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                User or Data Acquisition defined group of NeXus files or :ref:`NXentry`''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-field',
                )
        self.nxp_collection_identifier.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_collection_description = NX_CHAR()
        self.nxp_collection_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='collection_description',
                )
        self.nxp_collection_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Brief summary of the collection, including grouping criteria.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-field',
                )
        self.nxp_collection_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry_identifier = NX_CHAR()
        self.nxp_entry_identifier.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry_identifier',
                )
        self.nxp_entry_identifier.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                unique identifier for the measurement, defined by the facility.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-field',
                )
        self.nxp_entry_identifier.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_definition = NX_CHAR()
        self.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this subentry conforms''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-field',
                )
        self.nxp_definition.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_definition.nxp_version = NX_CHAR()
        self.nxp_definition.nxp_version.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='version',
                )
        self.nxp_definition.nxp_version.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                NXDL version number''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-definition-attribute',
                )
        self.nxp_definition.nxp_version.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_definition.nxp_URL = NX_CHAR()
        self.nxp_definition.nxp_URL.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='URL',
                )
        self.nxp_definition.nxp_URL.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                URL of NXDL file''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-definition-attribute',
                )
        self.nxp_definition.nxp_URL.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_definition_local = NX_CHAR()
        self.nxp_definition_local.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition_local',
                )
        self.nxp_definition_local.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Local NXDL schema extended from the subentry
                specified in the ``definition`` field.                          This
                contains any locally-defined,                         additional fields in
                the subentry.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-field',
                )
        self.nxp_definition_local.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_definition_local.nxp_version = NX_CHAR()
        self.nxp_definition_local.nxp_version.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='version',
                )
        self.nxp_definition_local.nxp_version.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                NXDL version number''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-definition-local-attribute',
                )
        self.nxp_definition_local.nxp_version.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_definition_local.nxp_URL = NX_CHAR()
        self.nxp_definition_local.nxp_URL.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='URL',
                )
        self.nxp_definition_local.nxp_URL.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                URL of NXDL file''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-definition-local-attribute',
                )
        self.nxp_definition_local.nxp_URL.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_start_time = NX_DATE_TIME()
        self.nxp_start_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start_time',
                )
        self.nxp_start_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_start_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Starting time of measurement''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-field',
                )
        self.nxp_start_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_end_time = NX_DATE_TIME()
        self.nxp_end_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='end_time',
                )
        self.nxp_end_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_end_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Ending time of measurement''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-field',
                )
        self.nxp_end_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_duration = NX_INT()
        self.nxp_duration.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='duration',
                )
        self.nxp_duration.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_duration.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_duration.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Duration of measurement''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-field',
                )
        self.nxp_duration.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_collection_time = NX_FLOAT()
        self.nxp_collection_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='collection_time',
                )
        self.nxp_collection_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_collection_time.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_collection_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Time transpired actually collecting data i.e. taking out time when
                collection was                         suspended due to e.g. temperature
                out of range''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-field',
                )
        self.nxp_collection_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_run_cycle = NX_CHAR()
        self.nxp_run_cycle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='run_cycle',
                )
        self.nxp_run_cycle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Such as "2007-3". Some user facilities organize their beam time into run
                cycles.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-field',
                )
        self.nxp_run_cycle.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_program_name = NX_CHAR()
        self.nxp_program_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='program_name',
                )
        self.nxp_program_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Name of program used to generate this file''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-field',
                )
        self.nxp_program_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_program_name.nxp_version = NX_CHAR()
        self.nxp_program_name.nxp_version.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='version',
                )
        self.nxp_program_name.nxp_version.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Program version number''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-program-name-attribute',
                )
        self.nxp_program_name.nxp_version.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_program_name.nxp_configuration = NX_CHAR()
        self.nxp_program_name.nxp_configuration.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='configuration',
                )
        self.nxp_program_name.nxp_configuration.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                configuration of the program''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-program-name-attribute',
                )
        self.nxp_program_name.nxp_configuration.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_revision = NX_CHAR()
        self.nxp_revision.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='revision',
                )
        self.nxp_revision.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Revision id of the file due to re-calibration, reprocessing, new analysis,
                new                         instrument definition format, ...''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-field',
                )
        self.nxp_revision.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_revision.nxp_comment = NX_CHAR()
        self.nxp_revision.nxp_comment.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='comment',
                )
        self.nxp_revision.nxp_comment.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-revision-attribute',
                )
        self.nxp_revision.nxp_comment.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_pre_sample_flightpath = NX_FLOAT()
        self.nxp_pre_sample_flightpath.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='pre_sample_flightpath',
                )
        self.nxp_pre_sample_flightpath.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_pre_sample_flightpath.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_pre_sample_flightpath.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is the flightpath before the sample position. This can be determined
                by a chopper,                         by the moderator or the source
                itself. In other words: it the distance to the component
                which gives the T0 signal to the detector electronics. If another
                component in the                         NXinstrument hierarchy provides
                this information, this should be a link.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-field',
                )
        self.nxp_pre_sample_flightpath.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting
                Declares which :ref:`NXdata` group contains the data
                to be shown by default.                         It is needed to resolve
                ambiguity when more than                          one :ref:`NXdata` group
                exists.                          The value is the name of the default
                :ref:`NXdata` group.                                                  It
                is recommended (as of NIAC2014) to use this attribute
                to help define the path to the default dataset to be plotted.
                See https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_IDF_Version = NX_CHAR()
        self.nxp_IDF_Version.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='IDF_Version',
                )
        self.nxp_IDF_Version.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ISIS Muon IDF_Version''',
                default='https://manual.nexusformat.org/classes/base_classes/NXsubentry.html#nxsubentry-attribute',
                )
        self.nxp_IDF_Version.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXentry(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXentry',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    (**required**) :ref:`NXentry` describes the measurement.
        The top-level NeXus group which contains all the data and associated
        information that comprise a single measurement.                  It is mandatory
        that there is at least one                 group of this type in the NeXus file.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_DATA = NXdata()
        self.nxp_DATA.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_DATA.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The data group                                          .. note:: Before
                the NIAC2016 meeting [#]_, at least one
                :ref:`NXdata` group was required in each :ref:`NXentry` group.
                At the NIAC2016 meeting, it was decided to make :ref:`NXdata`
                an optional group in :ref:`NXentry` groups for data files that
                do not use an application definition.                            It is
                recommended strongly that all NeXus data files provide
                a NXdata group.                              It is permissable to omit the
                NXdata group only when                             defining the default
                plot is not practical or possible                            from the
                available data.                                                        For
                example, neutron event data may not have anything that
                makes a useful plot without extensive processing.
                Certain application definitions override this decision and
                require an :ref:`NXdata` group                            in the
                :ref:`NXentry` group.  The ``minOccurs=0`` attribute
                in the application definition will indicate the
                :ref:`NXdata` group                            is optional, otherwise, it
                is required.                                     .. [#] NIAC2016:
                https://www.nexusformat.org/NIAC2016.html,
                https://github.com/nexusformat/NIAC/issues/16''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-group',
                )
        self.nxp_DATA.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_experiment_documentation = NXnote()
        self.nxp_experiment_documentation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXnote',
                )
        self.nxp_experiment_documentation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='experiment_documentation',
                )
        self.nxp_experiment_documentation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Description of the full experiment (document in pdf, latex, ...)''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-group',
                )
        self.nxp_experiment_documentation.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_notes = NXnote()
        self.nxp_notes.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='notes',
                )
        self.nxp_notes.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXnote',
                )
        self.nxp_notes.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Notes describing entry''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-group',
                )
        self.nxp_notes.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_thumbnail = NXnote()
        self.nxp_thumbnail.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='thumbnail',
                )
        self.nxp_thumbnail.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXnote',
                )
        self.nxp_thumbnail.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                A small image that is representative of the entry. An example of this is a
                640x480                         jpeg image automatically produced by a low
                resolution plot of the NXdata.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-group',
                )
        self.nxp_thumbnail.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_thumbnail.nxp_type = NX_CHAR()
        self.nxp_thumbnail.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_thumbnail.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The mime type should be an ``image/*``''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-thumbnail-attribute',
                )
        self.nxp_thumbnail.nxp_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_thumbnail.nxp_type.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='image/*',
                )



        self.nxp_USER = NXuser()
        self.nxp_USER.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXuser',
                )
        self.nxp_USER.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-group',
                )
        self.nxp_USER.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_SAMPLE = NXsample()
        self.nxp_SAMPLE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_SAMPLE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-group',
                )
        self.nxp_SAMPLE.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_INSTRUMENT = NXinstrument()
        self.nxp_INSTRUMENT.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_INSTRUMENT.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-group',
                )
        self.nxp_INSTRUMENT.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_COLLECTION = NXcollection()
        self.nxp_COLLECTION.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcollection',
                )
        self.nxp_COLLECTION.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-group',
                )
        self.nxp_COLLECTION.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_MONITOR = NXmonitor()
        self.nxp_MONITOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonitor',
                )
        self.nxp_MONITOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-group',
                )
        self.nxp_MONITOR.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_PARAMETERS = NXparameters()
        self.nxp_PARAMETERS.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXparameters',
                )
        self.nxp_PARAMETERS.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-group',
                )
        self.nxp_PARAMETERS.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_PROCESS = NXprocess()
        self.nxp_PROCESS.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXprocess',
                )
        self.nxp_PROCESS.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-group',
                )
        self.nxp_PROCESS.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_SUBENTRY = NXsubentry()
        self.nxp_SUBENTRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsubentry',
                )
        self.nxp_SUBENTRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-group',
                )
        self.nxp_SUBENTRY.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_title = NX_CHAR()
        self.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Extended title for entry''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-field',
                )
        self.nxp_title.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_experiment_identifier = NX_CHAR()
        self.nxp_experiment_identifier.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='experiment_identifier',
                )
        self.nxp_experiment_identifier.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Unique identifier for the experiment,                          defined by
                the facility,                          possibly linked to the proposals''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-field',
                )
        self.nxp_experiment_identifier.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_experiment_description = NX_CHAR()
        self.nxp_experiment_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='experiment_description',
                )
        self.nxp_experiment_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Brief summary of the experiment, including key objectives.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-field',
                )
        self.nxp_experiment_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_collection_identifier = NX_CHAR()
        self.nxp_collection_identifier.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='collection_identifier',
                )
        self.nxp_collection_identifier.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                User or Data Acquisition defined group of NeXus files or NXentry''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-field',
                )
        self.nxp_collection_identifier.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_collection_description = NX_CHAR()
        self.nxp_collection_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='collection_description',
                )
        self.nxp_collection_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Brief summary of the collection, including grouping criteria.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-field',
                )
        self.nxp_collection_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry_identifier = NX_CHAR()
        self.nxp_entry_identifier.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry_identifier',
                )
        self.nxp_entry_identifier.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                unique identifier for the measurement, defined by the facility.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-field',
                )
        self.nxp_entry_identifier.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry_identifier_uuid = NX_CHAR()
        self.nxp_entry_identifier_uuid.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry_identifier_uuid',
                )
        self.nxp_entry_identifier_uuid.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                UUID identifier for the measurement.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-field',
                )
        self.nxp_entry_identifier_uuid.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry_identifier_uuid.nxp_version = NX_CHAR()
        self.nxp_entry_identifier_uuid.nxp_version.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='version',
                )
        self.nxp_entry_identifier_uuid.nxp_version.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Version of UUID used''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-entry-identifier-uuid-attribute',
                )
        self.nxp_entry_identifier_uuid.nxp_version.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_features = NX_CHAR()
        self.nxp_features.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='features',
                )
        self.nxp_features.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Reserved for future use by NIAC.

                See https://github.com/nexusformat/definitions/issues/382''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-field',
                )
        self.nxp_features.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_definition = NX_CHAR()
        self.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                (alternate use: see same field in :ref:`NXsubentry` for preferred)
                Official NeXus NXDL schema to which this entry conforms.
                This field is provided so that :ref:`NXentry` can be the overlay position
                in a NeXus data file for an application definition and its
                set of groups, fields, and attributes.
                *It is advised* to use :ref:`NXsubentry`, instead, as the overlay
                position.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-field',
                )
        self.nxp_definition.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_definition.nxp_version = NX_CHAR()
        self.nxp_definition.nxp_version.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='version',
                )
        self.nxp_definition.nxp_version.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                NXDL version number''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-definition-attribute',
                )
        self.nxp_definition.nxp_version.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_definition.nxp_URL = NX_CHAR()
        self.nxp_definition.nxp_URL.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='URL',
                )
        self.nxp_definition.nxp_URL.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                URL of NXDL file''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-definition-attribute',
                )
        self.nxp_definition.nxp_URL.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_definition_local = NX_CHAR()
        self.nxp_definition_local.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition_local',
                )
        self.nxp_definition_local.nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='see same field in :ref:`NXsubentry` for preferred use',
                )
        self.nxp_definition_local.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Local NXDL schema extended from the entry
                specified in the ``definition`` field.                          This
                contains any locally-defined,                         additional fields in
                the entry.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-field',
                )
        self.nxp_definition_local.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_definition_local.nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_definition_local.nxp_version = NX_CHAR()
        self.nxp_definition_local.nxp_version.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='version',
                )
        self.nxp_definition_local.nxp_version.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                NXDL version number''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-definition-local-attribute',
                )
        self.nxp_definition_local.nxp_version.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_definition_local.nxp_URL = NX_CHAR()
        self.nxp_definition_local.nxp_URL.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='URL',
                )
        self.nxp_definition_local.nxp_URL.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                URL of NXDL file''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-definition-local-attribute',
                )
        self.nxp_definition_local.nxp_URL.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_start_time = NX_DATE_TIME()
        self.nxp_start_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start_time',
                )
        self.nxp_start_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_start_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Starting time of measurement''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-field',
                )
        self.nxp_start_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_end_time = NX_DATE_TIME()
        self.nxp_end_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='end_time',
                )
        self.nxp_end_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_end_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Ending time of measurement''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-field',
                )
        self.nxp_end_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_duration = NX_INT()
        self.nxp_duration.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='duration',
                )
        self.nxp_duration.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_duration.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_duration.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Duration of measurement''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-field',
                )
        self.nxp_duration.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_collection_time = NX_FLOAT()
        self.nxp_collection_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='collection_time',
                )
        self.nxp_collection_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_collection_time.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_collection_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Time transpired actually collecting data i.e. taking out time when
                collection was                         suspended due to e.g. temperature
                out of range''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-field',
                )
        self.nxp_collection_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_run_cycle = NX_CHAR()
        self.nxp_run_cycle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='run_cycle',
                )
        self.nxp_run_cycle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Such as "2007-3". Some user facilities organize their beam time into run
                cycles.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-field',
                )
        self.nxp_run_cycle.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_program_name = NX_CHAR()
        self.nxp_program_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='program_name',
                )
        self.nxp_program_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Name of program used to generate this file''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-field',
                )
        self.nxp_program_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_program_name.nxp_version = NX_CHAR()
        self.nxp_program_name.nxp_version.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='version',
                )
        self.nxp_program_name.nxp_version.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Program version number''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-program-name-attribute',
                )
        self.nxp_program_name.nxp_version.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_program_name.nxp_configuration = NX_CHAR()
        self.nxp_program_name.nxp_configuration.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='configuration',
                )
        self.nxp_program_name.nxp_configuration.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                configuration of the program''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-program-name-attribute',
                )
        self.nxp_program_name.nxp_configuration.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_revision = NX_CHAR()
        self.nxp_revision.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='revision',
                )
        self.nxp_revision.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Revision id of the file due to re-calibration, reprocessing, new analysis,
                new                         instrument definition format, ...''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-field',
                )
        self.nxp_revision.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_revision.nxp_comment = NX_CHAR()
        self.nxp_revision.nxp_comment.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='comment',
                )
        self.nxp_revision.nxp_comment.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-revision-attribute',
                )
        self.nxp_revision.nxp_comment.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_pre_sample_flightpath = NX_FLOAT()
        self.nxp_pre_sample_flightpath.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='pre_sample_flightpath',
                )
        self.nxp_pre_sample_flightpath.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_pre_sample_flightpath.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_pre_sample_flightpath.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is the flightpath before the sample position. This can be determined
                by a chopper,                         by the moderator or the source
                itself. In other words: it the distance to the component
                which gives the T0 signal to the detector electronics. If another
                component in the                         NXinstrument hierarchy provides
                this information, this should be a link.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-field',
                )
        self.nxp_pre_sample_flightpath.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting
                Declares which :ref:`NXdata` (or :ref:`NXsubentry`) group
                contains the data to be shown by default.                         It is
                needed to resolve ambiguity when more than one :ref:`NXdata` group exists.
                The value is the name of the default :ref:`NXdata` group.
                It is recommended (as of NIAC2014 [#]_) to use this attribute
                to help define the path to the default dataset to be plotted.
                .. [#] NIAC2014 discussion summary:
                https://www.nexusformat.org/2014_How_to_find_default_data.html''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_IDF_Version = NX_CHAR()
        self.nxp_IDF_Version.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='IDF_Version',
                )
        self.nxp_IDF_Version.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ISIS Muon IDF_Version''',
                default='https://manual.nexusformat.org/classes/base_classes/NXentry.html#nxentry-attribute',
                )
        self.nxp_IDF_Version.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXroot(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='base',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXroot',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            Definition of the root NeXus group.
            ''',
            default='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot',)

        self.nxp_optional = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_ENTRY = NXentry()
        self.nxp_ENTRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_ENTRY.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                entries''',
                default='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-group',
                )
        self.nxp_ENTRY.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_NX_class = NX_CHAR()
        self.nxp_NX_class.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_class',
                )
        self.nxp_NX_class.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The root of any NeXus data file is an ``NXroot`` class              (no
                other choice is allowed for a valid NeXus data file).               This
                attribute cements that definition.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-attribute',
                )
        self.nxp_NX_class.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_NX_class.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXroot',
                )


        self.nxp_file_time = NX_DATE_TIME()
        self.nxp_file_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='file_time',
                )
        self.nxp_file_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_file_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Date and time file was originally created''',
                default='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-attribute',
                )
        self.nxp_file_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_file_name = NX_CHAR()
        self.nxp_file_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='file_name',
                )
        self.nxp_file_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                File name of original NeXus file''',
                default='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-attribute',
                )
        self.nxp_file_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_file_update_time = NX_DATE_TIME()
        self.nxp_file_update_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='file_update_time',
                )
        self.nxp_file_update_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_file_update_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Date and time of last file change at close''',
                default='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-attribute',
                )
        self.nxp_file_update_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_NeXus_version = NX_CHAR()
        self.nxp_NeXus_version.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NeXus_version',
                )
        self.nxp_NeXus_version.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Version of NeXus API used in writing the file.
                Only used when the NAPI has written the file.             Note that this
                is different from the version of the             base class or application
                definition version number.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-attribute',
                )
        self.nxp_NeXus_version.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_HDF_version = NX_CHAR()
        self.nxp_HDF_version.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='HDF_version',
                )
        self.nxp_HDF_version.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Version of HDF (version 4) library used in writing the file''',
                default='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-attribute',
                )
        self.nxp_HDF_version.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_HDF5_Version = NX_CHAR()
        self.nxp_HDF5_Version.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='HDF5_Version',
                )
        self.nxp_HDF5_Version.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Version of HDF5 library used in writing the file.
                Note this attribute is spelled with uppercase "V",             different
                than other version attributes.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-attribute',
                )
        self.nxp_HDF5_Version.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_XML_version = NX_CHAR()
        self.nxp_XML_version.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='XML_version',
                )
        self.nxp_XML_version.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Version of XML support library used in writing the XML file''',
                default='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-attribute',
                )
        self.nxp_XML_version.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_h5py_version = NX_CHAR()
        self.nxp_h5py_version.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='h5py_version',
                )
        self.nxp_h5py_version.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Version of h5py Python package used in writing the file''',
                default='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-attribute',
                )
        self.nxp_h5py_version.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_creator = NX_CHAR()
        self.nxp_creator.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='creator',
                )
        self.nxp_creator.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                facility or program where file originated''',
                default='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-attribute',
                )
        self.nxp_creator.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_creator_version = NX_CHAR()
        self.nxp_creator_version.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='creator_version',
                )
        self.nxp_creator_version.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Version of facility or program used in writing the file''',
                default='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-attribute',
                )
        self.nxp_creator_version.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting                          Declares which :ref:`NXentry`
                group contains              the data to be shown by default.
                It is needed to resolve ambiguity when              more than one
                :ref:`NXentry` group exists.              The value is the name of the
                default :ref:`NXentry` group.                          It is recommended
                (as of NIAC2014) to use this attribute             to help define the path
                to the default dataset to be plotted.             See
                https://www.nexusformat.org/2014_How_to_find_default_data.html
                for a summary of the discussion.''',
                default='https://manual.nexusformat.org/classes/base_classes/NXroot.html#nxroot-attribute',
                )
        self.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



class NXarpes(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXarpes',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    This is an application definition for angular resolved photo electron
        spectroscopy.          It has been drawn up with hemispherical electron analysers
        in mind.
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_ENTRY = NXentry()
        self.nxp_ENTRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_ENTRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-group',
                )
        self.nxp_ENTRY.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_entry = NX_CHAR()
        self.nxp_ENTRY.nxp_entry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry',
                )
        self.nxp_ENTRY.nxp_entry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                NeXus convention is to use "entry1", "entry2", ...          for analysis
                software to locate each entry.''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-attribute',
                )
        self.nxp_ENTRY.nxp_entry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_title = NX_CHAR()
        self.nxp_ENTRY.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_ENTRY.nxp_title.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-field',
                )
        self.nxp_ENTRY.nxp_title.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_start_time = NX_DATE_TIME()
        self.nxp_ENTRY.nxp_start_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start_time',
                )
        self.nxp_ENTRY.nxp_start_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_ENTRY.nxp_start_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-field',
                )
        self.nxp_ENTRY.nxp_start_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_definition = NX_CHAR()
        self.nxp_ENTRY.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_ENTRY.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms.''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-field',
                )
        self.nxp_ENTRY.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXarpes',
                )


        self.nxp_ENTRY.nxp_INSTRUMENT = NXinstrument()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE = NXsource()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsource',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_type = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_type.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-source-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_type.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_name.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-source-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='probe',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-source-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x-ray',
                )



        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator = NXmonochromator()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonochromator',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='monochromator',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_energy = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_energy.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='energy',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_energy.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_energy.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ENERGY',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_energy.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-monochromator-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_energy.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser = NXdetector()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='analyser',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_data = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_lens_mode = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_lens_mode.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='lens_mode',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_lens_mode.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_lens_mode.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                setting for the electron analyser lens''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_lens_mode.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_acquisition_mode = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_acquisition_mode.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='acquisition_mode',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_acquisition_mode.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_acquisition_mode.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_acquisition_mode.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='swept,fixed',
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_entrance_slit_shape = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_entrance_slit_shape.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entrance_slit_shape',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_entrance_slit_shape.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_entrance_slit_shape.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_entrance_slit_shape.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='curved,straight',
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_entrance_slit_setting = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_entrance_slit_setting.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entrance_slit_setting',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_entrance_slit_setting.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_entrance_slit_setting.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_entrance_slit_setting.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                dial setting of the entrance slit''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_entrance_slit_setting.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_entrance_slit_size = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_entrance_slit_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entrance_slit_size',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_entrance_slit_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_entrance_slit_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                size of the entrance slit''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_entrance_slit_size.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_pass_energy = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_pass_energy.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='pass_energy',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_pass_energy.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ENERGY',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_pass_energy.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                energy of the electrons on the mean path of the analyser''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_pass_energy.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_time_per_channel = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_time_per_channel.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='time_per_channel',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_time_per_channel.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_time_per_channel.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                todo: define more clearly''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_time_per_channel.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_angles = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_angles.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='angles',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_angles.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_angles.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_angles.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Angular axis of the analyser data             which dimension the axis
                applies to is defined             using the normal NXdata methods.''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_angles.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_energies = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_energies.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='energies',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_energies.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_energies.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ENERGY',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_energies.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Energy axis of the analyser data             which dimension the axis
                applies to is defined             using the normal NXdata methods.''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_energies.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_sensor_size = NX_INT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_sensor_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sensor_size',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_sensor_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_sensor_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                number of raw active elements in each dimension''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_sensor_size.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_region_origin = NX_INT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_region_origin.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='region_origin',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_region_origin.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_region_origin.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                origin of rectangular region selected for readout''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_region_origin.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_region_size = NX_INT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_region_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='region_size',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_region_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_region_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                size of rectangular region selected for readout''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-instrument-analyser-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_analyser.nxp_region_size.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_ENTRY.nxp_SAMPLE = NXsample()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-group',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_SAMPLE.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_name.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Descriptive name of sample''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_SAMPLE.nxp_temperature = NX_NUMBER()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_temperature.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='temperature',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_temperature.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_temperature.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TEMPERATURE',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_temperature.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_temperature.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_DATA = NXdata()
        self.nxp_ENTRY.nxp_DATA.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarpes.html#nxarpes-entry-group',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




class NXcanSAS(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXcanSAS',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    Implementation of the canSAS standard to store reduced small-angle scattering data
        of any dimension.                  .. index:: canSAS                  For more
        details, see:                  * http://www.cansas.org/         *
        http://www.cansas.org/formats/canSAS1d/1.1/doc/         * http://cansas-
        org.github.io/canSAS2012/         * https://github.com/canSAS-
        org/NXcanSAS_examples                  The minimum requirements for *reduced*
        small-angle scattering data          as described by canSAS are summarized in the
        following figure:                  .. _canSAS_2012_minimum:                  ..
        figure:: canSAS/2012-minimum.png            :width: 60%                        The
        minimum requirements for *reduced* small-angle scattering data.
        (:download:`full image <canSAS/2012-minimum.png>`)            See :ref:`below
        <NXcanSAS_minimum>` for the minimum required             information for a NeXus
        data file            written to the NXcanSAS specification.                  ..
        rubric::  Implementation of canSAS standard in NeXus                  This
        application definition is an implementation of the canSAS         standard for
        storing both one-dimensional and multi-dimensional          *reduced* small-angle
        scattering data.

        * NXcanSAS is for reduced SAS data and metadata to be stored together in one file.
        * *Reduced* SAS data consists of :math:`I(\\vec{Q})` or :math:`I(|\\vec{Q}|)`
        * External file links are not to be used for the reduced data.          * A good
        practice/practise is, at least, to include a reference to how the data was
        acquired and processed.  Yet this is not a requirement.         * There is no need
        for NXcanSAS to refer to any raw data.

        The canSAS data format has a structure similar to NeXus, not identical.         To
        allow canSAS data to be expressed in NeXus, yet identifiable         by the canSAS
        standard, an additional group attribute ``canSAS_class``         was introduced.
        Here is the mapping of some common groups.                  ===============
        ============  ==========================         group (*)        NX_class
        canSAS_class         ===============  ============  ==========================
        sasentry         NXentry       SASentry         sasdata          NXdata
        SASdata         sasdetector      NXdetector    SASdetector         sasinstrument
        NXinstrument  SASinstrument         sasnote          NXnote        SASnote
        sasprocess       NXprocess     SASprocess         sasprocessnote   NXcollection
        SASprocessnote         sastransmission  NXdata        SAStransmission_spectrum
        sassample        NXsample      SASsample         sassource        NXsource
        SASsource         ===============  ============  ==========================
        (*) The name of each group is a suggestion,         not a fixed requirement and is
        chosen as fits each data file.           See the section on defining
        :ref:`NXDL group and field names <RegExpName>`.                  Refer to the
        NeXus Coordinate System drawing (:ref:`Design-CoordinateSystem`)         for
        choice and direction of :math:`x`, :math:`y`, and :math:`z` axes.
        .. _NXcanSAS_minimum:                  .. rubric:: The minimum required
        information for a NeXus data file            written to the NXcanSAS
        specification.                  .. literalinclude:: canSAS/minimum-required.txt
        :tab-width: 4            :linenos:            :language: text
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_ENTRY = NXentry()
        self.nxp_ENTRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_ENTRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: NXcanSAS (applications); SASentry              Place the canSAS
                ``SASentry`` group as a child of a NeXus ``NXentry`` group       (when
                data from multiple techniques are being stored)       or as a replacement
                for the ``NXentry`` group.

                Note: It is required for all numerical objects to provide       a *units*
                attribute that describes the engineering units.        Use the Unidata
                UDunits [#]_ specification        as this is compatible with various
                community standards.              .. [#] The UDunits specification also
                includes instructions for derived units.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-group',
                )
        self.nxp_ENTRY.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_default = NX_CHAR()
        self.nxp_ENTRY.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_ENTRY.nxp_default.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_ENTRY.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting
                Declares which :ref:`NXdata` group                          contains the
                data to be shown by default.                         It is needed to
                resolve ambiguity when more than one :ref:`NXdata` group exists.
                The value is the name of the default :ref:`NXdata` group.
                Usually, this will be the name of the first *SASdata* group.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-attribute',
                )
        self.nxp_ENTRY.nxp_default.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_canSAS_class = NX_CHAR()
        self.nxp_ENTRY.nxp_canSAS_class.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='canSAS_class',
                )
        self.nxp_ENTRY.nxp_canSAS_class.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Official canSAS group: **SASentry**''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-attribute',
                )
        self.nxp_ENTRY.nxp_canSAS_class.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_canSAS_class.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SASentry',
                )


        self.nxp_ENTRY.nxp_version = NX_CHAR()
        self.nxp_ENTRY.nxp_version.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='version',
                )
        self.nxp_ENTRY.nxp_version.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Describes the version of the canSAS standard used to write this data.
                This must be a text (not numerical) representation. Such as::
                @version="1.1"''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-attribute',
                )
        self.nxp_ENTRY.nxp_version.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_version.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1.1',
                )


        self.nxp_ENTRY.nxp_definition = NX_CHAR()
        self.nxp_ENTRY.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_ENTRY.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this subentry conforms.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-field',
                )
        self.nxp_ENTRY.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcanSAS',
                )


        self.nxp_ENTRY.nxp_title = NX_CHAR()
        self.nxp_ENTRY.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_ENTRY.nxp_title.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_title.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Title of this *SASentry*.           Make it so that you can recognize the
                data by its title.         Could be the name of the sample,         the
                name for the measured data, or something else representative.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-field',
                )
        self.nxp_ENTRY.nxp_title.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_run = NX_CHAR()
        self.nxp_ENTRY.nxp_run.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='run',
                )
        self.nxp_ENTRY.nxp_run.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_run.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unbounded',
                )
        self.nxp_ENTRY.nxp_run.nxp_nameType= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='any',
                )
        self.nxp_ENTRY.nxp_run.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Run identification for this *SASentry*.          For many facilities, this
                is an integer, such as en experiment number.          Use multiple
                instances of ``run`` as needed, keeping         in mind that HDF5 requires
                unique names for all entities         in a group.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-field',
                )
        self.nxp_ENTRY.nxp_run.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_run.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_run.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_run.nxp_name.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_ENTRY.nxp_run.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Optional string attribute to identify this particular *run*.
                Could use this to associate (correlate) multiple *SASdata* elements with
                *run* elements.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-run-attribute',
                )
        self.nxp_ENTRY.nxp_run.nxp_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_DATA = NXdata()
        self.nxp_ENTRY.nxp_DATA.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                A *SASData* group contains a single reduced small-angle scattering data
                set          that can be represented as :math:`I(\\vec{Q})` or
                :math:`I(|\\vec{Q}|)`.                  *Q* can be either a vector
                (:math:`\\vec{Q}`) or a vector magnitude (:math:`|\\vec{Q}|`)
                The name of each *SASdata* group must be unique within a SASentry group.
                Suggest using names such as ``sasdata01``.                  NOTE:  For the
                first *SASdata* group, be sure to write the chosen name          into the
                `SASentry/@default` attribute, as in::
                SASentry/@default="sasdata01"                  A *SASdata* group has
                several attributes:                  * I_axes         * Q_indices
                * Mask_indices                  To indicate the dependency relationships
                of other varied parameters,          use attributes similar to
                ``@Mask_indices`` (such as ``@Temperature_indices``         or
                ``@Pressure_indices``).''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-group',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_DATA.nxp_canSAS_class = NX_CHAR()
        self.nxp_ENTRY.nxp_DATA.nxp_canSAS_class.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='canSAS_class',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_canSAS_class.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official canSAS group: :index:`NXcanSAS (applications); SASdata`''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-attribute',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_canSAS_class.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_DATA.nxp_canSAS_class.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SASdata',
                )


        self.nxp_ENTRY.nxp_DATA.nxp_signal = NX_CHAR()
        self.nxp_ENTRY.nxp_DATA.nxp_signal.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='signal',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_signal.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_signal.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Name of the default data field.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-attribute',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_signal.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_DATA.nxp_signal.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='I',
                )


        self.nxp_ENTRY.nxp_DATA.nxp_I_axes = NX_CHAR()
        self.nxp_ENTRY.nxp_DATA.nxp_I_axes.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='I_axes',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_I_axes.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                String array that defines the independent data fields used in
                the default plot for all of the dimensions of the *signal* field
                (the *signal* field is the field in this group that is named by
                the ``signal`` attribute of this group).            One entry is provided
                for every dimension of the ``I`` data object.             Such as::
                @I_axes="Temperature", "Time", "Pressure", "Q", "Q"
                Since there are five items in the list, the intensity field of this
                example           ``I`` must be a five-dimensional array (rank=5).''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-attribute',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_I_axes.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DATA.nxp_Q_indices = NX_INT()
        self.nxp_ENTRY.nxp_DATA.nxp_Q_indices.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='Q_indices',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Q_indices.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Q_indices.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Integer or integer array that describes which indices            (of the
                :math:`I` data object) are used to            reference the ``Q`` data
                object. The items in this array            use zero-based indexing.  Such
                as::                          @Q_indices=1,3,4                      which
                indicates that ``Q`` requires three indices           from the :math:`I`
                data object: one for time and           two for Q position.   Thus, in
                this example, the           ``Q`` data is time-dependent:
                :math:`\\vec{Q}(t)`.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-attribute',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Q_indices.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DATA.nxp_mask = NX_CHAR()
        self.nxp_ENTRY.nxp_DATA.nxp_mask.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='mask',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_mask.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_mask.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Name of the data mask field.                      .. see:
                https://github.com/nexusformat/definitions/issues/533
                The data *mask* must have the same shape as the *data* field.
                Positions in the mask correspond to positions in the *data* field.
                The value of the mask field may be either a boolean array            where
                ``false`` means *no mask* and ``true`` means *mask*           or a more
                descriptive array as as defined in :ref:`NXdetector`.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-attribute',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_mask.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DATA.nxp_Mask_indices = NX_CHAR()
        self.nxp_ENTRY.nxp_DATA.nxp_Mask_indices.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='Mask_indices',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Mask_indices.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Mask_indices.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Integer or integer array that describes which indices           (of the
                :math:`I` data object) are used to            reference the ``Mask`` data
                object.  The items in this           array use zero-based indexing.  Such
                as::                          @Mask_indices=3,4                      which
                indicates that Q requires two indices           from the :math:`I` data
                object for Q position.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-attribute',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Mask_indices.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DATA.nxp_timestamp = NX_DATE_TIME()
        self.nxp_ENTRY.nxp_DATA.nxp_timestamp.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='timestamp',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_timestamp.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_timestamp.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_timestamp.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                ISO-8601 time [#iso8601]_''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-attribute',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_timestamp.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DATA.nxp_Q = NX_NUMBER()
        self.nxp_ENTRY.nxp_DATA.nxp_Q.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='Q',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Q.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Q.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_PER_LENGTH',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Q.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: NXcanSAS (applications); Q
                Array of :math:`Q` data to accompany :math:`I`.                      ..
                figure:: canSAS/Q-geometry.jpg                 :width: 60%
                The :math:`\\vec{Q}` geometry.                 (:download:`full image
                <canSAS/Q-geometry.jpg>`)                      :math:`Q` may be
                represented as either           the three-dimensional scattering vector
                :math:`\\vec{Q}`           or the magnitude of the scattering vector,
                :math:`|\\vec{Q}|`.                      .. math::  |\\vec{Q}| =
                (4\\pi/\\lambda) sin(\\theta)                       When we write :math:`Q`,
                we may refer to either or both of            :math:`|\\vec{Q}|`
                or :math:`\\vec{Q}`,  depending on the context.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-field',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Q.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_DATA.nxp_Q.nxp_units = NX_CHAR()
        self.nxp_ENTRY.nxp_DATA.nxp_Q.nxp_units.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='units',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Q.nxp_units.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='false',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Q.nxp_units.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Engineering units to use when expressing             :math:`Q` and related
                terms.                          Data expressed in other units will
                generate             a warning from validation software and may not
                be processed by some analysis software packages.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-q-attribute',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Q.nxp_units.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Q.nxp_units.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1/m,1/nm,1/angstrom',
                )


        self.nxp_ENTRY.nxp_DATA.nxp_Q.nxp_uncertainties = NX_CHAR()
        self.nxp_ENTRY.nxp_DATA.nxp_Q.nxp_uncertainties.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='uncertainties',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Q.nxp_uncertainties.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Q.nxp_uncertainties.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                (optional: for numerical arrays)                           Names the
                dataset (in this SASdata group) that provides the              uncertainty
                to be used for data analysis.               The name of the dataset
                containing the :math:`Q` uncertainty             is flexible.  The name
                must be unique in the *SASdata* group.                          .. comment
                see: https://github.com/canSAS-org/canSAS2012/issues/7
                Such as::                              @uncertainties="Q_uncertainties"
                The *uncertainties* field will have the same *shape* (dimensions)
                as the Q field.                          These values are the estimates of
                uncertainty of each Q. By default,              this will be interpreted
                to be the estimated standard deviation.              In special cases,
                when a standard deviation cannot possibly be used,              its value
                can specify another measure of distribution width.
                There may also be a subdirectory (optional) with constituent
                components.

                .. note:: To report distribution in reported :math:`Q` values,
                use the ``@resolutions`` attribute.  It is possible for both
                ``@resolutions`` and ``uncertainties`` to be reported.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-q-attribute',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Q.nxp_uncertainties.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DATA.nxp_Q.nxp_resolutions = NX_CHAR()
        self.nxp_ENTRY.nxp_DATA.nxp_Q.nxp_resolutions.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='resolutions',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Q.nxp_resolutions.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Q.nxp_resolutions.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Q.nxp_resolutions.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: NXcanSAS (applications); resolutions
                (optional: for numerical arrays)                           Names the
                dataset (in this SASdata group) containing the :math:`Q` resolution.
                The name of the dataset containing the :math:`Q` resolution             is
                flexible.  The name must be unique in the *SASdata* group.
                .. comment                see: https://github.com/canSAS-
                org/canSAS2012/issues/7                          The *resolutions* field
                will have the same *shape* (dimensions)             as the Q field.
                Generally, this is the principal resolution of each :math:`Q`.
                Names the data object (in this SASdata group) that provides the
                :math:`Q` resolution to be used for data analysis.  Such as::
                @resolutions="Qdev"                          To specify two-dimensional
                resolution for slit-smearing geometry,              such as (*dQw*,
                *dQl*), use a string array, such as::
                @resolutions="dQw", "dQl"                          There may also be a
                subdirectory (optional) with constituent              components.
                This pattern will demonstrate how to introduce further as-yet
                unanticipated terms related to the data.                          ..
                comment                 see: https://github.com/nexusformat/definitions/is
                sues/492#issuecomment-262813907                          By default, the
                values of the resolutions data object are assumed to be             one
                standard deviation of any function used to approximate the
                resolution function. This equates to the width of the gaussian
                distribution if a Gaussian is chosen.  See the
                ``@resolutions_description``             attribute.
                .. note:: To report uncertainty in reported :math:`Q` values,
                use the ``@uncertainties`` attribute.  It is possible for both
                ``@resolutions`` and ``uncertainties`` to be reported.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-q-attribute',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Q.nxp_resolutions.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DATA.nxp_Q.nxp_resolutions_description = NX_CHAR()
        self.nxp_ENTRY.nxp_DATA.nxp_Q.nxp_resolutions_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='resolutions_description',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Q.nxp_resolutions_description.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Q.nxp_resolutions_description.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Q.nxp_resolutions_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                (optional)              Generally, this describes the :math:`Q`
                ``@resolutions`` data object.             By default, the value is assumed
                to be "Gaussian".  These are             suggestions:
                * Gaussian             * Lorentzian             * Square :
                note that the full width of the square would be ~2.9 times
                the standard deviation specified in the vector             * Triangular
                * Sawtooth-outward : vertical edge pointing to larger Q             *
                Sawtooth-inward vertical edge pointing to smaller Q             * Bin :
                range of values contributing               (for example, when 2-D detector
                data have been reduced                to a 1-D :math:`I(|Q|)` dataset)
                For other meanings, it may be necessary to provide further details
                such as the function used to assess the resolution.             In such
                cases, use additional datasets or a :ref:`NXnote` subgroup             to
                include that detail.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-q-attribute',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Q.nxp_resolutions_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_DATA.nxp_I = NX_NUMBER()
        self.nxp_ENTRY.nxp_DATA.nxp_I.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='I',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_I.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_I.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: NXcanSAS (applications); I
                Array of intensity (:math:`I`) data.                      The intensity
                may be represented in one of these forms:                      **absolute
                units**: :math:`d\\Sigma/d\\Omega(Q)`           differential cross-section
                per unit volume per unit solid angle (such as: 1/cm/sr or 1/m/sr)
                **absolute units**: :math:`d\\sigma/d\\Omega(Q)`           differential
                cross-section           per unit atom per unit solid angle (such as: cm^2
                or m^2)                      **arbitrary units**: :math:`I(Q)`
                usually a ratio of two detectors            but units are meaningless
                (such as: a.u. or counts)                      This presents a few
                problems            for analysis software to sort out when reading the
                data.           Fortunately, it is possible to analyze the *units* to
                determine which type of           intensity is being reported and make
                choices at the time the file is read. But this is           an area for
                consideration and possible improvement.                      One problem
                arises with software that automatically converts data into some canonical
                units used by that software. The software should not convert units between
                these different           types of intensity indiscriminately.
                A second problem is that when arbitrary units are used, then the set of
                possible           analytical results is restricted.  With such units, no
                meaningful volume fraction            or number density can be determined
                directly from :math:`I(Q)`.                      In some cases, it is
                possible to apply a factor to convert the arbitrary            units to an
                absolute scale.  This should be considered as a possibility            of
                the analysis process.                      Where this documentation says
                *typical units*, it is possible that small-angle           data may be
                presented in other units and still be consistent with NeXus.           See
                the :ref:`design-units` section.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-field',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_I.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_DATA.nxp_I.nxp_units = NX_CHAR()
        self.nxp_ENTRY.nxp_DATA.nxp_I.nxp_units.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='units',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_I.nxp_units.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='false',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_I.nxp_units.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Engineering units to use when expressing             :math:`I` and
                intensity-related terms.                          Data expressed in other
                units (or missing a ``@units`` attribute)             will be treated as
                ``arbitrary`` by some software packages.                          For
                software using the UDUNITS-2 library, ``arbitrary`` will be
                changed to ``unknown`` for handling with that library.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-i-attribute',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_I.nxp_units.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_DATA.nxp_I.nxp_units.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1/m,1/cm,m2/g,cm2/g,arbitrary',
                )


        self.nxp_ENTRY.nxp_DATA.nxp_I.nxp_uncertainties = NX_CHAR()
        self.nxp_ENTRY.nxp_DATA.nxp_I.nxp_uncertainties.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='uncertainties',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_I.nxp_uncertainties.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_I.nxp_uncertainties.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                (optional: for numerical arrays)                           Names the
                dataset (in this SASdata group) that provides the              uncertainty
                of :math:`I` to be used for data analysis.               The name of the
                dataset containing the :math:`I` uncertainty             is flexible.  The
                name must be unique in the *SASdata* group.                          ..
                comment                see: https://github.com/canSAS-
                org/canSAS2012/issues/7                          Generally, this is the
                estimate of the uncertainty of each :math:`I`.             Typically the
                estimated standard deviation.                            *Idev* is the
                canonical name from the 1D standard.               The NXcanSAS standard
                allows for the name to be described using this attribute.             Such
                as::                              @uncertainties="Idev"''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-i-attribute',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_I.nxp_uncertainties.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DATA.nxp_I.nxp_scaling_factor = NX_CHAR()
        self.nxp_ENTRY.nxp_DATA.nxp_I.nxp_scaling_factor.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='scaling_factor',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_I.nxp_scaling_factor.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_I.nxp_scaling_factor.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                (optional)              Names the field (a.k.a. dataset) that contains a
                factor             to multiply ``I``.  By default, this value is unity.
                Should an uncertainty be associated with the scaling factor
                field, the field containing that uncertainty would be
                designated via the ``uncertainties`` attribute.               Such as::
                I : NX_NUMBER                   @uncertainties="Idev" : NX_CHAR
                @scaling_factor="I_scaling" : NX_CHAR               Idev : NX_NUMBER
                I_scaling : NX_NUMBER                   @uncertainties="I_scaling_dev" :
                NX_CHAR               I_scaling_dev : NX_NUMBER
                The exact names for ``I_scaling`` and ``I_scaling_dev`` are not
                defined by NXcanSAS.  The user has the flexibility to use names
                different than those shown in this example.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-i-attribute',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_I.nxp_scaling_factor.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_DATA.nxp_Idev = NX_NUMBER()
        self.nxp_ENTRY.nxp_DATA.nxp_Idev.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='Idev',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Idev.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Idev.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Idev.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: NXcanSAS (applications); Idev                      Estimated
                **uncertainty** (usually standard deviation)           in :math:`I`.  Must
                have the same units as :math:`I`.

                When present, the name of this field is also            recorded in the
                *uncertainties* attribute of *I*, as in::
                I/@uncertainties="Idev"''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-field',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Idev.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_DATA.nxp_Idev.nxp_units = NX_CHAR()
        self.nxp_ENTRY.nxp_DATA.nxp_Idev.nxp_units.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='units',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Idev.nxp_units.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='false',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Idev.nxp_units.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Engineering units to use when expressing             :math:`I` and
                intensity-related terms.                          Data expressed in other
                units (or missing a ``@units`` attribute)             will generate a
                warning from any validation process             and will be treated as
                ``arbitrary`` by some analysis software packages.
                For software using the UDUNITS-2 library, ``arbitrary`` will be
                changed to ``unknown`` for handling with that library.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-idev-attribute',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Idev.nxp_units.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Idev.nxp_units.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1/m,1/cm,m2/g,cm2/g,arbitrary',
                )



        self.nxp_ENTRY.nxp_DATA.nxp_Qdev = NX_NUMBER()
        self.nxp_ENTRY.nxp_DATA.nxp_Qdev.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='Qdev',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Qdev.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Qdev.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_PER_LENGTH',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Qdev.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Qdev.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: NXcanSAS (applications); Qdev                      Estimated
                :math:`Q` **resolution** (usually standard deviation).             Must
                have the same units as :math:`Q`.                      When present, the
                name of this field is also            recorded in the *resolutions*
                attribute of *Q*,            as in::
                Q/@resolutions="Qdev"

                or::

                Q/@resolutions="dQw", "dQl"''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-field',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Qdev.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_DATA.nxp_Qdev.nxp_units = NX_CHAR()
        self.nxp_ENTRY.nxp_DATA.nxp_Qdev.nxp_units.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='units',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Qdev.nxp_units.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='false',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Qdev.nxp_units.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Engineering units to use when expressing             :math:`Q` and related
                terms.                          Data expressed in other units may not be
                processed by some              software packages.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-qdev-attribute',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Qdev.nxp_units.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Qdev.nxp_units.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1/m,1/nm,1/angstrom',
                )



        self.nxp_ENTRY.nxp_DATA.nxp_dQw = NX_NUMBER()
        self.nxp_ENTRY.nxp_DATA.nxp_dQw.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='dQw',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_dQw.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_dQw.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_PER_LENGTH',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_dQw.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_dQw.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: NXcanSAS (applications); dQw                      :math:`Q`
                **resolution** along the axis of scanning            (the high-resolution
                *slit width* direction).            Useful for defining resolution data
                from            slit-smearing instruments such as Bonse-Hart geometry.
                Must have the same units as :math:`Q`.                      When present,
                the name of this field is also            recorded in the *resolutions*
                attribute of *Q*,            as in::
                Q/@resolutions="dQw", "dQl"''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-field',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_dQw.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_DATA.nxp_dQw.nxp_units = NX_CHAR()
        self.nxp_ENTRY.nxp_DATA.nxp_dQw.nxp_units.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='units',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_dQw.nxp_units.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='false',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_dQw.nxp_units.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Engineering units to use when expressing             :math:`Q` and related
                terms.                          Data expressed in other units may not be
                processed by some              software packages.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-dqw-attribute',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_dQw.nxp_units.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_DATA.nxp_dQw.nxp_units.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1/m,1/nm,1/angstrom',
                )



        self.nxp_ENTRY.nxp_DATA.nxp_dQl = NX_NUMBER()
        self.nxp_ENTRY.nxp_DATA.nxp_dQl.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='dQl',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_dQl.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_dQl.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_PER_LENGTH',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_dQl.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_dQl.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: NXcanSAS (applications); dQl                      :math:`Q`
                **resolution** perpendicular to the axis of scanning            (the low-
                resolution *slit length* direction).            Useful for defining
                resolution data from            slit-smearing instruments such as Bonse-
                Hart geometry.           Must have the same units as :math:`Q`.
                When present, the name of this field is also            recorded in the
                *resolutions* attribute of *Q*,            as in::
                Q/@resolutions="dQw", "dQl"''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-field',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_dQl.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_DATA.nxp_dQl.nxp_units = NX_CHAR()
        self.nxp_ENTRY.nxp_DATA.nxp_dQl.nxp_units.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='units',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_dQl.nxp_units.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='false',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_dQl.nxp_units.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Engineering units to use when expressing             :math:`Q` and related
                terms.                          Data expressed in other units may not be
                processed by some              software packages.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-dql-attribute',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_dQl.nxp_units.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_DATA.nxp_dQl.nxp_units.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1/m,1/nm,1/angstrom',
                )



        self.nxp_ENTRY.nxp_DATA.nxp_Qmean = NX_NUMBER()
        self.nxp_ENTRY.nxp_DATA.nxp_Qmean.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='Qmean',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Qmean.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Qmean.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_PER_LENGTH',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Qmean.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Qmean.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Mean value of :math:`Q` for this data point.            Useful when
                describing data that has been            binned from higher-resolution
                data.                       It is expected that ``Q`` is provided
                and that both ``Q`` and ``Qmean`` will have the same units.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-field',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Qmean.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_DATA.nxp_Qmean.nxp_units = NX_CHAR()
        self.nxp_ENTRY.nxp_DATA.nxp_Qmean.nxp_units.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='units',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Qmean.nxp_units.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='false',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Qmean.nxp_units.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Engineering units to use when expressing             :math:`Q` and related
                terms.                          Data expressed in other units may not be
                processed by some              software packages.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-qmean-attribute',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Qmean.nxp_units.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_DATA.nxp_Qmean.nxp_units.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1/m,1/nm,1/angstrom',
                )



        self.nxp_ENTRY.nxp_DATA.nxp_ShadowFactor = NX_CHAR()
        self.nxp_ENTRY.nxp_DATA.nxp_ShadowFactor.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='ShadowFactor',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_ShadowFactor.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_ShadowFactor.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DIMENSIONLESS',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_ShadowFactor.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                A numerical factor applied to pixels affected by the beam stop penumbra.
                Used in data files from NIST/NCNR instruments.                      See:
                J.G. Barker and J.S. Pedersen (1995) *J. Appl. Cryst.* **28**, 105-114.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-data-field',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_ShadowFactor.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_INSTRUMENT = NXinstrument()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Description of the small-angle scattering instrument.
                Consider, carefully, the relevance to the SAS data analysis process
                when adding subgroups in this **NXinstrument** group.  Additional
                information         can be added but will likely be ignored by
                standardized data anlysis processes.                  The NeXus
                :ref:`NXbeam` base class may be added as a subgroup of this
                **NXinstrument**         group *or* as a subgroup of the **NXsample**
                group to describe properties of the beam at any          point downstream
                from the source.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_canSAS_class = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_canSAS_class.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='canSAS_class',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_canSAS_class.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official canSAS group: :index:`NXcanSAS (applications); SASinstrument`''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-attribute',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_canSAS_class.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_canSAS_class.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SASinstrument',
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE = NXaperture()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXaperture',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                :ref:`NXaperture` is generic and limits the variation in data files.
                Possible NeXus base class alternatives are: :ref:`NXpinhole` or
                :ref:`NXslit`.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE.nxp_canSAS_class = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE.nxp_canSAS_class.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='canSAS_class',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE.nxp_canSAS_class.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official canSAS group: :index:`NXcanSAS (applications); SASaperture`''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-aperture-attribute',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE.nxp_canSAS_class.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE.nxp_canSAS_class.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SASaperture',
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE.nxp_shape = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE.nxp_shape.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='shape',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE.nxp_shape.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                describe the type of aperture (pinhole, 4-blade slit, Soller slit, ...)''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-aperture-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE.nxp_shape.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE.nxp_x_gap = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE.nxp_x_gap.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x_gap',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE.nxp_x_gap.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE.nxp_x_gap.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE.nxp_x_gap.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE.nxp_x_gap.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE.nxp_x_gap.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                opening along the :math:`x` axis''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-aperture-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE.nxp_x_gap.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE.nxp_y_gap = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE.nxp_y_gap.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='y_gap',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE.nxp_y_gap.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE.nxp_y_gap.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE.nxp_y_gap.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE.nxp_y_gap.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE.nxp_y_gap.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                opening along the :math:`y` axis''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-aperture-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_APERTURE.nxp_y_gap.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_COLLIMATOR = NXcollimator()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_COLLIMATOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcollimator',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_COLLIMATOR.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_COLLIMATOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Description of a collimating element (defines the divergence of the beam)
                in the instrument.                      To document a slit, pinhole, or
                the beam, refer to the            documentation of the ``NXinstrument``
                group above.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_COLLIMATOR.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_COLLIMATOR.nxp_canSAS_class = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_COLLIMATOR.nxp_canSAS_class.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='canSAS_class',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_COLLIMATOR.nxp_canSAS_class.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official canSAS group: :index:`NXcanSAS (applications); SAScollimation`''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-collimator-attribute',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_COLLIMATOR.nxp_canSAS_class.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_COLLIMATOR.nxp_canSAS_class.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SAScollimation',
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_COLLIMATOR.nxp_length = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_COLLIMATOR.nxp_length.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='length',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_COLLIMATOR.nxp_length.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_COLLIMATOR.nxp_length.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_COLLIMATOR.nxp_length.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_COLLIMATOR.nxp_length.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_COLLIMATOR.nxp_length.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Amount/length of collimation inserted (as on a SANS instrument)''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-collimator-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_COLLIMATOR.nxp_length.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_COLLIMATOR.nxp_distance = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_COLLIMATOR.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_COLLIMATOR.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_COLLIMATOR.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_COLLIMATOR.nxp_distance.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_COLLIMATOR.nxp_distance.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_COLLIMATOR.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Distance from this collimation element to the sample''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-collimator-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_COLLIMATOR.nxp_distance.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR = NXdetector()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Description of a detector in the instrument.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_canSAS_class = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_canSAS_class.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='canSAS_class',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_canSAS_class.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official canSAS group: :index:`NXcanSAS (applications); SASdetector`''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-attribute',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_canSAS_class.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_canSAS_class.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SASdetector',
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_name.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Identifies the name of this detector''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_SDD = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_SDD.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SDD',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_SDD.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_SDD.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_SDD.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_SDD.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_SDD.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Distance between sample and detector.                          Note: In
                NXdetector, the ``distance`` field records the              distance to
                the previous component ... most often the sample.             This use is
                the same as ``SDD`` for most SAS              instruments but not all.
                For example, Bonse-Hart cameras              have one or more crystals
                between the sample and detector.                            We define here
                the field ``SDD`` to document without             ambiguity the distance
                between sample and detector.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_SDD.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_slit_length = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_slit_length.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='slit_length',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_slit_length.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_slit_length.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_PER_LENGTH',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_slit_length.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_slit_length.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_slit_length.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Slit length of the instrument for this detector,              expressed in
                the same units as :math:`Q`.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_slit_length.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_x_position = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_x_position.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x_position',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_x_position.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_x_position.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_x_position.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_x_position.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_x_position.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Location of the detector in :math:`x`''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_x_position.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_y_position = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_y_position.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='y_position',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_y_position.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_y_position.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_y_position.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_y_position.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_y_position.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Location of the detector in :math:`y`''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_y_position.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_roll = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_roll.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='roll',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_roll.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_roll.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_roll.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_roll.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_roll.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Rotation of the detector about the :math:`z` axis (roll)''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_roll.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_pitch = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_pitch.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='pitch',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_pitch.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_pitch.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_pitch.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_pitch.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_pitch.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Rotation of the detector about the :math:`x` axis (roll)''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_pitch.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_yaw = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_yaw.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='yaw',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_yaw.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_yaw.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_yaw.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_yaw.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_yaw.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Rotation of the detector about the :math:`y` axis (yaw)''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_yaw.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_x = NX_FLOAT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_x.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='beam_center_x',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_x.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_x.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_x.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_x.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_x.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Position of the beam center on the detector.                          This
                is the x position where the direct beam would hit the detector plane.
                This is a length and can be outside of the actual             detector.
                The length can be in physical units or pixels             as documented by
                the units attribute. The value can be any             real number
                (positive, zero, or negative).''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_x.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_y = NX_FLOAT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_y.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='beam_center_y',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_y.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_y.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_y.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_y.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_y.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Position of the beam center on the detector.                          This
                is the y position where the direct beam would hit the detector plane.
                This is a length and can be outside of the actual             detector.
                The length can be in physical units or pixels             as documented by
                the units attribute. The value can be any             real number
                (positive, zero, or negative).''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_y.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_x_pixel_size = NX_FLOAT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_x_pixel_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x_pixel_size',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_x_pixel_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_x_pixel_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_x_pixel_size.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_x_pixel_size.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_x_pixel_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Size of each detector pixel. If it is scalar all pixels are the same size''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_x_pixel_size.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_y_pixel_size = NX_FLOAT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_y_pixel_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='y_pixel_size',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_y_pixel_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_y_pixel_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_y_pixel_size.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_y_pixel_size.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_y_pixel_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Size of each detector pixel. If it is scalar all pixels are the same size''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_y_pixel_size.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE = NXsource()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsource',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Description of the radiation source.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_canSAS_class = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_canSAS_class.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='canSAS_class',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_canSAS_class.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official canSAS group: :index:`NXcanSAS (applications); SASsource`''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-attribute',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_canSAS_class.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_canSAS_class.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SASsource',
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_radiation = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_radiation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='radiation',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_radiation.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_radiation.nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='Use either (or both) ``probe`` or ``type`` fields from ``NXsource`` (issue #765)',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_radiation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Name of the radiation used.             Note that this is **not** the name
                of the facility!

                This field contains a value from either the              ``probe`` or
                ``type`` fields in :ref:`NXsource`. Thus,              it is redundant
                with existing NeXus structure.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_radiation.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_radiation.nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_radiation.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='Spallation Neutron Source,Pulsed Reactor Neutron Source,Reactor Neutron Source,Synchrotron X-ray Source,Pulsed Muon Source,Rotating Anode X-ray,Fixed Tube X-ray,UV Laser,Free-Electron Laser,Optical Laser,Ion Source,UV Plasma Source,neutron,x-ray,muon,electron,ultraviolet,visible light,positron,proton',
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_beam_shape = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_beam_shape.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='beam_shape',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_beam_shape.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_beam_shape.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_beam_shape.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Text description of the shape of the beam (incident on the sample).''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_beam_shape.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_incident_wavelength = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_incident_wavelength.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='incident_wavelength',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_incident_wavelength.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_incident_wavelength.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_incident_wavelength.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_incident_wavelength.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVELENGTH',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_incident_wavelength.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                wavelength (:math:`\\lambda`) of radiation incident on the sample''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_incident_wavelength.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_wavelength_min = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_wavelength_min.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='wavelength_min',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_wavelength_min.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_wavelength_min.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_wavelength_min.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_wavelength_min.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVELENGTH',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_wavelength_min.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Some facilities specify wavelength using a range.              This is the
                lowest wavelength in such a range.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_wavelength_min.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_wavelength_max = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_wavelength_max.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='wavelength_max',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_wavelength_max.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_wavelength_max.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_wavelength_max.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_wavelength_max.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVELENGTH',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_wavelength_max.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Some facilities specify wavelength using a range.              This is the
                highest wavelength in such a range.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_wavelength_max.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_incident_wavelength_spread = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_incident_wavelength_spread.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='incident_wavelength_spread',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_incident_wavelength_spread.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_incident_wavelength_spread.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_incident_wavelength_spread.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_incident_wavelength_spread.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVELENGTH',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_incident_wavelength_spread.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Some facilities specify wavelength using a range.              This is the
                width (FWHM) of such a range.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_incident_wavelength_spread.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_beam_size_x = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_beam_size_x.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='beam_size_x',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_beam_size_x.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_beam_size_x.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_beam_size_x.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_beam_size_x.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_beam_size_x.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Size of the incident beam along the x axis.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_beam_size_x.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_beam_size_y = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_beam_size_y.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='beam_size_y',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_beam_size_y.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_beam_size_y.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_beam_size_y.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_beam_size_y.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_beam_size_y.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Size of the incident beam along the y axis.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-instrument-source-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_beam_size_y.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_ENTRY.nxp_SAMPLE = NXsample()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Description of the sample.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-group',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_SAMPLE.nxp_canSAS_class = NX_CHAR()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_canSAS_class.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='canSAS_class',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_canSAS_class.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official canSAS group: :index:`NXcanSAS (applications); SASsample`''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-attribute',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_canSAS_class.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_canSAS_class.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SASsample',
                )


        self.nxp_ENTRY.nxp_SAMPLE.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_name.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                **ID**: Text string that identifies this sample.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_SAMPLE.nxp_thickness = NX_FLOAT()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_thickness.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='thickness',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_thickness.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_thickness.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_thickness.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_thickness.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_thickness.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Thickness of this sample''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_thickness.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_SAMPLE.nxp_transmission = NX_NUMBER()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_transmission.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='transmission',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_transmission.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_transmission.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_transmission.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_transmission.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DIMENSIONLESS',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_transmission.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Transmission (:math:`I/I_0`) of this sample.            There is no
                *units* attribute as this number is dimensionless.
                Note: the ability to store a transmission *spectrum*,            instead
                of a single value, is provided elsewhere in the structure,            in
                the *SAStransmission_spectrum* element.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_transmission.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_SAMPLE.nxp_temperature = NX_NUMBER()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_temperature.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='temperature',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_temperature.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_temperature.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_temperature.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_temperature.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TEMPERATURE',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_temperature.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Temperature of this sample.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_temperature.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_SAMPLE.nxp_details = NX_CHAR()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_details.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='details',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_details.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_details.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unbounded',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_details.nxp_nameType= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='any',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_details.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Any additional sample details.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_details.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_SAMPLE.nxp_x_position = NX_NUMBER()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_x_position.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x_position',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_x_position.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_x_position.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_x_position.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_x_position.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_x_position.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Location of the sample in :math:`x`''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_x_position.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_SAMPLE.nxp_y_position = NX_NUMBER()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_y_position.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='y_position',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_y_position.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_y_position.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_y_position.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_y_position.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_y_position.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Location of the sample in :math:`y`''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_y_position.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_SAMPLE.nxp_roll = NX_NUMBER()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_roll.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='roll',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_roll.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_roll.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_roll.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_roll.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_roll.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Rotation of the sample about the :math:`z` axis (roll)''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_roll.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_SAMPLE.nxp_pitch = NX_NUMBER()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_pitch.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='pitch',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_pitch.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_pitch.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_pitch.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_pitch.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_pitch.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Rotation of the sample about the :math:`x` axis (roll)''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_pitch.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_SAMPLE.nxp_yaw = NX_NUMBER()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_yaw.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='yaw',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_yaw.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_yaw.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_yaw.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_yaw.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_yaw.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Rotation of the sample about the :math:`y` axis (yaw)''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_yaw.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_PROCESS = NXprocess()
        self.nxp_ENTRY.nxp_PROCESS.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXprocess',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unbounded',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Description of a processing or analysis step.                  Add
                additional fields as needed to describe value(s) of any          variable,
                parameter, or term related to the *SASprocess* step.         Be sure to
                include *units* attributes for all numerical fields.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-group',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_PROCESS.nxp_canSAS_class = NX_CHAR()
        self.nxp_ENTRY.nxp_PROCESS.nxp_canSAS_class.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='canSAS_class',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_canSAS_class.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official canSAS group: :index:`NXcanSAS (applications); SASprocess`''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-attribute',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_canSAS_class.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_canSAS_class.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SASprocess',
                )


        self.nxp_ENTRY.nxp_PROCESS.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_PROCESS.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_name.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_name.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Optional name for this data processing or analysis step''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-field',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_PROCESS.nxp_date = NX_DATE_TIME()
        self.nxp_ENTRY.nxp_PROCESS.nxp_date.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='date',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_date.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_date.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_date.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_date.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Optional date for this data processing or analysis step. [#iso8601]_
                .. [#iso8601]  ISO-8601 standard time representation.
                NeXus dates and times are reported in ISO-8601
                (e.g., ``yyyy-mm-ddThh:mm:ss``)                                  or
                modified ISO-8601 (e.g., ``yyyy-mm-dd hh:mm:ss``).
                See: http://www.w3.org/TR/NOTE-datetime
                or http://en.wikipedia.org/wiki/ISO_8601 for more details.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-field',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_date.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_PROCESS.nxp_description = NX_CHAR()
        self.nxp_ENTRY.nxp_PROCESS.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_description.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_description.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Optional description for this data processing or analysis step''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-field',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_description.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_PROCESS.nxp_term = NX_CHAR()
        self.nxp_ENTRY.nxp_PROCESS.nxp_term.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='term',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_term.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_term.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unbounded',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_term.nxp_nameType= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='any',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_term.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Specifies the value of a single variable, parameter,            or term
                (while defined here as a string, it could be a number)            related
                to the *SASprocess* step.                      Note:           The name
                *term* is not required, it could take any name,           as long as the
                name is unique within this group.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-field',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_term.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_PROCESS.nxp_NOTE = NXnote()
        self.nxp_ENTRY.nxp_PROCESS.nxp_NOTE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXnote',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_NOTE.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_NOTE.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unbounded',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_NOTE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Any additional notes or subprocessing steps will be documented here.
                An **NXnote** group can be added to any NeXus group at or below the
                **NXentry** group.  It is shown here as a suggestion of a good place
                to *consider* its use.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-group',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_NOTE.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_PROCESS.nxp_COLLECTION = NXcollection()
        self.nxp_ENTRY.nxp_PROCESS.nxp_COLLECTION.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcollection',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_COLLECTION.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_COLLECTION.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unbounded',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_COLLECTION.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Describes anything about *SASprocess* that is not already described.
                Any content not defined in the canSAS standard can be placed at this
                point.

                Note:           The name of this group is flexible, it could take any
                name,           as long as it is unique within the **NXprocess** group.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-group',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_COLLECTION.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_PROCESS.nxp_COLLECTION.nxp_canSAS_class = NX_CHAR()
        self.nxp_ENTRY.nxp_PROCESS.nxp_COLLECTION.nxp_canSAS_class.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='canSAS_class',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_COLLECTION.nxp_canSAS_class.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Official canSAS group: :index:`NXcanSAS (applications); SASprocessnote`''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-process-collection-attribute',
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_COLLECTION.nxp_canSAS_class.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_PROCESS.nxp_COLLECTION.nxp_canSAS_class.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SASprocessnote',
                )




        self.nxp_ENTRY.nxp_COLLECTION = NXcollection()
        self.nxp_ENTRY.nxp_COLLECTION.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcollection',
                )
        self.nxp_ENTRY.nxp_COLLECTION.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_COLLECTION.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unbounded',
                )
        self.nxp_ENTRY.nxp_COLLECTION.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Free form description of anything not covered by other elements.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-group',
                )
        self.nxp_ENTRY.nxp_COLLECTION.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_COLLECTION.nxp_canSAS_class = NX_CHAR()
        self.nxp_ENTRY.nxp_COLLECTION.nxp_canSAS_class.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='canSAS_class',
                )
        self.nxp_ENTRY.nxp_COLLECTION.nxp_canSAS_class.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Official canSAS group: :index:`NXcanSAS (applications); SASnote`''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-collection-attribute',
                )
        self.nxp_ENTRY.nxp_COLLECTION.nxp_canSAS_class.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_COLLECTION.nxp_canSAS_class.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SASnote',
                )



        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM = NXdata()
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='TRANSMISSION_SPECTRUM',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-group',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_canSAS_class = NX_CHAR()
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_canSAS_class.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='canSAS_class',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_canSAS_class.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official canSAS group: :index:`NXcanSAS (applications);
                SAStransmission_spectrum`''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-attribute',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_canSAS_class.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_canSAS_class.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SAStransmission_spectrum',
                )


        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_signal = NX_CHAR()
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_signal.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='signal',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_signal.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_signal.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Name of the default data field.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-attribute',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_signal.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_signal.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='T',
                )


        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_T_axes = NX_CHAR()
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_T_axes.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='T_axes',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_T_axes.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-attribute',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_T_axes.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_T_axes.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='T',
                )


        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Identify what type of spectrum is being described.           It is
                expected that this value will take either of these two values:
                ======  ==============================================           value
                meaning           ======  ==============================================
                sample  measurement with the sample and container           can
                measurement with just the container           ======
                ==============================================''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-attribute',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_timestamp = NX_DATE_TIME()
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_timestamp.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='timestamp',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_timestamp.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_timestamp.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_timestamp.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                ISO-8601 time [#iso8601]_''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-attribute',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_timestamp.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_lambda = NX_NUMBER()
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_lambda.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='lambda',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_lambda.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_lambda.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVELENGTH',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_lambda.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Wavelength of the radiation.                      This array is of the
                same shape as ``T`` and ``Tdev``.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-field',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_lambda.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_T = NX_NUMBER()
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_T.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='T',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_T.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_T.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DIMENSIONLESS',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_T.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Transmission values (:math:`I/I_0`)           as a function of wavelength.
                This array is of the same shape as ``lambda`` and ``Tdev``.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-field',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_T.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_T.nxp_uncertainties = NX_CHAR()
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_T.nxp_uncertainties.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='uncertainties',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_T.nxp_uncertainties.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Names the dataset (in this SASdata group) that provides the
                uncertainty of each transmission :math:`T` to be used for data analysis.
                The name of the dataset containing the :math:`T` uncertainty
                is expected to be ``Tdev``.                          .. comment
                see: https://github.com/canSAS-org/canSAS2012/issues/7
                Typically:                              @uncertainties="Tdev"''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-t-attribute',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_T.nxp_uncertainties.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_Tdev = NX_NUMBER()
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_Tdev.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='Tdev',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_Tdev.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_Tdev.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DIMENSIONLESS',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_Tdev.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: NXcanSAS (applications); Tdev                      Estimated
                uncertainty (usually standard deviation)           in :math:`T`.  Must
                have the same units as :math:`T`.                      This is the field
                is named in the *uncertainties* attribute of *T*, as in::
                T/@uncertainties="Tdev"                          This array is of the same
                shape as ``lambda`` and ``T``.''',
                default='https://manual.nexusformat.org/classes/applications/NXcanSAS.html#nxcansas-entry-transmission-spectrum-field',
                )
        self.nxp_ENTRY.nxp_TRANSMISSION_SPECTRUM.nxp_Tdev.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )





class NXtomo(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXtomo',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    This is the application definition for x-ray or neutron tomography raw data.
        In tomography            a number of dark field images are measured, some bright
        field images and, of course the sample.            In order to distinguish between
        them images carry a image_key.
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_entry = NXentry()
        self.nxp_entry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_entry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry',
                )
        self.nxp_entry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-group',
                )
        self.nxp_entry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_title = NX_CHAR()
        self.nxp_entry.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_entry.nxp_title.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_entry.nxp_title.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-field',
                )
        self.nxp_entry.nxp_title.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_start_time = NX_DATE_TIME()
        self.nxp_entry.nxp_start_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start_time',
                )
        self.nxp_entry.nxp_start_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_entry.nxp_start_time.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_entry.nxp_start_time.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_start_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-field',
                )
        self.nxp_entry.nxp_start_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_end_time = NX_DATE_TIME()
        self.nxp_entry.nxp_end_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='end_time',
                )
        self.nxp_entry.nxp_end_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_entry.nxp_end_time.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_entry.nxp_end_time.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_end_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-field',
                )
        self.nxp_entry.nxp_end_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_definition = NX_CHAR()
        self.nxp_entry.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_entry.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-field',
                )
        self.nxp_entry.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXtomo',
                )


        self.nxp_entry.nxp_instrument = NXinstrument()
        self.nxp_entry.nxp_instrument.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_entry.nxp_instrument.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='instrument',
                )
        self.nxp_entry.nxp_instrument.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-group',
                )
        self.nxp_entry.nxp_instrument.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_SOURCE = NXsource()
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsource',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-group',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_type = NX_CHAR()
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_type.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_type.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-source-field',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_name = NX_CHAR()
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_name.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_name.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-source-field',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_probe = NX_CHAR()
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_probe.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='probe',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_probe.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_probe.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_probe.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-source-field',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_probe.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_probe.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='neutron,x-ray,electron',
                )



        self.nxp_entry.nxp_instrument.nxp_detector = NXdetector()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='detector',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-group',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data = NX_INT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_detector.nxp_image_key = NX_INT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_image_key.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='image_key',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_image_key.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_image_key.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                In order                  to distinguish between sample projections, dark
                and flat                  images, a magic number is recorded per frame.
                The key is as follows:

                * projection = 0                  * flat field = 1                  * dark
                field = 2                  * invalid = 3''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_image_key.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_pixel_size = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x_pixel_size',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_pixel_size = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='y_pixel_size',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Distance between detector and sample''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_rotation_axis_pixel_position = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_rotation_axis_pixel_position.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x_rotation_axis_pixel_position',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_rotation_axis_pixel_position.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_rotation_axis_pixel_position.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_rotation_axis_pixel_position.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_rotation_axis_pixel_position.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_rotation_axis_pixel_position.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_rotation_axis_pixel_position = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_rotation_axis_pixel_position.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='y_rotation_axis_pixel_position',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_rotation_axis_pixel_position.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_rotation_axis_pixel_position.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_rotation_axis_pixel_position.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_rotation_axis_pixel_position.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_rotation_axis_pixel_position.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_entry.nxp_sample = NXsample()
        self.nxp_entry.nxp_sample.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_entry.nxp_sample.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample',
                )
        self.nxp_entry.nxp_sample.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-group',
                )
        self.nxp_entry.nxp_sample.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_sample.nxp_name = NX_CHAR()
        self.nxp_entry.nxp_sample.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_sample.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Descriptive name of sample''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_rotation_angle = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='rotation_angle',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                In practice this axis is always aligned along one pixel direction on the
                detector and usually vertical.                  There are experiments with
                horizontal rotation axes, so this would need to be indicated somehow.
                For now the best way for that is an open question.''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_x_translation = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_x_translation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x_translation',
                )
        self.nxp_entry.nxp_sample.nxp_x_translation.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_sample.nxp_x_translation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_x_translation.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_entry.nxp_sample.nxp_x_translation.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_sample.nxp_x_translation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_x_translation.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_y_translation = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_y_translation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='y_translation',
                )
        self.nxp_entry.nxp_sample.nxp_y_translation.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_sample.nxp_y_translation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_y_translation.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_entry.nxp_sample.nxp_y_translation.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_sample.nxp_y_translation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_y_translation.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_z_translation = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_z_translation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='z_translation',
                )
        self.nxp_entry.nxp_sample.nxp_z_translation.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_sample.nxp_z_translation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_z_translation.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_entry.nxp_sample.nxp_z_translation.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_sample.nxp_z_translation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_z_translation.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_control = NXmonitor()
        self.nxp_entry.nxp_control.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonitor',
                )
        self.nxp_entry.nxp_control.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='control',
                )
        self.nxp_entry.nxp_control.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_entry.nxp_control.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_control.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-group',
                )
        self.nxp_entry.nxp_control.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_control.nxp_data = NX_FLOAT()
        self.nxp_entry.nxp_control.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_control.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_control.nxp_data.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_entry.nxp_control.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Total integral monitor counts for each measured frame. Allows a to
                correction for           fluctuations in the beam between frames.''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-control-field',
                )
        self.nxp_entry.nxp_control.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_data = NXdata()
        self.nxp_entry.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_entry.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomo.html#nxtomo-entry-group',
                )
        self.nxp_entry.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




class NXsas(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXsas',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    raw, monochromatic 2-D SAS data with an area detector

        This is an application definition for raw data (not processed or reduced data)
        from a 2-D small angle scattering instrument collected with a monochromatic
        beam and an area detector. It is meant to be suitable both for neutron SANS
        and X-ray SAXS data.           It covers all raw data from any monochromatic SAS
        techniques that     use an area detector: SAS, WSAS, grazing incidence, GISAS

        It covers all raw data from any SAS techniques     that use an area detector
        and a monochromatic beam.
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_ENTRY = NXentry()
        self.nxp_ENTRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_ENTRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-group',
                )
        self.nxp_ENTRY.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_entry = NX_CHAR()
        self.nxp_ENTRY.nxp_entry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry',
                )
        self.nxp_ENTRY.nxp_entry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                NeXus convention is to use ``entry1``, ``entry2``, ...
                for analysis software to locate each entry''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-attribute',
                )
        self.nxp_ENTRY.nxp_entry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_title = NX_CHAR()
        self.nxp_ENTRY.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_ENTRY.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-field',
                )
        self.nxp_ENTRY.nxp_title.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_start_time = NX_DATE_TIME()
        self.nxp_ENTRY.nxp_start_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start_time',
                )
        self.nxp_ENTRY.nxp_start_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_ENTRY.nxp_start_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-field',
                )
        self.nxp_ENTRY.nxp_start_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_end_time = NX_DATE_TIME()
        self.nxp_ENTRY.nxp_end_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='end_time',
                )
        self.nxp_ENTRY.nxp_end_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_ENTRY.nxp_end_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-field',
                )
        self.nxp_ENTRY.nxp_end_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_definition = NX_CHAR()
        self.nxp_ENTRY.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_ENTRY.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-field',
                )
        self.nxp_ENTRY.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsas',
                )


        self.nxp_ENTRY.nxp_instrument = NXinstrument()
        self.nxp_ENTRY.nxp_instrument.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='instrument',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_name.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Name of the instrument actually used to perform the experiment''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_source = NXsource()
        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsource',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='source',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_type = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                type of radiation source''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-source-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_type.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Name of the radiation source''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-source-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_probe = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_probe.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='probe',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_probe.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-source-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_probe.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_probe.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='neutron,x-ray',
                )



        self.nxp_ENTRY.nxp_instrument.nxp_monochromator = NXmonochromator()
        self.nxp_ENTRY.nxp_instrument.nxp_monochromator.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonochromator',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_monochromator.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='monochromator',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_monochromator.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_monochromator.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_monochromator.nxp_wavelength = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_monochromator.nxp_wavelength.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='wavelength',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_monochromator.nxp_wavelength.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVELENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_monochromator.nxp_wavelength.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_monochromator.nxp_wavelength.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The wavelength of the radiation''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-monochromator-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_monochromator.nxp_wavelength.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_monochromator.nxp_wavelength_spread = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_monochromator.nxp_wavelength_spread.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='wavelength_spread',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_monochromator.nxp_wavelength_spread.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_monochromator.nxp_wavelength_spread.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                delta_lambda/lambda (:math:`\\Delta\\lambda/\\lambda`):
                Important for resolution calculations''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-monochromator-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_monochromator.nxp_wavelength_spread.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_instrument.nxp_collimator = NXcollimator()
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcollimator',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='collimator',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry = NXgeometry()
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgeometry',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='geometry',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-collimator-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape = NXshape()
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXshape',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='shape',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-collimator-geometry-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_shape = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_shape.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='shape',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_shape.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_shape.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-collimator-geometry-shape-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_shape.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_shape.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='nxcylinder,nxbox',
                )


        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_size = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='size',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The collimation length''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-collimator-geometry-shape-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_size.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )





        self.nxp_ENTRY.nxp_instrument.nxp_detector = NXdetector()
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='detector',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_data = NX_NUMBER()
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_data.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is area detector data, of number of x-pixel versus             number
                of y-pixels. Since the beam center is to be             determined as a
                step of data reduction, it is not necessary             to document or
                assume the position of the beam center in             acquired data.''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_distance = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The distance between detector and sample''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_x_pixel_size = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x_pixel_size',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Physical size of a pixel in x-direction''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_y_pixel_size = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='y_pixel_size',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Size of a pixel in y direction''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_polar_angle = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='polar_angle',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_azimuthal_angle = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_azimuthal_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='azimuthal_angle',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_azimuthal_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_azimuthal_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_azimuthal_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_azimuthal_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_rotation_angle = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_rotation_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='rotation_angle',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_rotation_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_rotation_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_rotation_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_rotation_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_aequatorial_angle = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_aequatorial_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='aequatorial_angle',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_aequatorial_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_aequatorial_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_aequatorial_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_aequatorial_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_beam_center_x = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_beam_center_x.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='beam_center_x',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_beam_center_x.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_beam_center_x.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_beam_center_x.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is the x position where the direct beam would hit the detector. This
                is a                                 length, not a pixel position, and can
                be outside of the actual detector.''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_beam_center_x.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_beam_center_y = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_beam_center_y.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='beam_center_y',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_beam_center_y.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_beam_center_y.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_beam_center_y.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is the y position where the direct beam would hit the detector. This
                is a                                 length, not a pixel position, and can
                be outside of the actual detector.''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_beam_center_y.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_ENTRY.nxp_sample = NXsample()
        self.nxp_ENTRY.nxp_sample.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_ENTRY.nxp_sample.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample',
                )
        self.nxp_ENTRY.nxp_sample.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-group',
                )
        self.nxp_ENTRY.nxp_sample.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_sample.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_sample.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_sample.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Descriptive name of sample''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_sample.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_sample.nxp_aequatorial_angle = NX_FLOAT()
        self.nxp_ENTRY.nxp_sample.nxp_aequatorial_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='aequatorial_angle',
                )
        self.nxp_ENTRY.nxp_sample.nxp_aequatorial_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_sample.nxp_aequatorial_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_ENTRY.nxp_sample.nxp_aequatorial_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_sample.nxp_aequatorial_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_control = NXmonitor()
        self.nxp_ENTRY.nxp_control.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonitor',
                )
        self.nxp_ENTRY.nxp_control.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='control',
                )
        self.nxp_ENTRY.nxp_control.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-group',
                )
        self.nxp_ENTRY.nxp_control.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_control.nxp_mode = NX_CHAR()
        self.nxp_ENTRY.nxp_control.nxp_mode.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='mode',
                )
        self.nxp_ENTRY.nxp_control.nxp_mode.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Count to a preset value based on either clock time
                (timer) or received monitor counts (monitor).''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-control-field',
                )
        self.nxp_ENTRY.nxp_control.nxp_mode.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_control.nxp_mode.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='monitor,timer',
                )


        self.nxp_ENTRY.nxp_control.nxp_preset = NX_FLOAT()
        self.nxp_ENTRY.nxp_control.nxp_preset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='preset',
                )
        self.nxp_ENTRY.nxp_control.nxp_preset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_control.nxp_preset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                preset value for time or monitor''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-control-field',
                )
        self.nxp_ENTRY.nxp_control.nxp_preset.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_control.nxp_integral = NX_FLOAT()
        self.nxp_ENTRY.nxp_control.nxp_integral.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='integral',
                )
        self.nxp_ENTRY.nxp_control.nxp_integral.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_control.nxp_integral.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_ENTRY.nxp_control.nxp_integral.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Total integral monitor counts''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-control-field',
                )
        self.nxp_ENTRY.nxp_control.nxp_integral.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_data = NXdata()
        self.nxp_ENTRY.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_ENTRY.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsas.html#nxsas-entry-group',
                )
        self.nxp_ENTRY.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




class NXxkappa(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXxkappa',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXxbase',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    raw data from a kappa geometry (CAD4) single crystal diffractometer, extends
        :ref:`NXxbase`          This is the application definition for raw data from a
        kappa geometry      (CAD4) single crystal     diffractometer. It extends
        :ref:`NXxbase`, so the full definition is      the content of :ref:`NXxbase` plus
        the     data defined here.
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_entry = NXentry()
        self.nxp_entry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_entry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry',
                )
        self.nxp_entry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-group',
                )
        self.nxp_entry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_definition = NX_CHAR()
        self.nxp_entry.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_entry.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-field',
                )
        self.nxp_entry.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXxkappa',
                )


        self.nxp_entry.nxp_instrument = NXinstrument()
        self.nxp_entry.nxp_instrument.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_entry.nxp_instrument.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='instrument',
                )
        self.nxp_entry.nxp_instrument.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-group',
                )
        self.nxp_entry.nxp_instrument.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_detector = NXdetector()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='detector',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-instrument-group',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='polar_angle',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The polar_angle (two theta) at each scan point''',
                default='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_entry.nxp_sample = NXsample()
        self.nxp_entry.nxp_sample.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_entry.nxp_sample.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample',
                )
        self.nxp_entry.nxp_sample.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-group',
                )
        self.nxp_entry.nxp_sample.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_sample.nxp_rotation_angle = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='rotation_angle',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is an array holding the sample rotation angle at each           scan
                point''',
                default='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_kappa = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_kappa.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='kappa',
                )
        self.nxp_entry.nxp_sample.nxp_kappa.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_kappa.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_sample.nxp_kappa.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_sample.nxp_kappa.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is an array holding the kappa angle at each scan point''',
                default='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_kappa.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_phi = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_phi.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='phi',
                )
        self.nxp_entry.nxp_sample.nxp_phi.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_phi.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_sample.nxp_phi.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_sample.nxp_phi.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is an array holding the phi angle at each scan point''',
                default='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_phi.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_alpha = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_alpha.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='alpha',
                )
        self.nxp_entry.nxp_sample.nxp_alpha.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_alpha.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_sample.nxp_alpha.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                This holds the inclination angle of the kappa arm.''',
                default='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_alpha.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_name = NXdata()
        self.nxp_entry.nxp_name.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_entry.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxkappa.html#nxxkappa-entry-group',
                )
        self.nxp_entry.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




class NXxbase(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXxbase',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    This definition covers the common parts of all monochromatic single crystal raw
        data application definitions.
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_entry = NXentry()
        self.nxp_entry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_entry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry',
                )
        self.nxp_entry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-group',
                )
        self.nxp_entry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_title = NX_CHAR()
        self.nxp_entry.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_entry.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-field',
                )
        self.nxp_entry.nxp_title.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_start_time = NX_DATE_TIME()
        self.nxp_entry.nxp_start_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start_time',
                )
        self.nxp_entry.nxp_start_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_entry.nxp_start_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-field',
                )
        self.nxp_entry.nxp_start_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_definition = NX_CHAR()
        self.nxp_entry.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_entry.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-field',
                )
        self.nxp_entry.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXxbase',
                )


        self.nxp_entry.nxp_instrument = NXinstrument()
        self.nxp_entry.nxp_instrument.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_entry.nxp_instrument.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='instrument',
                )
        self.nxp_entry.nxp_instrument.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-group',
                )
        self.nxp_entry.nxp_instrument.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_source = NXsource()
        self.nxp_entry.nxp_instrument.nxp_source.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsource',
                )
        self.nxp_entry.nxp_instrument.nxp_source.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='source',
                )
        self.nxp_entry.nxp_instrument.nxp_source.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-group',
                )
        self.nxp_entry.nxp_instrument.nxp_source.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_source.nxp_type = NX_CHAR()
        self.nxp_entry.nxp_instrument.nxp_source.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_entry.nxp_instrument.nxp_source.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-source-field',
                )
        self.nxp_entry.nxp_instrument.nxp_source.nxp_type.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_source.nxp_name = NX_CHAR()
        self.nxp_entry.nxp_instrument.nxp_source.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_instrument.nxp_source.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-source-field',
                )
        self.nxp_entry.nxp_instrument.nxp_source.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_source.nxp_probe = NX_CHAR()
        self.nxp_entry.nxp_instrument.nxp_source.nxp_probe.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='probe',
                )
        self.nxp_entry.nxp_instrument.nxp_source.nxp_probe.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-source-field',
                )
        self.nxp_entry.nxp_instrument.nxp_source.nxp_probe.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_instrument.nxp_source.nxp_probe.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='neutron,x-ray,electron',
                )



        self.nxp_entry.nxp_instrument.nxp_monochromator = NXmonochromator()
        self.nxp_entry.nxp_instrument.nxp_monochromator.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonochromator',
                )
        self.nxp_entry.nxp_instrument.nxp_monochromator.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='monochromator',
                )
        self.nxp_entry.nxp_instrument.nxp_monochromator.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-group',
                )
        self.nxp_entry.nxp_instrument.nxp_monochromator.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_monochromator.nxp_wavelength = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_monochromator.nxp_wavelength.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='wavelength',
                )
        self.nxp_entry.nxp_instrument.nxp_monochromator.nxp_wavelength.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_monochromator.nxp_wavelength.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVELENGTH',
                )
        self.nxp_entry.nxp_instrument.nxp_monochromator.nxp_wavelength.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-monochromator-field',
                )
        self.nxp_entry.nxp_instrument.nxp_monochromator.nxp_wavelength.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_instrument.nxp_detector = NXdetector()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='detector',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unbounded',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The name of the group is detector if there is only one detector,
                if there are several,  names have to be detector1,              detector2,
                ...detectorn.''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-group',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data = NX_INT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The area detector data, the first dimension is always the
                number of scan points, the second and third are the number
                of pixels in x and y. The origin is always assumed to be               in
                the center of the detector. maxOccurs is limited to the               the
                number of detectors on your instrument.''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_signal = NX_POSINT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_signal.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='signal',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_signal.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_POSINT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_signal.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-data-attribute',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_signal.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_signal.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )



        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_pixel_size = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x_pixel_size',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_pixel_size = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='y_pixel_size',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_detector.nxp_frame_start_number = NX_INT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_frame_start_number.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='frame_start_number',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_frame_start_number.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_frame_start_number.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is the start number of the first frame of a scan. In PX one often
                scans a couple                of frames on a give sample, then does
                something else, then returns to the same sample                and scans
                some more frames. Each time with a new data file.               This
                number helps concatenating such measurements.''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_frame_start_number.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_entry.nxp_sample = NXsample()
        self.nxp_entry.nxp_sample.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_entry.nxp_sample.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample',
                )
        self.nxp_entry.nxp_sample.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-group',
                )
        self.nxp_entry.nxp_sample.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_sample.nxp_name = NX_CHAR()
        self.nxp_entry.nxp_sample.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_sample.nxp_name.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_sample.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Descriptive name of sample''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_orientation_matrix = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_orientation_matrix.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='orientation_matrix',
                )
        self.nxp_entry.nxp_sample.nxp_orientation_matrix.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_orientation_matrix.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The orientation matrix according to Busing and              Levy
                conventions. This is not strictly necessary as              the UB can
                always be derived from the data.  But              let us bow to common
                usage which includes the              UB nearly always.''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_orientation_matrix.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_unit_cell = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_unit_cell.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unit_cell',
                )
        self.nxp_entry.nxp_sample.nxp_unit_cell.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_unit_cell.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The unit cell, a, b, c, alpha, beta, gamma.              Again, not
                strictly necessary, but normally written.''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_unit_cell.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_temperature = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_temperature.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='temperature',
                )
        self.nxp_entry.nxp_sample.nxp_temperature.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_temperature.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The sample temperature or whatever sensor represents this value best''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_temperature.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_x_translation = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_x_translation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x_translation',
                )
        self.nxp_entry.nxp_sample.nxp_x_translation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_x_translation.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_sample.nxp_x_translation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Translation of the sample along the X-direction of the laboratory
                coordinate system''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_x_translation.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_y_translation = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_y_translation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='y_translation',
                )
        self.nxp_entry.nxp_sample.nxp_y_translation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_y_translation.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_sample.nxp_y_translation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Translation of the sample along the Y-direction of the laboratory
                coordinate system''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_y_translation.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_distance = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_entry.nxp_sample.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_sample.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Translation of the sample along the Z-direction of the laboratory
                coordinate system''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_control = NXmonitor()
        self.nxp_entry.nxp_control.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonitor',
                )
        self.nxp_entry.nxp_control.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='control',
                )
        self.nxp_entry.nxp_control.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-group',
                )
        self.nxp_entry.nxp_control.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_control.nxp_mode = NX_CHAR()
        self.nxp_entry.nxp_control.nxp_mode.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='mode',
                )
        self.nxp_entry.nxp_control.nxp_mode.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Count to a preset value based on either clock time (timer)             or
                received monitor counts (monitor).''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-control-field',
                )
        self.nxp_entry.nxp_control.nxp_mode.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_control.nxp_mode.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='monitor,timer',
                )


        self.nxp_entry.nxp_control.nxp_preset = NX_FLOAT()
        self.nxp_entry.nxp_control.nxp_preset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='preset',
                )
        self.nxp_entry.nxp_control.nxp_preset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_control.nxp_preset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                preset value for time or monitor''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-control-field',
                )
        self.nxp_entry.nxp_control.nxp_preset.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_control.nxp_integral = NX_FLOAT()
        self.nxp_entry.nxp_control.nxp_integral.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='integral',
                )
        self.nxp_entry.nxp_control.nxp_integral.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_control.nxp_integral.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_entry.nxp_control.nxp_integral.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Total integral monitor counts''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-control-field',
                )
        self.nxp_entry.nxp_control.nxp_integral.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_DATA = NXdata()
        self.nxp_entry.nxp_DATA.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_entry.nxp_DATA.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The name of this group id data if there is only              one detector;
                if there are several the names will              be data1, data2, data3
                and will point              to the corresponding detector groups in the
                instrument hierarchy.''',
                default='https://manual.nexusformat.org/classes/applications/NXxbase.html#nxxbase-entry-group',
                )
        self.nxp_entry.nxp_DATA.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




class NXmx(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXmx',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    functional application definition for macromolecular crystallography
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_ENTRY = NXentry()
        self.nxp_ENTRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_ENTRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Note, it is recommended that ``file_name`` and ``file_time`` are included
                as attributes at the root of a file that includes  :ref:`NXmx`. See
                :ref:`NXroot`.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-group',
                )
        self.nxp_ENTRY.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_version = NX_CHAR()
        self.nxp_ENTRY.nxp_version.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='version',
                )
        self.nxp_ENTRY.nxp_version.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_ENTRY.nxp_version.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Describes the version of the NXmx definition used to write this data.
                This must be a text (not numerical) representation. Such as::

                @version="1.0"''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-attribute',
                )
        self.nxp_ENTRY.nxp_version.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_version.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1.0',
                )


        self.nxp_ENTRY.nxp_title = NX_CHAR()
        self.nxp_ENTRY.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_ENTRY.nxp_title.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_title.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-field',
                )
        self.nxp_ENTRY.nxp_title.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_start_time = NX_DATE_TIME()
        self.nxp_ENTRY.nxp_start_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start_time',
                )
        self.nxp_ENTRY.nxp_start_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_ENTRY.nxp_start_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                ISO 8601 time/date of the first data point collected in UTC,
                using the Z suffix to avoid confusion with local time.
                Note that the time zone of the beamline should be provided in
                NXentry/NXinstrument/time_zone.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-field',
                )
        self.nxp_ENTRY.nxp_start_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_end_time = NX_DATE_TIME()
        self.nxp_ENTRY.nxp_end_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='end_time',
                )
        self.nxp_ENTRY.nxp_end_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_ENTRY.nxp_end_time.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_end_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                ISO 8601 time/date of the last data point collected in UTC,
                using the Z suffix to avoid confusion with local time.
                Note that the time zone of the beamline should be provided in
                NXentry/NXinstrument/time_zone. This field should only be
                filled when the value is accurately observed. If the data
                collection aborts or otherwise prevents accurate recording of
                the end_time, this field should be omitted.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-field',
                )
        self.nxp_ENTRY.nxp_end_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_end_time_estimated = NX_DATE_TIME()
        self.nxp_ENTRY.nxp_end_time_estimated.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='end_time_estimated',
                )
        self.nxp_ENTRY.nxp_end_time_estimated.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_ENTRY.nxp_end_time_estimated.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                ISO 8601 time/date of the last data point collected in UTC,
                using the Z suffix to avoid confusion with local time.
                Note that the time zone of the beamline should be provided in
                NXentry/NXinstrument/time_zone.  This field may be filled
                with a value estimated before an observed value is available.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-field',
                )
        self.nxp_ENTRY.nxp_end_time_estimated.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_definition = NX_CHAR()
        self.nxp_ENTRY.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_ENTRY.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-field',
                )
        self.nxp_ENTRY.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmx',
                )


        self.nxp_ENTRY.nxp_DATA = NXdata()
        self.nxp_ENTRY.nxp_DATA.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-group',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_DATA.nxp_data = NX_NUMBER()
        self.nxp_ENTRY.nxp_DATA.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_data.nxp_recommended= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                For a dimension-2 detector, the rank of the data array will be 3.
                For a dimension-3 detector, the rank of the data array will be 4.
                This allows for the introduction of the frame number as the
                first index.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-data-field',
                )



        self.nxp_ENTRY.nxp_SAMPLE = NXsample()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-group',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_SAMPLE.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_name.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Descriptive name of sample''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_SAMPLE.nxp_depends_on = NX_CHAR()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_depends_on.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='depends_on',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_depends_on.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_depends_on.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is a requirement to describe for any scan experiment.

                The axis on which the sample position depends may be stored
                anywhere, but is normally stored in the NXtransformations
                group within the NXsample group.

                If there is no goniometer, e.g. with a jet, depends_on
                should be set to "."''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_depends_on.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_SAMPLE.nxp_temperature = NX_NUMBER()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_temperature.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='temperature',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_temperature.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TEMPERATURE',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_temperature.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_temperature.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_temperature.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_temperature.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_SAMPLE.nxp_TRANSFORMATIONS = NXtransformations()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_TRANSFORMATIONS.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXtransformations',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_TRANSFORMATIONS.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_TRANSFORMATIONS.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is the recommended location for sample goniometer
                and other related axes.

                This is a requirement to describe for any scan experiment.
                The reason it is optional is mainly to accommodate XFEL
                single shot exposures.

                Use of the depends_on field and the NXtransformations group is
                strongly recommended.  As noted above this should be an absolute
                requirement to have for any scan experiment.

                The reason it is optional is mainly to accommodate XFEL
                single shot exposures.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-sample-group',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_TRANSFORMATIONS.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_INSTRUMENT = NXinstrument()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_name.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_name.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Name of instrument.  Consistency with the controlled
                vocabulary beamline naming in
                https://mmcif.wwpdb.org/dictionaries/mmcif_pdbx_v50.dic/Items/_diffrn_sour
                ce.pdbx_synchrotron_beamline.html
                and                                                 https://mmcif.wwpdb.or
                g/dictionaries/mmcif_pdbx_v50.dic/Items/_diffrn_source.type.html
                is highly recommended.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_name.nxp_short_name = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_name.nxp_short_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='short_name',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_name.nxp_short_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Short name for instrument, perhaps the acronym.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-name-attribute',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_name.nxp_short_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_time_zone = NX_DATE_TIME()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_time_zone.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='time_zone',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_time_zone.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_time_zone.nxp_recommended= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_time_zone.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                ISO 8601 time_zone offset from UTC.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-field',
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_ATTENUATOR = NXattenuator()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_ATTENUATOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXattenuator',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_ATTENUATOR.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_ATTENUATOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_ATTENUATOR.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_ATTENUATOR.nxp_attenuator_transmission = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_ATTENUATOR.nxp_attenuator_transmission.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='attenuator_transmission',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_ATTENUATOR.nxp_attenuator_transmission.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_ATTENUATOR.nxp_attenuator_transmission.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_ATTENUATOR.nxp_attenuator_transmission.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_ATTENUATOR.nxp_attenuator_transmission.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-attenuator-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_ATTENUATOR.nxp_attenuator_transmission.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR_GROUP = NXdetector_group()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR_GROUP.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector_group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR_GROUP.nxp_recommended= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR_GROUP.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Optional logical grouping of detectors.

                Each detector is represented as an NXdetector
                with its own detector data array.  Each detector data array
                may be further decomposed into array sections by use of
                NXdetector_module groups.  Detectors can be grouped logically
                together using NXdetector_group. Groups can be further grouped
                hierarchically in a single NXdetector_group (for example, if
                there are multiple detectors at an endstation or multiple
                endstations at a facility).  Alternatively, multiple
                NXdetector_groups can be provided.

                The groups are defined hierarchically, with names given
                in the group_names field, unique identifying indices given
                in the field group_index, and the level in the hierarchy
                given in the group_parent field.  For example if an x-ray
                detector group, DET, consists of four detectors in a
                rectangular array::

                DTL     DTR
                DLL    DLR

                We could have::

                group_names: ["DET", "DTL", "DTR", "DLL", "DLR"]
                group_index: [1, 2, 3, 4, 5]
                group_parent:  [-1, 1, 1, 1, 1]''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-group',
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR_GROUP.nxp_group_names = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR_GROUP.nxp_group_names.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='group_names',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR_GROUP.nxp_group_names.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR_GROUP.nxp_group_names.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                An array of the names of the detectors or the names of
                hierarchical groupings of detectors.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-group-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR_GROUP.nxp_group_names.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR_GROUP.nxp_group_index = NX_INT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR_GROUP.nxp_group_index.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='group_index',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR_GROUP.nxp_group_index.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR_GROUP.nxp_group_index.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                An array of unique identifiers for detectors or groupings
                of detectors.

                Each ID is a unique ID for the corresponding detector or group
                named in the field group_names.  The IDs are positive integers
                starting with 1.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-group-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR_GROUP.nxp_group_index.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR_GROUP.nxp_group_parent = NX_INT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR_GROUP.nxp_group_parent.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='group_parent',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR_GROUP.nxp_group_parent.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR_GROUP.nxp_group_parent.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                An array of the hierarchical levels of the parents of detectors
                or groupings of detectors.

                A top-level grouping has parent level -1.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-group-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR_GROUP.nxp_group_parent.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR = NXdetector()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Normally the detector group will have the name ``detector``.
                However, in the case of multiple detectors, each detector
                needs a uniquely named NXdetector.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_depends_on = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_depends_on.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='depends_on',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_depends_on.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_depends_on.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_depends_on.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                NeXus path to the detector positioner axis that most directly
                supports the detector.  In the case of a single-module
                detector, the detector axis chain may start here.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_depends_on.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_data = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_data.nxp_recommended= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                For a dimension-2 detector, the rank of the data array will be 3.
                For a dimension-3 detector, the rank of the data array will be 4.
                This allows for the introduction of the frame number as the
                first index.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_description = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_description.nxp_recommended= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                name/manufacturer/model/etc. information.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_time_per_channel = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_time_per_channel.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='time_per_channel',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_time_per_channel.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_time_per_channel.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_time_per_channel.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                For a time-of-flight detector this is the scaling
                factor to convert from the numeric value reported to
                the flight time for a given measurement.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_time_per_channel.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_distance = NX_FLOAT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_distance.nxp_recommended= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Distance from the sample to the beam center.
                Normally this value is for guidance only, the proper
                geometry can be found following the depends_on axis chain,
                But in appropriate cases where the dectector distance
                to the sample is observable independent of the axis
                chain, that may take precedence over the axis chain
                calculation.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_distance_derived = NX_BOOLEAN()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_distance_derived.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance_derived',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_distance_derived.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_BOOLEAN',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_distance_derived.nxp_recommended= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_distance_derived.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Boolean to indicate if the distance is a derived, rather than
                a primary observation.  If distance_derived true or is not specified,
                the distance is assumed to be derived from delector axis
                specifications.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_dead_time = NX_FLOAT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_dead_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='dead_time',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_dead_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_dead_time.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_dead_time.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_dead_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Detector dead time.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_dead_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_count_time = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_count_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='count_time',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_count_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_count_time.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_count_time.nxp_recommended= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_count_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Elapsed actual counting time.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_derived = NX_BOOLEAN()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_derived.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='beam_center_derived',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_derived.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_BOOLEAN',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_derived.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_derived.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Boolean to indicate if the distance is a derived, rather than
                a primary observation.  If true or not provided, that value of
                beam_center_derived is assumed to be true.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_derived.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_x = NX_FLOAT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_x.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='beam_center_x',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_x.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_x.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_x.nxp_recommended= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_x.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is the x position where the direct beam would hit the
                detector. This is a length and can be outside of the actual
                detector. The length can be in physical units or pixels as
                documented by the units attribute.  Normally, this should
                be derived from the axis chain, but the direct specification
                may take precedence if it is not a derived quantity.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_y = NX_FLOAT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_y.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='beam_center_y',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_y.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_y.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_y.nxp_recommended= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_beam_center_y.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is the y position where the direct beam would hit the
                detector. This is a length and can be outside of the actual
                detector. The length can be in physical units or pixels as
                documented by the units attribute.  Normally, this should
                be derived from the axis chain, but the direct specification
                may take precedence if it is not a derived quantity.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_angular_calibration_applied = NX_BOOLEAN()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_angular_calibration_applied.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='angular_calibration_applied',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_angular_calibration_applied.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_BOOLEAN',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_angular_calibration_applied.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_angular_calibration_applied.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                True when the angular calibration has been applied in the
                electronics, false otherwise.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_angular_calibration_applied.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_angular_calibration = NX_FLOAT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_angular_calibration.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='angular_calibration',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_angular_calibration.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_angular_calibration.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_angular_calibration.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Angular calibration data.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_angular_calibration.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_flatfield_applied = NX_BOOLEAN()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_flatfield_applied.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='flatfield_applied',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_flatfield_applied.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_BOOLEAN',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_flatfield_applied.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_flatfield_applied.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                True when the flat field correction has been applied in the
                electronics, false otherwise.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_flatfield_applied.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_flatfield = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_flatfield.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='flatfield',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_flatfield.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_flatfield.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_flatfield.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Flat field correction data.  If provided, it is recommended
                that it be compressed.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_flatfield.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_flatfield_error = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_flatfield_error.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='flatfield_error',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_flatfield_error.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_flatfield_error.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_flatfield_error.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_flatfield_error.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                *** Deprecated form.  Use plural form ***
                Errors of the flat field correction data.  If provided, it is recommended
                that it be compressed.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_flatfield_error.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_flatfield_errors = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_flatfield_errors.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='flatfield_errors',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_flatfield_errors.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_flatfield_errors.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_flatfield_errors.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Errors of the flat field correction data.  If provided, it is recommended
                that it be compressed.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_flatfield_errors.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_pixel_mask_applied = NX_BOOLEAN()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_pixel_mask_applied.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='pixel_mask_applied',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_pixel_mask_applied.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_BOOLEAN',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_pixel_mask_applied.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_pixel_mask_applied.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                True when the pixel mask correction has been applied in the
                electronics, false otherwise.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_pixel_mask_applied.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_pixel_mask = NX_INT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_pixel_mask.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='pixel_mask',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_pixel_mask.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_pixel_mask.nxp_recommended= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_pixel_mask.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The 32-bit pixel mask for the detector. Can be either one mask
                for the whole dataset (i.e. an array with indices i, j) or
                each frame can have its own mask (in which case it would be
                an array with indices nP, i, j).

                Contains a bit field for each pixel to signal dead,
                blind, high or otherwise unwanted or undesirable pixels.
                They have the following meaning:

                * bit 0: gap (pixel with no sensor)
                * bit 1: dead
                * bit 2: under-responding
                * bit 3: over-responding
                * bit 4: noisy
                * bit 5: -undefined-
                * bit 6: pixel is part of a cluster of problematic pixels (bit set in
                addition to others)
                * bit 7: -undefined-
                * bit 8: user defined mask (e.g. around beamstop)
                * bits 9-30: -undefined-
                * bit 31: virtual pixel (corner pixel with interpolated value)

                Normal data analysis software would not take pixels into account
                when a bit in (mask & 0x0000FFFF) is set. Tag bit in the upper
                two bytes would indicate special pixel properties that normally
                would not be a sole reason to reject the intensity value (unless
                lower bits are set.

                If the full bit depths is not required, providing a
                mask with fewer bits is permissible.

                If needed, additional pixel masks can be specified by
                including additional entries named pixel_mask_N, where
                N is an integer. For example, a general bad pixel mask
                could be specified in pixel_mask that indicates noisy
                and dead pixels, and an additional pixel mask from
                experiment-specific shadowing could be specified in
                pixel_mask_2. The cumulative mask is the bitwise OR
                of pixel_mask and any pixel_mask_N entries.

                If provided, it is recommended that it be compressed.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_countrate_correction_applied = NX_BOOLEAN()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_countrate_correction_applied.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='countrate_correction_applied',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_countrate_correction_applied.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_BOOLEAN',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_countrate_correction_applied.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_countrate_correction_applied.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                True when a count-rate correction has already been applied in
                the data recorded here, false otherwise.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_countrate_correction_applied.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_bit_depth_readout = NX_INT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_bit_depth_readout.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='bit_depth_readout',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_bit_depth_readout.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_bit_depth_readout.nxp_recommended= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_bit_depth_readout.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                How many bits the electronics record per pixel.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_detector_readout_time = NX_FLOAT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_detector_readout_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='detector_readout_time',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_detector_readout_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_detector_readout_time.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_detector_readout_time.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_detector_readout_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Time it takes to read the detector (typically milliseconds).
                This is important to know for time resolved experiments.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_detector_readout_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_frame_time = NX_FLOAT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_frame_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='frame_time',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_frame_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_frame_time.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_frame_time.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_frame_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is time for each frame. This is exposure_time + readout
                time.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_frame_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_gain_setting = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_gain_setting.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='gain_setting',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_gain_setting.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_gain_setting.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_gain_setting.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The gain setting of the detector. This influences background.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_gain_setting.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_saturation_value = NX_INT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_saturation_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='saturation_value',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_saturation_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_saturation_value.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_saturation_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The value at which the detector goes into saturation.
                Data above this value is known to be invalid.

                For example, given a saturation_value and an underload_value,
                the valid pixels are those less than or equal to the
                saturation_value and greater than or equal to the underload_value.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_saturation_value.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_underload_value = NX_INT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_underload_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='underload_value',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_underload_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_underload_value.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_underload_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The lowest value at which pixels for this detector
                would be reasonably be measured.

                For example, given a saturation_value and an underload_value,
                the valid pixels are those less than or equal to the
                saturation_value and greater than or equal to the underload_value.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_underload_value.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_sensor_material = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_sensor_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sensor_material',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_sensor_material.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_sensor_material.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_sensor_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                At times, radiation is not directly sensed by the detector.
                Rather, the detector might sense the output from some
                converter like a scintillator.
                This is the name of this converter material.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_sensor_material.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_sensor_thickness = NX_FLOAT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_sensor_thickness.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sensor_thickness',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_sensor_thickness.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_sensor_thickness.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_sensor_thickness.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_sensor_thickness.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                At times, radiation is not directly sensed by the detector.
                Rather, the detector might sense the output from some
                converter like a scintillator. This is the thickness of this
                converter material.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_sensor_thickness.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_threshold_energy = NX_FLOAT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_threshold_energy.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='threshold_energy',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_threshold_energy.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_threshold_energy.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ENERGY',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_threshold_energy.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_threshold_energy.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Single photon counter detectors can be adjusted for a certain
                energy range in which they work optimally. This is the energy
                setting for this.  If the detector supports multiple thresholds,
                this is an array.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_threshold_energy.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_type = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_type.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Description of type such as scintillator,
                ccd, pixel, image
                plate, CMOS, ...''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_type.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_TRANSFORMATIONS = NXtransformations()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_TRANSFORMATIONS.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXtransformations',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_TRANSFORMATIONS.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_TRANSFORMATIONS.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Location for axes (transformations) to do with the
                detector.  In the case of a single-module detector, the
                axes of the detector axis chain may be stored here.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_TRANSFORMATIONS.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_COLLECTION = NXcollection()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_COLLECTION.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcollection',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_COLLECTION.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_COLLECTION.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Suggested container for detailed non-standard detector
                information like corrections applied automatically or
                performance settings.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_COLLECTION.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE = NXdetector_module()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector_module',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unbounded',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Many detectors consist of multiple smaller modules that are
                operated in sync and store their data in a common dataset.
                To allow consistent parsing of the experimental geometry,
                this application definiton requires all detectors to
                define a detector module, even if there is only one.

                This group specifies the hyperslab of data in the data
                array associated with the detector that contains the
                data for this module.  If the module is associated with
                a full data array, rather than with a hyperslab within
                a larger array, then a single module should be defined,
                spanning the entire array.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_data_origin = NX_INT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_data_origin.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data_origin',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_data_origin.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_data_origin.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                A dimension-2 or dimension-3 field which gives the indices
                of the origin of the hyperslab of data for this module in the
                main area detector image in the parent NXdetector module.

                The data_origin is 0-based.

                The frame number dimension (nP) is omitted.  Thus the
                data_origin field for a dimension-2 dataset with indices (nP, i, j)
                will be an array with indices (i, j), and for a dimension-3
                dataset with indices (nP, i, j, k) will be an array with indices
                (i, j, k).

                The :ref:`order <Design-ArrayStorageOrder>` of indices (i, j
                or i, j, k) is slow to fast.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_data_origin.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_data_size = NX_INT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_data_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data_size',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_data_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_data_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Two or three values for the size of the module in pixels in
                each direction. Dimensionality and order of indices is the
                same as for data_origin.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_data_size.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_data_stride = NX_INT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_data_stride.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data_stride',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_data_stride.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_data_stride.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_data_stride.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Two or three values for the stride of the module in pixels in
                each direction.  By default the stride is [1,1] or [1,1,1],
                and this is the most likely case.  This optional field is
                included for completeness.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_data_stride.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_module_offset = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_module_offset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='module_offset',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_module_offset.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_module_offset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_module_offset.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_module_offset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Offset of the module in regards to the origin of the detector in an
                arbitrary direction.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_module_offset.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_module_offset.nxp_transformation_type = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_module_offset.nxp_transformation_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='transformation_type',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_module_offset.nxp_transformation_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-module-offset-attribute',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_module_offset.nxp_transformation_type.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_module_offset.nxp_transformation_type.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='translation',
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_module_offset.nxp_vector = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_module_offset.nxp_vector.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='vector',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_module_offset.nxp_vector.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_module_offset.nxp_vector.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-module-offset-attribute',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_module_offset.nxp_vector.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_module_offset.nxp_offset = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_module_offset.nxp_offset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='offset',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_module_offset.nxp_offset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_module_offset.nxp_offset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-module-offset-attribute',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_module_offset.nxp_offset.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_module_offset.nxp_depends_on = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_module_offset.nxp_depends_on.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='depends_on',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_module_offset.nxp_depends_on.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-module-offset-attribute',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_module_offset.nxp_depends_on.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_fast_pixel_direction = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_fast_pixel_direction.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='fast_pixel_direction',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_fast_pixel_direction.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_fast_pixel_direction.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_fast_pixel_direction.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Values along the direction of :ref:`fastest varying <Design-
                ArrayStorageOrder>`
                pixel direction.  The direction itself is given through the vector
                attribute.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_fast_pixel_direction.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_fast_pixel_direction.nxp_transformation_type = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_fast_pixel_direction.nxp_transformation_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='transformation_type',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_fast_pixel_direction.nxp_transformation_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-fast-pixel-direction-attribute',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_fast_pixel_direction.nxp_transformation_type.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_fast_pixel_direction.nxp_transformation_type.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='translation',
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_fast_pixel_direction.nxp_vector = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_fast_pixel_direction.nxp_vector.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='vector',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_fast_pixel_direction.nxp_vector.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_fast_pixel_direction.nxp_vector.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-fast-pixel-direction-attribute',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_fast_pixel_direction.nxp_vector.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_fast_pixel_direction.nxp_offset = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_fast_pixel_direction.nxp_offset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='offset',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_fast_pixel_direction.nxp_offset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_fast_pixel_direction.nxp_offset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-fast-pixel-direction-attribute',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_fast_pixel_direction.nxp_offset.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_fast_pixel_direction.nxp_depends_on = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_fast_pixel_direction.nxp_depends_on.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='depends_on',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_fast_pixel_direction.nxp_depends_on.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-fast-pixel-direction-attribute',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_fast_pixel_direction.nxp_depends_on.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_slow_pixel_direction = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_slow_pixel_direction.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='slow_pixel_direction',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_slow_pixel_direction.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_slow_pixel_direction.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_slow_pixel_direction.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Values along the direction of :ref:`slowest varying <Design-
                ArrayStorageOrder>`
                pixel direction. The direction itself is given through the vector
                attribute.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_slow_pixel_direction.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_slow_pixel_direction.nxp_transformation_type = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_slow_pixel_direction.nxp_transformation_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='transformation_type',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_slow_pixel_direction.nxp_transformation_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-slow-pixel-direction-attribute',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_slow_pixel_direction.nxp_transformation_type.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_slow_pixel_direction.nxp_transformation_type.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='translation',
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_slow_pixel_direction.nxp_vector = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_slow_pixel_direction.nxp_vector.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='vector',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_slow_pixel_direction.nxp_vector.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_slow_pixel_direction.nxp_vector.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-slow-pixel-direction-attribute',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_slow_pixel_direction.nxp_vector.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_slow_pixel_direction.nxp_offset = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_slow_pixel_direction.nxp_offset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='offset',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_slow_pixel_direction.nxp_offset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_slow_pixel_direction.nxp_offset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-slow-pixel-direction-attribute',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_slow_pixel_direction.nxp_offset.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_slow_pixel_direction.nxp_depends_on = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_slow_pixel_direction.nxp_depends_on.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='depends_on',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_slow_pixel_direction.nxp_depends_on.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-detector-detector-module-slow-pixel-direction-attribute',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_DETECTOR_MODULE.nxp_slow_pixel_direction.nxp_depends_on.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )





        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM = NXbeam()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXbeam',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength = NX_FLOAT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='incident_wavelength',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVELENGTH',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                In the case of a monchromatic beam this is the scalar
                wavelength.

                Several other use cases are permitted, depending on the
                presence or absence of other incident_wavelength_X
                fields.

                In the case of a polychromatic beam this is an array of
                length **m** of wavelengths, with the relative weights
                in ``incident_wavelength_weights``.

                In the case of a monochromatic beam that varies shot-
                to-shot, this is an array of wavelengths, one for each
                recorded shot. Here, ``incident_wavelength_weights`` and
                incident_wavelength_spread are not set.

                In the case of a polychromatic beam that varies shot-to-
                shot, this is an array of length **m** with the relative
                weights in ``incident_wavelength_weights`` as a 2D array.

                In the case of a polychromatic beam that varies shot-to-
                shot and where the channels also vary, this is a 2D array
                of dimensions **nP** by **m** (slow to fast) with the
                relative weights in ``incident_wavelength_weights`` as a 2D
                array.

                Note, :ref:`variants <Design-Variants>` are a good way
                to represent several of these use cases in a single dataset,
                e.g. if a calibrated, single-value wavelength value is
                available along with the original spectrum from which it
                was calibrated.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength_weight = NX_FLOAT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength_weight.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='incident_wavelength_weight',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength_weight.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength_weight.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength_weight.nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='use incident_wavelength_weights, see https://github.com/nexusformat/definitions/issues/837',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength_weight.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                In the case of a polychromatic beam this is an array of
                length **m** of the relative weights of the corresponding
                wavelengths in incident_wavelength.

                In the case of a polychromatic beam that varies shot-to-
                shot, this is a 2D array of dimensions **nP** by **m**
                (slow to fast) of the relative weights of the
                corresponding wavelengths in incident_wavelength.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength_weight.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength_weight.nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength_weights = NX_FLOAT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength_weights.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='incident_wavelength_weights',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength_weights.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength_weights.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength_weights.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                In the case of a polychromatic beam this is an array of
                length **m** of the relative weights of the corresponding
                wavelengths in ``incident_wavelength``.

                In the case of a polychromatic beam that varies shot-to-
                shot, this is a 2D array of dimensions **np** by **m**
                (slow to fast) of the relative weights of the
                corresponding wavelengths in ``incident_wavelength``.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength_weights.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength_spread = NX_FLOAT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength_spread.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='incident_wavelength_spread',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength_spread.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength_spread.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVELENGTH',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength_spread.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength_spread.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The wavelength spread FWHM for the corresponding
                wavelength(s) in incident_wavelength.

                In the case of shot-to-shot variation in the wavelength
                spread, this is a 2D array of dimension **nP** by
                **m** (slow to fast) of the spreads of the
                corresponding wavelengths in incident_wavelength.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength_spread.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_flux = NX_FLOAT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_flux.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='flux',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_flux.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_flux.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLUX',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_flux.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_flux.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Flux density incident on beam plane area in photons
                per second per unit area.

                In the case of a beam that varies in flux shot-to-shot,
                this is an array of values, one for each recorded shot.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_flux.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_total_flux = NX_FLOAT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_total_flux.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='total_flux',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_total_flux.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_total_flux.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FREQUENCY',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_total_flux.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_total_flux.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Flux incident on beam plane in photons per second.

                In the case of a beam that varies in total flux shot-to-shot,
                this is an array of values, one for each recorded shot.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_total_flux.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_beam_size = NX_FLOAT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_beam_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='incident_beam_size',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_beam_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_beam_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_beam_size.nxp_recommended= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_beam_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Two-element array of FWHM (if Gaussian or Airy function) or
                diameters (if top hat) or widths (if rectangular) of the beam
                in the order x, y''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-field',
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_profile = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_profile.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='profile',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_profile.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_profile.nxp_recommended= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_profile.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The beam profile, Gaussian, Airy function, top-hat or
                rectangular.  The profile is given in the plane of
                incidence of the beam on the sample.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_profile.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='Gaussian,Airy,top-hat,rectangular',
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_polarisation_stokes = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_polarisation_stokes.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='incident_polarisation_stokes',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_polarisation_stokes.nxp_recommended= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_polarisation_stokes.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-field',
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength_spectrum = NXdata()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength_spectrum.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='incident_wavelength_spectrum',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength_spectrum.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength_spectrum.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength_spectrum.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-instrument-beam-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_BEAM.nxp_incident_wavelength_spectrum.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_ENTRY.nxp_SOURCE = NXsource()
        self.nxp_ENTRY.nxp_SOURCE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsource',
                )
        self.nxp_ENTRY.nxp_SOURCE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The neutron or x-ray storage ring/facility. Note, the NXsource base class
                has many more fields available, but at present we only require the name.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-group',
                )
        self.nxp_ENTRY.nxp_SOURCE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_SOURCE.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_SOURCE.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_SOURCE.nxp_name.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_SOURCE.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Name of source.  Consistency with the naming in
                https://mmcif.wwpdb.org/dictionaries/mmcif_pdbx_v50.dic/Items/_diffrn_sour
                ce.pdbx_synchrotron_site.html
                controlled vocabulary is highly recommended.''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-source-field',
                )
        self.nxp_ENTRY.nxp_SOURCE.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_SOURCE.nxp_name.nxp_short_name = NX_CHAR()
        self.nxp_ENTRY.nxp_SOURCE.nxp_name.nxp_short_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='short_name',
                )
        self.nxp_ENTRY.nxp_SOURCE.nxp_name.nxp_short_name.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_ENTRY.nxp_SOURCE.nxp_name.nxp_short_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                short name for source, perhaps the acronym''',
                default='https://manual.nexusformat.org/classes/applications/NXmx.html#nxmx-entry-source-name-attribute',
                )
        self.nxp_ENTRY.nxp_SOURCE.nxp_name.nxp_short_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )






class NXtofraw(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXtofraw',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            This is an application definition for raw data from a generic TOF instrument
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_entry = NXentry()
        self.nxp_entry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_entry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry',
                )
        self.nxp_entry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-group',
                )
        self.nxp_entry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_title = NX_CHAR()
        self.nxp_entry.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_entry.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-field',
                )
        self.nxp_entry.nxp_title.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_start_time = NX_DATE_TIME()
        self.nxp_entry.nxp_start_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start_time',
                )
        self.nxp_entry.nxp_start_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_entry.nxp_start_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-field',
                )
        self.nxp_entry.nxp_start_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_definition = NX_CHAR()
        self.nxp_entry.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_entry.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-field',
                )
        self.nxp_entry.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXtofraw',
                )


        self.nxp_entry.nxp_duration = NX_FLOAT()
        self.nxp_entry.nxp_duration.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='duration',
                )
        self.nxp_entry.nxp_duration.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_duration.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-field',
                )
        self.nxp_entry.nxp_duration.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_run_number = NX_INT()
        self.nxp_entry.nxp_run_number.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='run_number',
                )
        self.nxp_entry.nxp_run_number.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_run_number.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-field',
                )
        self.nxp_entry.nxp_run_number.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_pre_sample_flightpath = NX_FLOAT()
        self.nxp_entry.nxp_pre_sample_flightpath.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='pre_sample_flightpath',
                )
        self.nxp_entry.nxp_pre_sample_flightpath.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_pre_sample_flightpath.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_pre_sample_flightpath.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is the flight path before the sample position. This can be determined
                by a chopper,         by the moderator, or the source itself. In other
                words: it is the distance to the component         which gives the T0
                signal to the detector electronics. If another component in the
                NXinstrument hierarchy provides this information, this should be a link.''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-field',
                )
        self.nxp_entry.nxp_pre_sample_flightpath.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_user = NXuser()
        self.nxp_entry.nxp_user.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXuser',
                )
        self.nxp_entry.nxp_user.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='user',
                )
        self.nxp_entry.nxp_user.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-group',
                )
        self.nxp_entry.nxp_user.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_user.nxp_name = NX_CHAR()
        self.nxp_entry.nxp_user.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_user.nxp_name.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_user.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-user-field',
                )
        self.nxp_entry.nxp_user.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_instrument = NXinstrument()
        self.nxp_entry.nxp_instrument.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_entry.nxp_instrument.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='instrument',
                )
        self.nxp_entry.nxp_instrument.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-group',
                )
        self.nxp_entry.nxp_instrument.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_detector = NXdetector()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='detector',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-group',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data = NX_INT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_detector.nxp_detector_number = NX_INT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_detector_number.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='detector_number',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_detector_number.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_detector_number.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='2',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_detector_number.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_detector_number.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                distance to sample for each detector''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_detector.nxp_time_of_flight = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_time_of_flight.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='time_of_flight',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_time_of_flight.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_time_of_flight.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME_OF_FLIGHT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_time_of_flight.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_time_of_flight.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_time_of_flight.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='polar_angle',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                polar angle for each detector element''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_detector.nxp_azimuthal_angle = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_azimuthal_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='azimuthal_angle',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_azimuthal_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_azimuthal_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_azimuthal_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                polar angle for each detector element''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_azimuthal_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_entry.nxp_SAMPLE = NXsample()
        self.nxp_entry.nxp_SAMPLE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-group',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_SAMPLE.nxp_name = NX_CHAR()
        self.nxp_entry.nxp_SAMPLE.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Descriptive name of sample''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-sample-field',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_SAMPLE.nxp_nature = NX_CHAR()
        self.nxp_entry.nxp_SAMPLE.nxp_nature.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='nature',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_nature.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_nature.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-sample-field',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_nature.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_SAMPLE.nxp_nature.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='powder,liquid,single crystal',
                )



        self.nxp_entry.nxp_MONITOR = NXmonitor()
        self.nxp_entry.nxp_MONITOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonitor',
                )
        self.nxp_entry.nxp_MONITOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-group',
                )
        self.nxp_entry.nxp_MONITOR.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_MONITOR.nxp_mode = NX_CHAR()
        self.nxp_entry.nxp_MONITOR.nxp_mode.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='mode',
                )
        self.nxp_entry.nxp_MONITOR.nxp_mode.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Count to a preset value based on either clock time (timer)             or
                received monitor counts (monitor).''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-field',
                )
        self.nxp_entry.nxp_MONITOR.nxp_mode.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_MONITOR.nxp_mode.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='monitor,timer',
                )


        self.nxp_entry.nxp_MONITOR.nxp_preset = NX_FLOAT()
        self.nxp_entry.nxp_MONITOR.nxp_preset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='preset',
                )
        self.nxp_entry.nxp_MONITOR.nxp_preset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_MONITOR.nxp_preset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                preset value for time or monitor''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-field',
                )
        self.nxp_entry.nxp_MONITOR.nxp_preset.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_MONITOR.nxp_distance = NX_FLOAT()
        self.nxp_entry.nxp_MONITOR.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_entry.nxp_MONITOR.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_MONITOR.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_MONITOR.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-field',
                )
        self.nxp_entry.nxp_MONITOR.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_MONITOR.nxp_data = NX_INT()
        self.nxp_entry.nxp_MONITOR.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_MONITOR.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_MONITOR.nxp_data.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_MONITOR.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-field',
                )
        self.nxp_entry.nxp_MONITOR.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_MONITOR.nxp_time_of_flight = NX_FLOAT()
        self.nxp_entry.nxp_MONITOR.nxp_time_of_flight.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='time_of_flight',
                )
        self.nxp_entry.nxp_MONITOR.nxp_time_of_flight.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_MONITOR.nxp_time_of_flight.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME_OF_FLIGHT',
                )
        self.nxp_entry.nxp_MONITOR.nxp_time_of_flight.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_MONITOR.nxp_time_of_flight.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-field',
                )
        self.nxp_entry.nxp_MONITOR.nxp_time_of_flight.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_MONITOR.nxp_integral_counts = NX_INT()
        self.nxp_entry.nxp_MONITOR.nxp_integral_counts.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='integral_counts',
                )
        self.nxp_entry.nxp_MONITOR.nxp_integral_counts.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_MONITOR.nxp_integral_counts.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_entry.nxp_MONITOR.nxp_integral_counts.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-monitor-field',
                )
        self.nxp_entry.nxp_MONITOR.nxp_integral_counts.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_data = NXdata()
        self.nxp_entry.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_entry.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofraw.html#nxtofraw-entry-group',
                )
        self.nxp_entry.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




class NXsqom(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXsqom',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    This is the application definition for S(Q,OM) processed data.           As this
        kind of data is in     general not on a rectangular grid after data reduction, it
        is stored as Q,E positions plus their     intensity, table like. It is the task of
        a possible visualisation program to regrid this data in     a sensible way.
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_ENTRY = NXentry()
        self.nxp_ENTRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_ENTRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-group',
                )
        self.nxp_ENTRY.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_entry = NX_CHAR()
        self.nxp_ENTRY.nxp_entry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry',
                )
        self.nxp_ENTRY.nxp_entry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-attribute',
                )
        self.nxp_ENTRY.nxp_entry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_title = NX_CHAR()
        self.nxp_ENTRY.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_ENTRY.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-field',
                )
        self.nxp_ENTRY.nxp_title.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_definition = NX_CHAR()
        self.nxp_ENTRY.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_ENTRY.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-field',
                )
        self.nxp_ENTRY.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsqom',
                )


        self.nxp_ENTRY.nxp_instrument = NXinstrument()
        self.nxp_ENTRY.nxp_instrument.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='instrument',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_name.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Name of the instrument from which this data was reduced.''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-instrument-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE = NXsource()
        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsource',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_type = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-instrument-source-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_type.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-instrument-source-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_probe = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_probe.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='probe',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_probe.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-instrument-source-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_probe.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_probe.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='neutron,x-ray,electron',
                )




        self.nxp_ENTRY.nxp_SAMPLE = NXsample()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-group',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_SAMPLE.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Descriptive name of sample''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_reduction = NXprocess()
        self.nxp_ENTRY.nxp_reduction.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXprocess',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='reduction',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-group',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_reduction.nxp_program = NX_CHAR()
        self.nxp_ENTRY.nxp_reduction.nxp_program.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='program',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_program.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_program.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-reduction-field',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_program.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_reduction.nxp_version = NX_CHAR()
        self.nxp_ENTRY.nxp_reduction.nxp_version.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='version',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_version.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_version.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-reduction-field',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_version.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_reduction.nxp_input = NXparameters()
        self.nxp_ENTRY.nxp_reduction.nxp_input.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXparameters',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_input.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='input',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_input.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Input parameters for the reduction program used''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-reduction-group',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_input.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_reduction.nxp_input.nxp_filenames = NX_CHAR()
        self.nxp_ENTRY.nxp_reduction.nxp_input.nxp_filenames.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='filenames',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_input.nxp_filenames.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_input.nxp_filenames.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Raw data files used to generate this I(Q)''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-reduction-input-field',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_input.nxp_filenames.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_reduction.nxp_output = NXparameters()
        self.nxp_ENTRY.nxp_reduction.nxp_output.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXparameters',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_output.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='output',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_output.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Eventual output parameters from the data reduction program used''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-reduction-group',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_output.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_DATA = NXdata()
        self.nxp_ENTRY.nxp_DATA.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-group',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_DATA.nxp_data = NX_INT()
        self.nxp_ENTRY.nxp_DATA.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_data.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                This is the intensity for each point in QE''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-data-field',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DATA.nxp_qx = NX_NUMBER()
        self.nxp_ENTRY.nxp_DATA.nxp_qx.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='qx',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_qx.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_qx.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_qx.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVENUMBER',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_qx.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Positions for the first dimension of Q''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-data-field',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_qx.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DATA.nxp_qy = NX_NUMBER()
        self.nxp_ENTRY.nxp_DATA.nxp_qy.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='qy',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_qy.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_qy.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_qy.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVENUMBER',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_qy.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Positions for the the second dimension of Q''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-data-field',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_qy.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DATA.nxp_qz = NX_NUMBER()
        self.nxp_ENTRY.nxp_DATA.nxp_qz.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='qz',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_qz.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_qz.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_qz.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVENUMBER',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_qz.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Positions for the the third dimension of Q''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-data-field',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_qz.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DATA.nxp_en = NX_FLOAT()
        self.nxp_ENTRY.nxp_DATA.nxp_en.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='en',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_en.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_en.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_en.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ENERGY',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_en.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Values for the energy transfer for each point''',
                default='https://manual.nexusformat.org/classes/applications/NXsqom.html#nxsqom-entry-data-field',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_en.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )





class NXxlaueplate(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXxlaueplate',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXxlaue',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    raw data from a single crystal Laue camera, extends :ref:`NXxlaue`          This
        is the application definition for raw data from a single crystal Laue      camera
        with an image plate as a detector. It extends :ref:`NXxlaue`.
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_entry = NXentry()
        self.nxp_entry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_entry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry',
                )
        self.nxp_entry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate-group',
                )
        self.nxp_entry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_definition = NX_CHAR()
        self.nxp_entry.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_entry.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate-entry-field',
                )
        self.nxp_entry.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXxlaueplate',
                )


        self.nxp_entry.nxp_instrument = NXinstrument()
        self.nxp_entry.nxp_instrument.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_entry.nxp_instrument.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='instrument',
                )
        self.nxp_entry.nxp_instrument.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate-entry-group',
                )
        self.nxp_entry.nxp_instrument.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_detector = NXdetector()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='detector',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate-entry-instrument-group',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_detector.nxp_diameter = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_diameter.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='diameter',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_diameter.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_diameter.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_diameter.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The diameter of a cylindrical detector''',
                default='https://manual.nexusformat.org/classes/applications/NXxlaueplate.html#nxxlaueplate-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_diameter.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )






class NXtomophase(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXtomophase',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    This is the application definition for x-ray or neutron tomography raw data with
        phase contrast variation at each point.               In tomography first
        some dark field images are measured, some bright field images and, of course the
        sample. In order        to properly sort the order of the images taken, a sequence
        number is stored with each image.
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_entry = NXentry()
        self.nxp_entry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_entry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry',
                )
        self.nxp_entry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-group',
                )
        self.nxp_entry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_title = NX_CHAR()
        self.nxp_entry.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_entry.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-field',
                )
        self.nxp_entry.nxp_title.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_start_time = NX_DATE_TIME()
        self.nxp_entry.nxp_start_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start_time',
                )
        self.nxp_entry.nxp_start_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_entry.nxp_start_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-field',
                )
        self.nxp_entry.nxp_start_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_end_time = NX_DATE_TIME()
        self.nxp_entry.nxp_end_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='end_time',
                )
        self.nxp_entry.nxp_end_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_entry.nxp_end_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-field',
                )
        self.nxp_entry.nxp_end_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_definition = NX_CHAR()
        self.nxp_entry.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_entry.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-field',
                )
        self.nxp_entry.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXtomophase',
                )


        self.nxp_entry.nxp_instrument = NXinstrument()
        self.nxp_entry.nxp_instrument.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_entry.nxp_instrument.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='instrument',
                )
        self.nxp_entry.nxp_instrument.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-group',
                )
        self.nxp_entry.nxp_instrument.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_SOURCE = NXsource()
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsource',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-group',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_type = NX_CHAR()
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-source-field',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_type.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_name = NX_CHAR()
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-source-field',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_probe = NX_CHAR()
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_probe.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='probe',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_probe.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-source-field',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_probe.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_probe.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='neutron,x-ray,electron',
                )



        self.nxp_entry.nxp_instrument.nxp_bright_field = NXdetector()
        self.nxp_entry.nxp_instrument.nxp_bright_field.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_entry.nxp_instrument.nxp_bright_field.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='bright_field',
                )
        self.nxp_entry.nxp_instrument.nxp_bright_field.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-group',
                )
        self.nxp_entry.nxp_instrument.nxp_bright_field.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_bright_field.nxp_data = NX_INT()
        self.nxp_entry.nxp_instrument.nxp_bright_field.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_instrument.nxp_bright_field.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_instrument.nxp_bright_field.nxp_data.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_instrument.nxp_bright_field.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-bright-field-field',
                )
        self.nxp_entry.nxp_instrument.nxp_bright_field.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_bright_field.nxp_sequence_number = NX_INT()
        self.nxp_entry.nxp_instrument.nxp_bright_field.nxp_sequence_number.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sequence_number',
                )
        self.nxp_entry.nxp_instrument.nxp_bright_field.nxp_sequence_number.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_instrument.nxp_bright_field.nxp_sequence_number.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-bright-field-field',
                )
        self.nxp_entry.nxp_instrument.nxp_bright_field.nxp_sequence_number.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_instrument.nxp_dark_field = NXdetector()
        self.nxp_entry.nxp_instrument.nxp_dark_field.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_entry.nxp_instrument.nxp_dark_field.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='dark_field',
                )
        self.nxp_entry.nxp_instrument.nxp_dark_field.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-group',
                )
        self.nxp_entry.nxp_instrument.nxp_dark_field.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_dark_field.nxp_data = NX_INT()
        self.nxp_entry.nxp_instrument.nxp_dark_field.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_instrument.nxp_dark_field.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_instrument.nxp_dark_field.nxp_data.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_instrument.nxp_dark_field.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-dark-field-field',
                )
        self.nxp_entry.nxp_instrument.nxp_dark_field.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_dark_field.nxp_sequence_number = NX_INT()
        self.nxp_entry.nxp_instrument.nxp_dark_field.nxp_sequence_number.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sequence_number',
                )
        self.nxp_entry.nxp_instrument.nxp_dark_field.nxp_sequence_number.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_instrument.nxp_dark_field.nxp_sequence_number.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-dark-field-field',
                )
        self.nxp_entry.nxp_instrument.nxp_dark_field.nxp_sequence_number.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_instrument.nxp_sample = NXdetector()
        self.nxp_entry.nxp_instrument.nxp_sample.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_entry.nxp_instrument.nxp_sample.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample',
                )
        self.nxp_entry.nxp_instrument.nxp_sample.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-group',
                )
        self.nxp_entry.nxp_instrument.nxp_sample.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_sample.nxp_data = NX_INT()
        self.nxp_entry.nxp_instrument.nxp_sample.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_instrument.nxp_sample.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_instrument.nxp_sample.nxp_data.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_instrument.nxp_sample.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-sample-field',
                )
        self.nxp_entry.nxp_instrument.nxp_sample.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_sample.nxp_sequence_number = NX_INT()
        self.nxp_entry.nxp_instrument.nxp_sample.nxp_sequence_number.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sequence_number',
                )
        self.nxp_entry.nxp_instrument.nxp_sample.nxp_sequence_number.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_instrument.nxp_sample.nxp_sequence_number.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-sample-field',
                )
        self.nxp_entry.nxp_instrument.nxp_sample.nxp_sequence_number.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_sample.nxp_x_pixel_size = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_sample.nxp_x_pixel_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x_pixel_size',
                )
        self.nxp_entry.nxp_instrument.nxp_sample.nxp_x_pixel_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_sample.nxp_x_pixel_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_instrument.nxp_sample.nxp_x_pixel_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-sample-field',
                )
        self.nxp_entry.nxp_instrument.nxp_sample.nxp_x_pixel_size.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_sample.nxp_y_pixel_size = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_sample.nxp_y_pixel_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='y_pixel_size',
                )
        self.nxp_entry.nxp_instrument.nxp_sample.nxp_y_pixel_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_sample.nxp_y_pixel_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_instrument.nxp_sample.nxp_y_pixel_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-sample-field',
                )
        self.nxp_entry.nxp_instrument.nxp_sample.nxp_y_pixel_size.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_sample.nxp_distance = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_sample.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_entry.nxp_instrument.nxp_sample.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_sample.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_instrument.nxp_sample.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Distance between detector and sample''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-instrument-sample-field',
                )
        self.nxp_entry.nxp_instrument.nxp_sample.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_entry.nxp_sample = NXsample()
        self.nxp_entry.nxp_sample.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_entry.nxp_sample.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample',
                )
        self.nxp_entry.nxp_sample.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-group',
                )
        self.nxp_entry.nxp_sample.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_sample.nxp_name = NX_CHAR()
        self.nxp_entry.nxp_sample.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_sample.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Descriptive name of sample''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_rotation_angle = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='rotation_angle',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_x_translation = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_x_translation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x_translation',
                )
        self.nxp_entry.nxp_sample.nxp_x_translation.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_sample.nxp_x_translation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_x_translation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_x_translation.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_y_translation = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_y_translation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='y_translation',
                )
        self.nxp_entry.nxp_sample.nxp_y_translation.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_sample.nxp_y_translation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_y_translation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_y_translation.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_z_translation = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_z_translation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='z_translation',
                )
        self.nxp_entry.nxp_sample.nxp_z_translation.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_sample.nxp_z_translation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_z_translation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_z_translation.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_control = NXmonitor()
        self.nxp_entry.nxp_control.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonitor',
                )
        self.nxp_entry.nxp_control.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='control',
                )
        self.nxp_entry.nxp_control.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-group',
                )
        self.nxp_entry.nxp_control.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_control.nxp_integral = NX_FLOAT()
        self.nxp_entry.nxp_control.nxp_integral.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='integral',
                )
        self.nxp_entry.nxp_control.nxp_integral.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_control.nxp_integral.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_entry.nxp_control.nxp_integral.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Total integral monitor counts for each measured frame. Allows a correction
                for           fluctuations in the beam between frames.''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-control-field',
                )
        self.nxp_entry.nxp_control.nxp_integral.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_data = NXdata()
        self.nxp_entry.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_entry.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomophase.html#nxtomophase-entry-group',
                )
        self.nxp_entry.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




class NXiqproc(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXiqproc',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            Application definition for any :math:`I(Q)` data.
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_ENTRY = NXentry()
        self.nxp_ENTRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_ENTRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-group',
                )
        self.nxp_ENTRY.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_entry = NX_CHAR()
        self.nxp_ENTRY.nxp_entry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry',
                )
        self.nxp_ENTRY.nxp_entry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-attribute',
                )
        self.nxp_ENTRY.nxp_entry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_title = NX_CHAR()
        self.nxp_ENTRY.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_ENTRY.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-field',
                )
        self.nxp_ENTRY.nxp_title.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_definition = NX_CHAR()
        self.nxp_ENTRY.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_ENTRY.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-field',
                )
        self.nxp_ENTRY.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXiqproc',
                )


        self.nxp_ENTRY.nxp_instrument = NXinstrument()
        self.nxp_ENTRY.nxp_instrument.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='instrument',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_name.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Name of the instrument from which this data was reduced.''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-instrument-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE = NXsource()
        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsource',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_type = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-instrument-source-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_type.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-instrument-source-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_probe = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_probe.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='probe',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_probe.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-instrument-source-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_probe.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SOURCE.nxp_probe.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='neutron,x-ray,electron',
                )




        self.nxp_ENTRY.nxp_SAMPLE = NXsample()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-group',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_SAMPLE.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Descriptive name of sample''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_reduction = NXprocess()
        self.nxp_ENTRY.nxp_reduction.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXprocess',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='reduction',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-group',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_reduction.nxp_program = NX_CHAR()
        self.nxp_ENTRY.nxp_reduction.nxp_program.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='program',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_program.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_program.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-reduction-field',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_program.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_reduction.nxp_version = NX_CHAR()
        self.nxp_ENTRY.nxp_reduction.nxp_version.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='version',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_version.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_version.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-reduction-field',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_version.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_reduction.nxp_input = NXparameters()
        self.nxp_ENTRY.nxp_reduction.nxp_input.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXparameters',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_input.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='input',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_input.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Input parameters for the reduction program used''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-reduction-group',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_input.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_reduction.nxp_input.nxp_filenames = NX_CHAR()
        self.nxp_ENTRY.nxp_reduction.nxp_input.nxp_filenames.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='filenames',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_input.nxp_filenames.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_input.nxp_filenames.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Raw data files used to generate this I(Q)''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-reduction-input-field',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_input.nxp_filenames.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_reduction.nxp_output = NXparameters()
        self.nxp_ENTRY.nxp_reduction.nxp_output.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXparameters',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_output.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='output',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_output.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Eventual output parameters from the data reduction program used''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-reduction-group',
                )
        self.nxp_ENTRY.nxp_reduction.nxp_output.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_DATA = NXdata()
        self.nxp_ENTRY.nxp_DATA.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-group',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_DATA.nxp_data = NX_INT()
        self.nxp_ENTRY.nxp_DATA.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_data.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is I(Q). The client has to analyse the dimensions                 of
                I(Q). Often, multiple I(Q) for various environment
                conditions are measured; that would be the first
                dimension. Q can be multidimensional, this accounts for
                the further dimensions in the data''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-data-field',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DATA.nxp_variable = NX_NUMBER()
        self.nxp_ENTRY.nxp_DATA.nxp_variable.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='variable',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_variable.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_variable.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_variable.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-data-field',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_variable.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_DATA.nxp_variable.nxp_varied_variable = NX_CHAR()
        self.nxp_ENTRY.nxp_DATA.nxp_variable.nxp_varied_variable.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='varied_variable',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_variable.nxp_varied_variable.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The real name of the varied variable in the first dim of data,
                temperature, P, MF etc...''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-data-variable-attribute',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_variable.nxp_varied_variable.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_DATA.nxp_qx = NX_NUMBER()
        self.nxp_ENTRY.nxp_DATA.nxp_qx.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='qx',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_qx.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_qx.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='2',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_qx.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Values for the first dimension of Q''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-data-field',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_qx.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DATA.nxp_qy = NX_NUMBER()
        self.nxp_ENTRY.nxp_DATA.nxp_qy.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='qy',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_qy.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_qy.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='3',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_qy.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Values for the second dimension of Q''',
                default='https://manual.nexusformat.org/classes/applications/NXiqproc.html#nxiqproc-entry-data-field',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_qy.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )





class NXspe(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXspe',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            NXSPE Inelastic Format.  Application definition for NXSPE file format.
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_ENTRY = NXentry()
        self.nxp_ENTRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_ENTRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-group',
                )
        self.nxp_ENTRY.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_program_name = NX_CHAR()
        self.nxp_ENTRY.nxp_program_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='program_name',
                )
        self.nxp_ENTRY.nxp_program_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-field',
                )
        self.nxp_ENTRY.nxp_program_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_definition = NX_CHAR()
        self.nxp_ENTRY.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_ENTRY.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms.''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-field',
                )
        self.nxp_ENTRY.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXSPE,NXspe',
                )

        self.nxp_ENTRY.nxp_definition.nxp_version = NX_CHAR()
        self.nxp_ENTRY.nxp_definition.nxp_version.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='version',
                )
        self.nxp_ENTRY.nxp_definition.nxp_version.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-definition-attribute',
                )
        self.nxp_ENTRY.nxp_definition.nxp_version.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_NXSPE_info = NXcollection()
        self.nxp_ENTRY.nxp_NXSPE_info.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcollection',
                )
        self.nxp_ENTRY.nxp_NXSPE_info.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXSPE_info',
                )
        self.nxp_ENTRY.nxp_NXSPE_info.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-group',
                )
        self.nxp_ENTRY.nxp_NXSPE_info.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_NXSPE_info.nxp_fixed_energy = NX_FLOAT()
        self.nxp_ENTRY.nxp_NXSPE_info.nxp_fixed_energy.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='fixed_energy',
                )
        self.nxp_ENTRY.nxp_NXSPE_info.nxp_fixed_energy.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_NXSPE_info.nxp_fixed_energy.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ENERGY',
                )
        self.nxp_ENTRY.nxp_NXSPE_info.nxp_fixed_energy.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The fixed energy used for this file.''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-nxspe-info-field',
                )
        self.nxp_ENTRY.nxp_NXSPE_info.nxp_fixed_energy.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_NXSPE_info.nxp_ki_over_kf_scaling = NX_BOOLEAN()
        self.nxp_ENTRY.nxp_NXSPE_info.nxp_ki_over_kf_scaling.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='ki_over_kf_scaling',
                )
        self.nxp_ENTRY.nxp_NXSPE_info.nxp_ki_over_kf_scaling.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_BOOLEAN',
                )
        self.nxp_ENTRY.nxp_NXSPE_info.nxp_ki_over_kf_scaling.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Indicates whether ki/kf scaling has been applied or not.''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-nxspe-info-field',
                )
        self.nxp_ENTRY.nxp_NXSPE_info.nxp_ki_over_kf_scaling.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_NXSPE_info.nxp_psi = NX_FLOAT()
        self.nxp_ENTRY.nxp_NXSPE_info.nxp_psi.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='psi',
                )
        self.nxp_ENTRY.nxp_NXSPE_info.nxp_psi.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_NXSPE_info.nxp_psi.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_ENTRY.nxp_NXSPE_info.nxp_psi.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Orientation angle as expected in DCS-MSlice''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-nxspe-info-field',
                )
        self.nxp_ENTRY.nxp_NXSPE_info.nxp_psi.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_data = NXdata()
        self.nxp_ENTRY.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_ENTRY.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-group',
                )
        self.nxp_ENTRY.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_data.nxp_azimuthal = NX_FLOAT()
        self.nxp_ENTRY.nxp_data.nxp_azimuthal.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='azimuthal',
                )
        self.nxp_ENTRY.nxp_data.nxp_azimuthal.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_data.nxp_azimuthal.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_ENTRY.nxp_data.nxp_azimuthal.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-field',
                )
        self.nxp_ENTRY.nxp_data.nxp_azimuthal.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_data.nxp_azimuthal_width = NX_FLOAT()
        self.nxp_ENTRY.nxp_data.nxp_azimuthal_width.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='azimuthal_width',
                )
        self.nxp_ENTRY.nxp_data.nxp_azimuthal_width.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_data.nxp_azimuthal_width.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_ENTRY.nxp_data.nxp_azimuthal_width.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-field',
                )
        self.nxp_ENTRY.nxp_data.nxp_azimuthal_width.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_data.nxp_polar = NX_FLOAT()
        self.nxp_ENTRY.nxp_data.nxp_polar.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='polar',
                )
        self.nxp_ENTRY.nxp_data.nxp_polar.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_data.nxp_polar.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_ENTRY.nxp_data.nxp_polar.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-field',
                )
        self.nxp_ENTRY.nxp_data.nxp_polar.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_data.nxp_polar_width = NX_FLOAT()
        self.nxp_ENTRY.nxp_data.nxp_polar_width.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='polar_width',
                )
        self.nxp_ENTRY.nxp_data.nxp_polar_width.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_data.nxp_polar_width.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_ENTRY.nxp_data.nxp_polar_width.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-field',
                )
        self.nxp_ENTRY.nxp_data.nxp_polar_width.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_data.nxp_distance = NX_FLOAT()
        self.nxp_ENTRY.nxp_data.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_ENTRY.nxp_data.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_data.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_data.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-field',
                )
        self.nxp_ENTRY.nxp_data.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_data.nxp_data = NX_NUMBER()
        self.nxp_ENTRY.nxp_data.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_data.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_data.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-field',
                )
        self.nxp_ENTRY.nxp_data.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_data.nxp_error = NX_NUMBER()
        self.nxp_ENTRY.nxp_data.nxp_error.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='error',
                )
        self.nxp_ENTRY.nxp_data.nxp_error.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_data.nxp_error.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-field',
                )
        self.nxp_ENTRY.nxp_data.nxp_error.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_data.nxp_energy = NX_FLOAT()
        self.nxp_ENTRY.nxp_data.nxp_energy.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='energy',
                )
        self.nxp_ENTRY.nxp_data.nxp_energy.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_data.nxp_energy.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ENERGY',
                )
        self.nxp_ENTRY.nxp_data.nxp_energy.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-data-field',
                )
        self.nxp_ENTRY.nxp_data.nxp_energy.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_INSTRUMENT = NXinstrument()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_name.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-instrument-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_FERMI_CHOPPER = NXfermi_chopper()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_FERMI_CHOPPER.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXfermi_chopper',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_FERMI_CHOPPER.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_FERMI_CHOPPER.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_FERMI_CHOPPER.nxp_energy = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_FERMI_CHOPPER.nxp_energy.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='energy',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_FERMI_CHOPPER.nxp_energy.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_FERMI_CHOPPER.nxp_energy.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ENERGY',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_FERMI_CHOPPER.nxp_energy.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-instrument-fermi-chopper-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_FERMI_CHOPPER.nxp_energy.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_ENTRY.nxp_SAMPLE = NXsample()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-group',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_SAMPLE.nxp_rotation_angle = NX_NUMBER()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_rotation_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='rotation_angle',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_rotation_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_rotation_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_rotation_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_rotation_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_SAMPLE.nxp_seblock = NX_CHAR()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_seblock.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='seblock',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_seblock.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_seblock.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_seblock.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_SAMPLE.nxp_temperature = NX_NUMBER()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_temperature.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='temperature',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_temperature.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_temperature.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TEMPERATURE',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_temperature.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXspe.html#nxspe-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_temperature.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )





class NXxas(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXxas',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    This is an application definition for raw data from an X-ray absorption
        spectroscopy experiment.               This is essentially a scan on energy versus
        incoming/        absorbed beam.
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_ENTRY = NXentry()
        self.nxp_ENTRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_ENTRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-group',
                )
        self.nxp_ENTRY.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_entry = NX_CHAR()
        self.nxp_ENTRY.nxp_entry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry',
                )
        self.nxp_ENTRY.nxp_entry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                NeXus convention is to use "entry1", "entry2", ...                 for
                analysis software to locate each entry.''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-attribute',
                )
        self.nxp_ENTRY.nxp_entry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_title = NX_CHAR()
        self.nxp_ENTRY.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_ENTRY.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-field',
                )
        self.nxp_ENTRY.nxp_title.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_start_time = NX_DATE_TIME()
        self.nxp_ENTRY.nxp_start_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start_time',
                )
        self.nxp_ENTRY.nxp_start_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_ENTRY.nxp_start_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-field',
                )
        self.nxp_ENTRY.nxp_start_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_definition = NX_CHAR()
        self.nxp_ENTRY.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_ENTRY.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-field',
                )
        self.nxp_ENTRY.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXxas',
                )


        self.nxp_ENTRY.nxp_INSTRUMENT = NXinstrument()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE = NXsource()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsource',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_type = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-source-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_type.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-source-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='probe',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-source-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x-ray',
                )



        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator = NXmonochromator()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonochromator',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='monochromator',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_energy = NX_FLOAT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_energy.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='energy',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_energy.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_energy.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_energy.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-monochromator-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_energy.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_incoming_beam = NXdetector()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_incoming_beam.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_incoming_beam.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='incoming_beam',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_incoming_beam.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_incoming_beam.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_incoming_beam.nxp_data = NX_INT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_incoming_beam.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_incoming_beam.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_incoming_beam.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-incoming-beam-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_incoming_beam.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_absorbed_beam = NXdetector()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_absorbed_beam.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_absorbed_beam.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='absorbed_beam',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_absorbed_beam.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_absorbed_beam.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_absorbed_beam.nxp_data = NX_INT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_absorbed_beam.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_absorbed_beam.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_absorbed_beam.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                mark this field with attribute  ``signal=1``''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-instrument-absorbed-beam-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_absorbed_beam.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_ENTRY.nxp_SAMPLE = NXsample()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-group',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_SAMPLE.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Descriptive name of sample''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_MONITOR = NXmonitor()
        self.nxp_ENTRY.nxp_MONITOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonitor',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-group',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_MONITOR.nxp_mode = NX_CHAR()
        self.nxp_ENTRY.nxp_MONITOR.nxp_mode.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='mode',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_mode.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Count to a preset value based on either clock time (timer)
                or received monitor counts (monitor).''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-monitor-field',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_mode.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_mode.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='monitor,timer',
                )


        self.nxp_ENTRY.nxp_MONITOR.nxp_preset = NX_FLOAT()
        self.nxp_ENTRY.nxp_MONITOR.nxp_preset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='preset',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_preset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_preset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                preset value for time or monitor''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-monitor-field',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_preset.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_MONITOR.nxp_data = NX_INT()
        self.nxp_ENTRY.nxp_MONITOR.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-monitor-field',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_DATA = NXdata()
        self.nxp_ENTRY.nxp_DATA.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxas.html#nxxas-entry-group',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




class NXxasproc(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXxasproc',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    Processed data from XAS. This is energy versus I(incoming)/I(absorbed).
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_ENTRY = NXentry()
        self.nxp_ENTRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_ENTRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-group',
                )
        self.nxp_ENTRY.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_entry = NX_CHAR()
        self.nxp_ENTRY.nxp_entry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry',
                )
        self.nxp_ENTRY.nxp_entry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                NeXus convention is to use "entry1", "entry2", ...                  for
                analysis software to locate each entry.''',
                default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-attribute',
                )
        self.nxp_ENTRY.nxp_entry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_title = NX_CHAR()
        self.nxp_ENTRY.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_ENTRY.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-field',
                )
        self.nxp_ENTRY.nxp_title.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_definition = NX_CHAR()
        self.nxp_ENTRY.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_ENTRY.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-field',
                )
        self.nxp_ENTRY.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXxasproc',
                )


        self.nxp_ENTRY.nxp_SAMPLE = NXsample()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-group',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_SAMPLE.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Descriptive name of sample''',
                default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_XAS_data_reduction = NXprocess()
        self.nxp_ENTRY.nxp_XAS_data_reduction.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXprocess',
                )
        self.nxp_ENTRY.nxp_XAS_data_reduction.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='XAS_data_reduction',
                )
        self.nxp_ENTRY.nxp_XAS_data_reduction.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-group',
                )
        self.nxp_ENTRY.nxp_XAS_data_reduction.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_XAS_data_reduction.nxp_program = NX_CHAR()
        self.nxp_ENTRY.nxp_XAS_data_reduction.nxp_program.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='program',
                )
        self.nxp_ENTRY.nxp_XAS_data_reduction.nxp_program.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_XAS_data_reduction.nxp_program.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Name of the program used for reconstruction''',
                default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-xas-data-reduction-field',
                )
        self.nxp_ENTRY.nxp_XAS_data_reduction.nxp_program.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_XAS_data_reduction.nxp_version = NX_CHAR()
        self.nxp_ENTRY.nxp_XAS_data_reduction.nxp_version.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='version',
                )
        self.nxp_ENTRY.nxp_XAS_data_reduction.nxp_version.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_XAS_data_reduction.nxp_version.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Version of the program used''',
                default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-xas-data-reduction-field',
                )
        self.nxp_ENTRY.nxp_XAS_data_reduction.nxp_version.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_XAS_data_reduction.nxp_date = NX_DATE_TIME()
        self.nxp_ENTRY.nxp_XAS_data_reduction.nxp_date.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='date',
                )
        self.nxp_ENTRY.nxp_XAS_data_reduction.nxp_date.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_ENTRY.nxp_XAS_data_reduction.nxp_date.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Date and time of reconstruction processing.''',
                default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-xas-data-reduction-field',
                )
        self.nxp_ENTRY.nxp_XAS_data_reduction.nxp_date.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_XAS_data_reduction.nxp_parameters = NXparameters()
        self.nxp_ENTRY.nxp_XAS_data_reduction.nxp_parameters.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXparameters',
                )
        self.nxp_ENTRY.nxp_XAS_data_reduction.nxp_parameters.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='parameters',
                )
        self.nxp_ENTRY.nxp_XAS_data_reduction.nxp_parameters.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-xas-data-reduction-group',
                )
        self.nxp_ENTRY.nxp_XAS_data_reduction.nxp_parameters.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_XAS_data_reduction.nxp_parameters.nxp_raw_file = NX_CHAR()
        self.nxp_ENTRY.nxp_XAS_data_reduction.nxp_parameters.nxp_raw_file.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='raw_file',
                )
        self.nxp_ENTRY.nxp_XAS_data_reduction.nxp_parameters.nxp_raw_file.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_XAS_data_reduction.nxp_parameters.nxp_raw_file.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Original raw data file this data was derived from''',
                default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-xas-data-reduction-parameters-field',
                )
        self.nxp_ENTRY.nxp_XAS_data_reduction.nxp_parameters.nxp_raw_file.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_ENTRY.nxp_DATA = NXdata()
        self.nxp_ENTRY.nxp_DATA.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-group',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_DATA.nxp_energy = NX_CHAR()
        self.nxp_ENTRY.nxp_DATA.nxp_energy.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='energy',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_energy.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_energy.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-data-field',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_energy.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DATA.nxp_data = NX_FLOAT()
        self.nxp_ENTRY.nxp_DATA.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is corrected and calibrated I(incoming)/I(absorbed). So it is the
                absorption.                     Expect attribute  ``signal=1``''',
                default='https://manual.nexusformat.org/classes/applications/NXxasproc.html#nxxasproc-entry-data-field',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )





class NXxeuler(NXxbase):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXxeuler',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXxbase',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    raw data from a :index:`four-circle diffractometer` with an :index:`eulerian
        cradle`, extends :ref:`NXxbase`              It extends :ref:`NXxbase`, so the
        full definition is the content        of :ref:`NXxbase` plus the data defined
        here. All four angles are        logged in order to support arbitrary scans in
        reciprocal space.
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_entry = NXentry()
        self.nxp_entry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_entry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry',
                )
        self.nxp_entry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-group',
                )
        self.nxp_entry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_definition = NX_CHAR()
        self.nxp_entry.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_entry.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-field',
                )
        self.nxp_entry.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXxeuler',
                )


        self.nxp_entry.nxp_instrument = NXinstrument()
        self.nxp_entry.nxp_instrument.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_entry.nxp_instrument.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='instrument',
                )
        self.nxp_entry.nxp_instrument.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-group',
                )
        self.nxp_entry.nxp_instrument.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_detector = NXdetector()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='detector',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-instrument-group',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='polar_angle',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The polar_angle (two theta) where the detector is placed               at
                each scan point.''',
                default='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_entry.nxp_sample = NXsample()
        self.nxp_entry.nxp_sample.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_entry.nxp_sample.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample',
                )
        self.nxp_entry.nxp_sample.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-group',
                )
        self.nxp_entry.nxp_sample.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_sample.nxp_rotation_angle = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='rotation_angle',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is an array holding the sample rotation angle at each
                scan point''',
                default='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_chi = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_chi.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='chi',
                )
        self.nxp_entry.nxp_sample.nxp_chi.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_chi.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_sample.nxp_chi.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_sample.nxp_chi.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is an array holding the chi angle of the eulerian             cradle
                at each scan point''',
                default='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_chi.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_phi = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_phi.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='phi',
                )
        self.nxp_entry.nxp_sample.nxp_phi.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_phi.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_sample.nxp_phi.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_sample.nxp_phi.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is an array holding the phi rotation of the eulerian
                cradle at each scan point''',
                default='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_phi.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_name = NXdata()
        self.nxp_entry.nxp_name.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_entry.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxeuler.html#nxxeuler-entry-group',
                )
        self.nxp_entry.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




class NXlauetof(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXlauetof',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    This is the application definition for a TOF laue diffractometer
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_entry = NXentry()
        self.nxp_entry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_entry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry',
                )
        self.nxp_entry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-group',
                )
        self.nxp_entry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_definition = NX_CHAR()
        self.nxp_entry.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_entry.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-field',
                )
        self.nxp_entry.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlauetof',
                )


        self.nxp_entry.nxp_instrument = NXinstrument()
        self.nxp_entry.nxp_instrument.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_entry.nxp_instrument.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='instrument',
                )
        self.nxp_entry.nxp_instrument.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-group',
                )
        self.nxp_entry.nxp_instrument.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_detector = NXdetector()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='detector',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This assumes a planar 2D detector. All angles and distances refer to the
                center of the            detector.''',
                default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-group',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='polar_angle',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The polar_angle (two theta) where the detector is placed.''',
                default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_detector.nxp_azimuthal_angle = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_azimuthal_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='azimuthal_angle',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_azimuthal_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_azimuthal_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_azimuthal_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The azimuthal angle where the detector is placed.''',
                default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_azimuthal_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data = NX_INT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_signal = NX_POSINT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_signal.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='signal',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_signal.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_POSINT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_signal.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-data-attribute',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_signal.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_signal.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )



        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_pixel_size = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x_pixel_size',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_pixel_size = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='y_pixel_size',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_detector.nxp_time_of_flight = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_time_of_flight.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='time_of_flight',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_time_of_flight.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME_OF_FLIGHT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_time_of_flight.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_time_of_flight.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_time_of_flight.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_entry.nxp_sample = NXsample()
        self.nxp_entry.nxp_sample.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_entry.nxp_sample.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample',
                )
        self.nxp_entry.nxp_sample.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-group',
                )
        self.nxp_entry.nxp_sample.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_sample.nxp_name = NX_CHAR()
        self.nxp_entry.nxp_sample.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_sample.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Descriptive name of sample''',
                default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_orientation_matrix = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_orientation_matrix.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='orientation_matrix',
                )
        self.nxp_entry.nxp_sample.nxp_orientation_matrix.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_orientation_matrix.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The orientation matrix according to Busing and             Levy
                conventions. This is not strictly necessary as             the UB can
                always be derived from the data.  But             let us bow to common
                usage which includes thie             UB nearly always.''',
                default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_orientation_matrix.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_unit_cell = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_unit_cell.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unit_cell',
                )
        self.nxp_entry.nxp_sample.nxp_unit_cell.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_unit_cell.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The unit cell, a, b, c, alpha, beta, gamma.             Again, not
                strictly necessary, but normally written.''',
                default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_unit_cell.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_control = NXmonitor()
        self.nxp_entry.nxp_control.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonitor',
                )
        self.nxp_entry.nxp_control.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='control',
                )
        self.nxp_entry.nxp_control.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-group',
                )
        self.nxp_entry.nxp_control.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_control.nxp_mode = NX_CHAR()
        self.nxp_entry.nxp_control.nxp_mode.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='mode',
                )
        self.nxp_entry.nxp_control.nxp_mode.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Count to a preset value based on either clock time (timer) or received
                monitor counts           (monitor).''',
                default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-control-field',
                )
        self.nxp_entry.nxp_control.nxp_mode.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_control.nxp_mode.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='monitor,timer',
                )


        self.nxp_entry.nxp_control.nxp_preset = NX_FLOAT()
        self.nxp_entry.nxp_control.nxp_preset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='preset',
                )
        self.nxp_entry.nxp_control.nxp_preset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_control.nxp_preset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                preset value for time or monitor''',
                default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-control-field',
                )
        self.nxp_entry.nxp_control.nxp_preset.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_control.nxp_data = NX_INT()
        self.nxp_entry.nxp_control.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_control.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_control.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                use these attributes  ``primary=1 signal=1``''',
                default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-control-field',
                )
        self.nxp_entry.nxp_control.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_control.nxp_time_of_flight = NX_FLOAT()
        self.nxp_entry.nxp_control.nxp_time_of_flight.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='time_of_flight',
                )
        self.nxp_entry.nxp_control.nxp_time_of_flight.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME_OF_FLIGHT',
                )
        self.nxp_entry.nxp_control.nxp_time_of_flight.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_control.nxp_time_of_flight.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-control-field',
                )
        self.nxp_entry.nxp_control.nxp_time_of_flight.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_name = NXdata()
        self.nxp_entry.nxp_name.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_entry.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXlauetof.html#nxlauetof-entry-group',
                )
        self.nxp_entry.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




class NXxnb(NXxbase):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXxnb',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXxbase',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    raw data from a single crystal diffractometer, extends :ref:`NXxbase`
        This is the application definition for raw data from      a single crystal
        diffractometer     measuring in normal beam mode. It extends :ref:`NXxbase`,
        so the full definition is the content of     :ref:`NXxbase` plus the data defined
        here. All angles are      logged in order to support arbitrary scans in
        reciprocal space.
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_entry = NXentry()
        self.nxp_entry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_entry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry',
                )
        self.nxp_entry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-group',
                )
        self.nxp_entry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_definition = NX_CHAR()
        self.nxp_entry.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_entry.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-field',
                )
        self.nxp_entry.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXxnb',
                )


        self.nxp_entry.nxp_instrument = NXinstrument()
        self.nxp_entry.nxp_instrument.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_entry.nxp_instrument.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='instrument',
                )
        self.nxp_entry.nxp_instrument.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-group',
                )
        self.nxp_entry.nxp_instrument.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_detector = NXdetector()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='detector',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-instrument-group',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='polar_angle',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The polar_angle (gamma) of the detector for each scan point.''',
                default='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_detector.nxp_tilt_angle = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_tilt_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='tilt_angle',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_tilt_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_tilt_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_tilt_angle.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_tilt_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The angle by which the detector has been tilted out of the
                scattering plane.''',
                default='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_tilt_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_entry.nxp_sample = NXsample()
        self.nxp_entry.nxp_sample.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_entry.nxp_sample.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample',
                )
        self.nxp_entry.nxp_sample.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-group',
                )
        self.nxp_entry.nxp_sample.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_sample.nxp_rotation_angle = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='rotation_angle',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_primary= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is an array holding the sample rotation angle at each           scan
                point''',
                default='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_name = NXdata()
        self.nxp_entry.nxp_name.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_entry.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxnb.html#nxxnb-entry-group',
                )
        self.nxp_entry.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




class NXtas(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXtas',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    This is an application definition for a triple axis spectrometer.           It is
        for the trademark scan of the TAS, the Q-E scan.      For your alignment scans use
        the rules in :ref:`NXscan`.
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_entry = NXentry()
        self.nxp_entry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_entry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry',
                )
        self.nxp_entry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-group',
                )
        self.nxp_entry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_title = NX_CHAR()
        self.nxp_entry.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_entry.nxp_title.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-field',
                )
        self.nxp_entry.nxp_title.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_start_time = NX_DATE_TIME()
        self.nxp_entry.nxp_start_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start_time',
                )
        self.nxp_entry.nxp_start_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_entry.nxp_start_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-field',
                )
        self.nxp_entry.nxp_start_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_definition = NX_CHAR()
        self.nxp_entry.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_entry.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-field',
                )
        self.nxp_entry.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXtas',
                )


        self.nxp_entry.nxp_INSTRUMENT = NXinstrument()
        self.nxp_entry.nxp_INSTRUMENT.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-group',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE = NXsource()
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsource',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-group',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_name = NX_CHAR()
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-source-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe = NX_CHAR()
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='probe',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-source-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='neutron,x-ray',
                )



        self.nxp_entry.nxp_INSTRUMENT.nxp_monochromator = NXcrystal()
        self.nxp_entry.nxp_INSTRUMENT.nxp_monochromator.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcrystal',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_monochromator.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='monochromator',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_monochromator.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-group',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_monochromator.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_INSTRUMENT.nxp_monochromator.nxp_ei = NX_FLOAT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_monochromator.nxp_ei.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='ei',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_monochromator.nxp_ei.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_monochromator.nxp_ei.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ENERGY',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_monochromator.nxp_ei.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_monochromator.nxp_ei.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-monochromator-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_monochromator.nxp_ei.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_INSTRUMENT.nxp_monochromator.nxp_rotation_angle = NX_FLOAT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_monochromator.nxp_rotation_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='rotation_angle',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_monochromator.nxp_rotation_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_monochromator.nxp_rotation_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_monochromator.nxp_rotation_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-monochromator-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_monochromator.nxp_rotation_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser = NXcrystal()
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcrystal',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='analyser',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-group',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_ef = NX_FLOAT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_ef.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='ef',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_ef.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_ef.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ENERGY',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_ef.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_ef.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-analyser-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_ef.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_rotation_angle = NX_FLOAT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_rotation_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='rotation_angle',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_rotation_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_rotation_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_rotation_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-analyser-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_rotation_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_polar_angle = NX_FLOAT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_polar_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='polar_angle',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_polar_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_polar_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_polar_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-analyser-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_polar_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR = NXdetector()
        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-group',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_data = NX_INT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_data.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_polar_angle = NX_FLOAT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_polar_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='polar_angle',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_polar_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_polar_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_polar_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_polar_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_entry.nxp_SAMPLE = NXsample()
        self.nxp_entry.nxp_SAMPLE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-group',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_SAMPLE.nxp_name = NX_CHAR()
        self.nxp_entry.nxp_SAMPLE.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Descriptive name of sample''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-field',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_SAMPLE.nxp_qh = NX_FLOAT()
        self.nxp_entry.nxp_SAMPLE.nxp_qh.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='qh',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_qh.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_qh.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DIMENSIONLESS',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_qh.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_qh.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-field',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_qh.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_SAMPLE.nxp_qk = NX_FLOAT()
        self.nxp_entry.nxp_SAMPLE.nxp_qk.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='qk',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_qk.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_qk.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DIMENSIONLESS',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_qk.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_qk.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-field',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_qk.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_SAMPLE.nxp_ql = NX_FLOAT()
        self.nxp_entry.nxp_SAMPLE.nxp_ql.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='ql',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_ql.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_ql.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DIMENSIONLESS',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_ql.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_ql.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-field',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_ql.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_SAMPLE.nxp_en = NX_FLOAT()
        self.nxp_entry.nxp_SAMPLE.nxp_en.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='en',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_en.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_en.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ENERGY',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_en.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_en.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-field',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_en.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_SAMPLE.nxp_rotation_angle = NX_FLOAT()
        self.nxp_entry.nxp_SAMPLE.nxp_rotation_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='rotation_angle',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_rotation_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_rotation_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_rotation_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-field',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_rotation_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_SAMPLE.nxp_polar_angle = NX_FLOAT()
        self.nxp_entry.nxp_SAMPLE.nxp_polar_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='polar_angle',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_polar_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_polar_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_polar_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-field',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_polar_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_SAMPLE.nxp_sgu = NX_FLOAT()
        self.nxp_entry.nxp_SAMPLE.nxp_sgu.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sgu',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_sgu.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_sgu.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_sgu.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-field',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_sgu.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_SAMPLE.nxp_sgl = NX_FLOAT()
        self.nxp_entry.nxp_SAMPLE.nxp_sgl.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sgl',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_sgl.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_sgl.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_sgl.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-field',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_sgl.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_SAMPLE.nxp_unit_cell = NX_FLOAT()
        self.nxp_entry.nxp_SAMPLE.nxp_unit_cell.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='unit_cell',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_unit_cell.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_unit_cell.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_unit_cell.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-field',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_unit_cell.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_SAMPLE.nxp_orientation_matrix = NX_FLOAT()
        self.nxp_entry.nxp_SAMPLE.nxp_orientation_matrix.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='orientation_matrix',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_orientation_matrix.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_orientation_matrix.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DIMENSIONLESS',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_orientation_matrix.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-sample-field',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_orientation_matrix.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_MONITOR = NXmonitor()
        self.nxp_entry.nxp_MONITOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonitor',
                )
        self.nxp_entry.nxp_MONITOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-group',
                )
        self.nxp_entry.nxp_MONITOR.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_MONITOR.nxp_mode = NX_CHAR()
        self.nxp_entry.nxp_MONITOR.nxp_mode.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='mode',
                )
        self.nxp_entry.nxp_MONITOR.nxp_mode.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Count to a preset value based on either clock time (timer)             or
                received monitor counts (monitor).''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-monitor-field',
                )
        self.nxp_entry.nxp_MONITOR.nxp_mode.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_MONITOR.nxp_mode.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='monitor,timer',
                )


        self.nxp_entry.nxp_MONITOR.nxp_preset = NX_FLOAT()
        self.nxp_entry.nxp_MONITOR.nxp_preset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='preset',
                )
        self.nxp_entry.nxp_MONITOR.nxp_preset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_MONITOR.nxp_preset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                preset value for time or monitor''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-monitor-field',
                )
        self.nxp_entry.nxp_MONITOR.nxp_preset.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_MONITOR.nxp_data = NX_FLOAT()
        self.nxp_entry.nxp_MONITOR.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_MONITOR.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_MONITOR.nxp_data.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_entry.nxp_MONITOR.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Total integral monitor counts''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-monitor-field',
                )
        self.nxp_entry.nxp_MONITOR.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_DATA = NXdata()
        self.nxp_entry.nxp_DATA.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_entry.nxp_DATA.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                One of the ei,ef,qh,qk,ql,en should get a primary=1 attribute to denote
                the main scan axis''',
                default='https://manual.nexusformat.org/classes/applications/NXtas.html#nxtas-entry-group',
                )
        self.nxp_entry.nxp_DATA.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




class NXarchive(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXarchive',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    This is a definition for data to be archived by ICAT
        (http://www.icatproject.org/).                  .. text from the icatproject.org
        site                          the database (with supporting software) that
        provides an                  interface to all ISIS experimental data and will
        provide                  a mechanism to link all aspects of ISIS research from
        proposal through to publication.
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_entry = NXentry()
        self.nxp_entry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_entry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry',
                )
        self.nxp_entry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-group',
                )
        self.nxp_entry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_index = NX_CHAR()
        self.nxp_entry.nxp_index.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='index',
                )
        self.nxp_entry.nxp_index.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-attribute',
                )
        self.nxp_entry.nxp_index.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_title = NX_CHAR()
        self.nxp_entry.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_entry.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-field',
                )
        self.nxp_entry.nxp_title.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_experiment_identifier = NX_CHAR()
        self.nxp_entry.nxp_experiment_identifier.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='experiment_identifier',
                )
        self.nxp_entry.nxp_experiment_identifier.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_experiment_identifier.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                unique identifier for the experiment''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-field',
                )
        self.nxp_entry.nxp_experiment_identifier.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_experiment_description = NX_CHAR()
        self.nxp_entry.nxp_experiment_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='experiment_description',
                )
        self.nxp_entry.nxp_experiment_description.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_experiment_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Brief description of the experiment and its objectives''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-field',
                )
        self.nxp_entry.nxp_experiment_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_collection_identifier = NX_CHAR()
        self.nxp_entry.nxp_collection_identifier.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='collection_identifier',
                )
        self.nxp_entry.nxp_collection_identifier.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_collection_identifier.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ID of user or DAQ define group of data files''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-field',
                )
        self.nxp_entry.nxp_collection_identifier.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_collection_description = NX_CHAR()
        self.nxp_entry.nxp_collection_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='collection_description',
                )
        self.nxp_entry.nxp_collection_description.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_collection_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Brief summary of the collection, including grouping criteria''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-field',
                )
        self.nxp_entry.nxp_collection_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_entry_identifier = NX_CHAR()
        self.nxp_entry.nxp_entry_identifier.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry_identifier',
                )
        self.nxp_entry.nxp_entry_identifier.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_entry_identifier.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                unique identifier for this measurement as provided by the facility''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-field',
                )
        self.nxp_entry.nxp_entry_identifier.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_start_time = NX_DATE_TIME()
        self.nxp_entry.nxp_start_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start_time',
                )
        self.nxp_entry.nxp_start_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_entry.nxp_start_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-field',
                )
        self.nxp_entry.nxp_start_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_end_time = NX_DATE_TIME()
        self.nxp_entry.nxp_end_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='end_time',
                )
        self.nxp_entry.nxp_end_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_entry.nxp_end_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-field',
                )
        self.nxp_entry.nxp_end_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_duration = NX_FLOAT()
        self.nxp_entry.nxp_duration.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='duration',
                )
        self.nxp_entry.nxp_duration.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_duration.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_entry.nxp_duration.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                TODO: needs documentation''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-field',
                )
        self.nxp_entry.nxp_duration.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_collection_time = NX_FLOAT()
        self.nxp_entry.nxp_collection_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='collection_time',
                )
        self.nxp_entry.nxp_collection_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_collection_time.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_entry.nxp_collection_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                TODO: needs documentation''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-field',
                )
        self.nxp_entry.nxp_collection_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_run_cycle = NX_CHAR()
        self.nxp_entry.nxp_run_cycle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='run_cycle',
                )
        self.nxp_entry.nxp_run_cycle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_run_cycle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                TODO: needs documentation''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-field',
                )
        self.nxp_entry.nxp_run_cycle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_revision = NX_CHAR()
        self.nxp_entry.nxp_revision.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='revision',
                )
        self.nxp_entry.nxp_revision.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_revision.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                revision ID of this file, may be after recalibration, reprocessing etc.''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-field',
                )
        self.nxp_entry.nxp_revision.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_definition = NX_CHAR()
        self.nxp_entry.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_entry.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-field',
                )
        self.nxp_entry.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXarchive',
                )


        self.nxp_entry.nxp_program = NX_CHAR()
        self.nxp_entry.nxp_program.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='program',
                )
        self.nxp_entry.nxp_program.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_program.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The program and version used for generating this file''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-field',
                )
        self.nxp_entry.nxp_program.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_program.nxp_version = NX_CHAR()
        self.nxp_entry.nxp_program.nxp_version.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='version',
                )
        self.nxp_entry.nxp_program.nxp_version.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-program-attribute',
                )
        self.nxp_entry.nxp_program.nxp_version.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_release_date = NX_CHAR()
        self.nxp_entry.nxp_release_date.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='release_date',
                )
        self.nxp_entry.nxp_release_date.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_release_date.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_entry.nxp_release_date.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                when this file is to be released into PD''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-field',
                )
        self.nxp_entry.nxp_release_date.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_user = NXuser()
        self.nxp_entry.nxp_user.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXuser',
                )
        self.nxp_entry.nxp_user.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='user',
                )
        self.nxp_entry.nxp_user.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-group',
                )
        self.nxp_entry.nxp_user.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_user.nxp_name = NX_CHAR()
        self.nxp_entry.nxp_user.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_user.nxp_name.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_user.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-user-field',
                )
        self.nxp_entry.nxp_user.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_user.nxp_role = NX_CHAR()
        self.nxp_entry.nxp_user.nxp_role.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='role',
                )
        self.nxp_entry.nxp_user.nxp_role.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_user.nxp_role.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                role of the user''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-user-field',
                )
        self.nxp_entry.nxp_user.nxp_role.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_user.nxp_facility_user_id = NX_CHAR()
        self.nxp_entry.nxp_user.nxp_facility_user_id.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='facility_user_id',
                )
        self.nxp_entry.nxp_user.nxp_facility_user_id.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_user.nxp_facility_user_id.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ID of the user in the facility burocracy database''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-user-field',
                )
        self.nxp_entry.nxp_user.nxp_facility_user_id.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_instrument = NXinstrument()
        self.nxp_entry.nxp_instrument.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_entry.nxp_instrument.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='instrument',
                )
        self.nxp_entry.nxp_instrument.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-group',
                )
        self.nxp_entry.nxp_instrument.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_name = NX_CHAR()
        self.nxp_entry.nxp_instrument.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_instrument.nxp_name.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_instrument.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-field',
                )
        self.nxp_entry.nxp_instrument.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_description = NX_CHAR()
        self.nxp_entry.nxp_instrument.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_entry.nxp_instrument.nxp_description.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_instrument.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Brief description of the instrument''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-field',
                )
        self.nxp_entry.nxp_instrument.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_SOURCE = NXsource()
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsource',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-group',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_type = NX_CHAR()
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_type.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-source-field',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_type.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_type.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='Spallation Neutron Source,Pulsed Reactor Neutron Source,Reactor Neutron Source,Synchrotron X-Ray Source,Pulsed Muon Source,Rotating Anode X-Ray,Fixed Tube X-Ray',
                )


        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_name = NX_CHAR()
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-source-field',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_probe = NX_CHAR()
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_probe.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='probe',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_probe.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-instrument-source-field',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_probe.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_probe.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='neutron,x-ray,electron',
                )




        self.nxp_entry.nxp_sample = NXsample()
        self.nxp_entry.nxp_sample.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_entry.nxp_sample.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample',
                )
        self.nxp_entry.nxp_sample.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-group',
                )
        self.nxp_entry.nxp_sample.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_sample.nxp_name = NX_CHAR()
        self.nxp_entry.nxp_sample.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_sample.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Descriptive name of sample''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_sample_id = NX_CHAR()
        self.nxp_entry.nxp_sample.nxp_sample_id.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample_id',
                )
        self.nxp_entry.nxp_sample.nxp_sample_id.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_sample.nxp_sample_id.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Unique database id of the sample''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_sample_id.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_description = NX_CHAR()
        self.nxp_entry.nxp_sample.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_entry.nxp_sample.nxp_description.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_sample.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_type = NX_CHAR()
        self.nxp_entry.nxp_sample.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_entry.nxp_sample.nxp_type.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_sample.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_type.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_sample.nxp_type.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample,sample+can,calibration sample,normalisation sample,simulated data,none,sample_environment',
                )


        self.nxp_entry.nxp_sample.nxp_chemical_formula = NX_CHAR()
        self.nxp_entry.nxp_sample.nxp_chemical_formula.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='chemical_formula',
                )
        self.nxp_entry.nxp_sample.nxp_chemical_formula.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_sample.nxp_chemical_formula.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Chemical formula formatted according to CIF conventions''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_chemical_formula.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_preparation_date = NX_CHAR()
        self.nxp_entry.nxp_sample.nxp_preparation_date.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='preparation_date',
                )
        self.nxp_entry.nxp_sample.nxp_preparation_date.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_sample.nxp_preparation_date.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_entry.nxp_sample.nxp_preparation_date.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_preparation_date.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_situation = NX_CHAR()
        self.nxp_entry.nxp_sample.nxp_situation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='situation',
                )
        self.nxp_entry.nxp_sample.nxp_situation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_sample.nxp_situation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Description of the environment the sample is in:                    air,
                vacuum, oxidizing atmosphere, dehydrated, etc.''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_situation.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_temperature = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_temperature.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='temperature',
                )
        self.nxp_entry.nxp_sample.nxp_temperature.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_temperature.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TEMPERATURE',
                )
        self.nxp_entry.nxp_sample.nxp_temperature.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_temperature.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_magnetic_field = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_magnetic_field.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='magnetic_field',
                )
        self.nxp_entry.nxp_sample.nxp_magnetic_field.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_magnetic_field.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CURRENT',
                )
        self.nxp_entry.nxp_sample.nxp_magnetic_field.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_magnetic_field.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_electric_field = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_electric_field.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='electric_field',
                )
        self.nxp_entry.nxp_sample.nxp_electric_field.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_electric_field.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_VOLTAGE',
                )
        self.nxp_entry.nxp_sample.nxp_electric_field.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_electric_field.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_stress_field = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_stress_field.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='stress_field',
                )
        self.nxp_entry.nxp_sample.nxp_stress_field.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_stress_field.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_entry.nxp_sample.nxp_stress_field.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_stress_field.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_pressure = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_pressure.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='pressure',
                )
        self.nxp_entry.nxp_sample.nxp_pressure.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_pressure.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_PRESSURE',
                )
        self.nxp_entry.nxp_sample.nxp_pressure.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXarchive.html#nxarchive-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_pressure.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )





class NXmonopd(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXmonopd',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    Monochromatic Neutron and X-Ray Powder diffractometer                   Instrument
        definition for a powder diffractometer at a monochromatic neutron          or
        X-ray beam. This is both suited for a powder diffractometer          with a single
        detector or a powder diffractometer with a position          sensitive detector.
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_entry = NXentry()
        self.nxp_entry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_entry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry',
                )
        self.nxp_entry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-group',
                )
        self.nxp_entry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_title = NX_CHAR()
        self.nxp_entry.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_entry.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-field',
                )
        self.nxp_entry.nxp_title.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_start_time = NX_DATE_TIME()
        self.nxp_entry.nxp_start_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start_time',
                )
        self.nxp_entry.nxp_start_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_entry.nxp_start_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-field',
                )
        self.nxp_entry.nxp_start_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_definition = NX_CHAR()
        self.nxp_entry.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_entry.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-field',
                )
        self.nxp_entry.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonopd',
                )


        self.nxp_entry.nxp_INSTRUMENT = NXinstrument()
        self.nxp_entry.nxp_INSTRUMENT.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-group',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE = NXsource()
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsource',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-group',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_type = NX_CHAR()
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-source-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_type.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_name = NX_CHAR()
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-source-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe = NX_CHAR()
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='probe',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-source-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='neutron,x-ray,electron',
                )



        self.nxp_entry.nxp_INSTRUMENT.nxp_CRYSTAL = NXcrystal()
        self.nxp_entry.nxp_INSTRUMENT.nxp_CRYSTAL.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcrystal',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_CRYSTAL.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-group',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_CRYSTAL.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_INSTRUMENT.nxp_CRYSTAL.nxp_wavelength = NX_FLOAT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_CRYSTAL.nxp_wavelength.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='wavelength',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_CRYSTAL.nxp_wavelength.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_CRYSTAL.nxp_wavelength.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVELENGTH',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_CRYSTAL.nxp_wavelength.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Optimum diffracted wavelength''',
                default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-crystal-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_CRYSTAL.nxp_wavelength.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR = NXdetector()
        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-group',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_polar_angle = NX_FLOAT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_polar_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='polar_angle',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_polar_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_polar_angle.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_polar_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_polar_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_data = NX_INT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_data.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                detector signal (usually counts) are already                     corrected
                for detector efficiency''',
                default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_DETECTOR.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_entry.nxp_SAMPLE = NXsample()
        self.nxp_entry.nxp_SAMPLE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-group',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_SAMPLE.nxp_name = NX_CHAR()
        self.nxp_entry.nxp_SAMPLE.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Descriptive name of sample''',
                default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-sample-field',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_SAMPLE.nxp_rotation_angle = NX_FLOAT()
        self.nxp_entry.nxp_SAMPLE.nxp_rotation_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='rotation_angle',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_rotation_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_rotation_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_rotation_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Optional rotation angle for the case when the powder diagram
                has been obtained through an omega-2theta scan like from a
                traditional single detector powder diffractometer''',
                default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-sample-field',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_rotation_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_MONITOR = NXmonitor()
        self.nxp_entry.nxp_MONITOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonitor',
                )
        self.nxp_entry.nxp_MONITOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-group',
                )
        self.nxp_entry.nxp_MONITOR.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_MONITOR.nxp_mode = NX_CHAR()
        self.nxp_entry.nxp_MONITOR.nxp_mode.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='mode',
                )
        self.nxp_entry.nxp_MONITOR.nxp_mode.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Count to a preset value based on either clock time (timer)
                or received monitor counts (monitor).''',
                default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-monitor-field',
                )
        self.nxp_entry.nxp_MONITOR.nxp_mode.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_MONITOR.nxp_mode.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='monitor,timer',
                )


        self.nxp_entry.nxp_MONITOR.nxp_preset = NX_FLOAT()
        self.nxp_entry.nxp_MONITOR.nxp_preset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='preset',
                )
        self.nxp_entry.nxp_MONITOR.nxp_preset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_MONITOR.nxp_preset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                preset value for time or monitor''',
                default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-monitor-field',
                )
        self.nxp_entry.nxp_MONITOR.nxp_preset.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_MONITOR.nxp_integral = NX_FLOAT()
        self.nxp_entry.nxp_MONITOR.nxp_integral.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='integral',
                )
        self.nxp_entry.nxp_MONITOR.nxp_integral.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_MONITOR.nxp_integral.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_entry.nxp_MONITOR.nxp_integral.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Total integral monitor counts''',
                default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-monitor-field',
                )
        self.nxp_entry.nxp_MONITOR.nxp_integral.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_DATA = NXdata()
        self.nxp_entry.nxp_DATA.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_entry.nxp_DATA.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXmonopd.html#nxmonopd-entry-group',
                )
        self.nxp_entry.nxp_DATA.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




class NXrefscan(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXrefscan',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    This is an application definition for a monochromatic scanning reflectometer.

        It does not have the information to calculate the resolution     since it does not
        have any apertures.
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_entry = NXentry()
        self.nxp_entry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_entry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry',
                )
        self.nxp_entry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-group',
                )
        self.nxp_entry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_title = NX_CHAR()
        self.nxp_entry.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_entry.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-field',
                )
        self.nxp_entry.nxp_title.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_start_time = NX_DATE_TIME()
        self.nxp_entry.nxp_start_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start_time',
                )
        self.nxp_entry.nxp_start_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_entry.nxp_start_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-field',
                )
        self.nxp_entry.nxp_start_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_end_time = NX_DATE_TIME()
        self.nxp_entry.nxp_end_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='end_time',
                )
        self.nxp_entry.nxp_end_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_entry.nxp_end_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-field',
                )
        self.nxp_entry.nxp_end_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_definition = NX_CHAR()
        self.nxp_entry.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_entry.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-field',
                )
        self.nxp_entry.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXrefscan',
                )


        self.nxp_entry.nxp_instrument = NXinstrument()
        self.nxp_entry.nxp_instrument.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_entry.nxp_instrument.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='instrument',
                )
        self.nxp_entry.nxp_instrument.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-group',
                )
        self.nxp_entry.nxp_instrument.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_SOURCE = NXsource()
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsource',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-group',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_type = NX_CHAR()
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-source-field',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_type.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_name = NX_CHAR()
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-source-field',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_probe = NX_CHAR()
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_probe.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='probe',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_probe.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-source-field',
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_probe.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_instrument.nxp_SOURCE.nxp_probe.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='neutron,x-ray,electron',
                )



        self.nxp_entry.nxp_instrument.nxp_monochromator = NXmonochromator()
        self.nxp_entry.nxp_instrument.nxp_monochromator.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonochromator',
                )
        self.nxp_entry.nxp_instrument.nxp_monochromator.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='monochromator',
                )
        self.nxp_entry.nxp_instrument.nxp_monochromator.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-group',
                )
        self.nxp_entry.nxp_instrument.nxp_monochromator.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_monochromator.nxp_wavelength = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_monochromator.nxp_wavelength.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='wavelength',
                )
        self.nxp_entry.nxp_instrument.nxp_monochromator.nxp_wavelength.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_monochromator.nxp_wavelength.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVELENGTH',
                )
        self.nxp_entry.nxp_instrument.nxp_monochromator.nxp_wavelength.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-monochromator-field',
                )
        self.nxp_entry.nxp_instrument.nxp_monochromator.nxp_wavelength.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_instrument.nxp_DETECTOR = NXdetector()
        self.nxp_entry.nxp_instrument.nxp_DETECTOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_entry.nxp_instrument.nxp_DETECTOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-group',
                )
        self.nxp_entry.nxp_instrument.nxp_DETECTOR.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_DETECTOR.nxp_data = NX_INT()
        self.nxp_entry.nxp_instrument.nxp_DETECTOR.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_instrument.nxp_DETECTOR.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_instrument.nxp_DETECTOR.nxp_data.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_instrument.nxp_DETECTOR.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_DETECTOR.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_DETECTOR.nxp_polar_angle = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_DETECTOR.nxp_polar_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='polar_angle',
                )
        self.nxp_entry.nxp_instrument.nxp_DETECTOR.nxp_polar_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_DETECTOR.nxp_polar_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_instrument.nxp_DETECTOR.nxp_polar_angle.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_instrument.nxp_DETECTOR.nxp_polar_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_DETECTOR.nxp_polar_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_entry.nxp_sample = NXsample()
        self.nxp_entry.nxp_sample.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_entry.nxp_sample.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample',
                )
        self.nxp_entry.nxp_sample.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-group',
                )
        self.nxp_entry.nxp_sample.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_sample.nxp_name = NX_CHAR()
        self.nxp_entry.nxp_sample.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_sample.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Descriptive name of sample''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_rotation_angle = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='rotation_angle',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_control = NXmonitor()
        self.nxp_entry.nxp_control.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonitor',
                )
        self.nxp_entry.nxp_control.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='control',
                )
        self.nxp_entry.nxp_control.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-group',
                )
        self.nxp_entry.nxp_control.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_control.nxp_mode = NX_CHAR()
        self.nxp_entry.nxp_control.nxp_mode.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='mode',
                )
        self.nxp_entry.nxp_control.nxp_mode.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Count to a preset value based on either clock time (timer)             or
                received monitor counts (monitor).''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-control-field',
                )
        self.nxp_entry.nxp_control.nxp_mode.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_control.nxp_mode.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='monitor,timer',
                )


        self.nxp_entry.nxp_control.nxp_preset = NX_FLOAT()
        self.nxp_entry.nxp_control.nxp_preset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='preset',
                )
        self.nxp_entry.nxp_control.nxp_preset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_control.nxp_preset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                preset value for time or monitor''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-control-field',
                )
        self.nxp_entry.nxp_control.nxp_preset.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_control.nxp_data = NX_FLOAT()
        self.nxp_entry.nxp_control.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_control.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_control.nxp_data.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_entry.nxp_control.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Monitor counts for each step''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-control-field',
                )
        self.nxp_entry.nxp_control.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_data = NXdata()
        self.nxp_entry.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_entry.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXrefscan.html#nxrefscan-entry-group',
                )
        self.nxp_entry.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




class NXtomoproc(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXtomoproc',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            This is an application definition for the final result of a tomography experiment:
        a 3D construction of some volume of physical properties.
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_entry = NXentry()
        self.nxp_entry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_entry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry',
                )
        self.nxp_entry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-group',
                )
        self.nxp_entry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_title = NX_CHAR()
        self.nxp_entry.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_entry.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-field',
                )
        self.nxp_entry.nxp_title.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_definition = NX_CHAR()
        self.nxp_entry.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_entry.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-field',
                )
        self.nxp_entry.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXtomoproc',
                )


        self.nxp_entry.nxp_INSTRUMENT = NXinstrument()
        self.nxp_entry.nxp_INSTRUMENT.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-group',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE = NXsource()
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsource',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-instrument-group',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_type = NX_CHAR()
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-instrument-source-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_type.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_name = NX_CHAR()
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-instrument-source-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe = NX_CHAR()
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='probe',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-instrument-source-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='neutron,x-ray,electron',
                )




        self.nxp_entry.nxp_SAMPLE = NXsample()
        self.nxp_entry.nxp_SAMPLE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-group',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_SAMPLE.nxp_name = NX_CHAR()
        self.nxp_entry.nxp_SAMPLE.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Descriptive name of sample''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-sample-field',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_reconstruction = NXprocess()
        self.nxp_entry.nxp_reconstruction.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXprocess',
                )
        self.nxp_entry.nxp_reconstruction.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='reconstruction',
                )
        self.nxp_entry.nxp_reconstruction.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-group',
                )
        self.nxp_entry.nxp_reconstruction.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_reconstruction.nxp_program = NX_CHAR()
        self.nxp_entry.nxp_reconstruction.nxp_program.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='program',
                )
        self.nxp_entry.nxp_reconstruction.nxp_program.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_reconstruction.nxp_program.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Name of the program used for reconstruction''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-reconstruction-field',
                )
        self.nxp_entry.nxp_reconstruction.nxp_program.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_reconstruction.nxp_version = NX_CHAR()
        self.nxp_entry.nxp_reconstruction.nxp_version.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='version',
                )
        self.nxp_entry.nxp_reconstruction.nxp_version.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_reconstruction.nxp_version.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Version of the program used''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-reconstruction-field',
                )
        self.nxp_entry.nxp_reconstruction.nxp_version.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_reconstruction.nxp_date = NX_DATE_TIME()
        self.nxp_entry.nxp_reconstruction.nxp_date.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='date',
                )
        self.nxp_entry.nxp_reconstruction.nxp_date.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_entry.nxp_reconstruction.nxp_date.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Date and time of reconstruction processing.''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-reconstruction-field',
                )
        self.nxp_entry.nxp_reconstruction.nxp_date.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_reconstruction.nxp_parameters = NXparameters()
        self.nxp_entry.nxp_reconstruction.nxp_parameters.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXparameters',
                )
        self.nxp_entry.nxp_reconstruction.nxp_parameters.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='parameters',
                )
        self.nxp_entry.nxp_reconstruction.nxp_parameters.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-reconstruction-group',
                )
        self.nxp_entry.nxp_reconstruction.nxp_parameters.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_reconstruction.nxp_parameters.nxp_raw_file = NX_CHAR()
        self.nxp_entry.nxp_reconstruction.nxp_parameters.nxp_raw_file.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='raw_file',
                )
        self.nxp_entry.nxp_reconstruction.nxp_parameters.nxp_raw_file.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_reconstruction.nxp_parameters.nxp_raw_file.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Original raw data file this data was derived from''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-reconstruction-parameters-field',
                )
        self.nxp_entry.nxp_reconstruction.nxp_parameters.nxp_raw_file.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_entry.nxp_data = NXdata()
        self.nxp_entry.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_entry.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-group',
                )
        self.nxp_entry.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_data.nxp_data = NX_INT()
        self.nxp_entry.nxp_data.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_data.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_data.nxp_data.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_data.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is the reconstructed volume. This can be different
                things. Please indicate in the unit attribute what physical
                quantity this really is.''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-field',
                )
        self.nxp_entry.nxp_data.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_data.nxp_data.nxp_transform = NX_CHAR()
        self.nxp_entry.nxp_data.nxp_data.nxp_transform.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='transform',
                )
        self.nxp_entry.nxp_data.nxp_data.nxp_transform.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-data-attribute',
                )
        self.nxp_entry.nxp_data.nxp_data.nxp_transform.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_data.nxp_data.nxp_offset = NX_CHAR()
        self.nxp_entry.nxp_data.nxp_data.nxp_offset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='offset',
                )
        self.nxp_entry.nxp_data.nxp_data.nxp_offset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-data-attribute',
                )
        self.nxp_entry.nxp_data.nxp_data.nxp_offset.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_data.nxp_data.nxp_scaling = NX_CHAR()
        self.nxp_entry.nxp_data.nxp_data.nxp_scaling.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='scaling',
                )
        self.nxp_entry.nxp_data.nxp_data.nxp_scaling.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-data-attribute',
                )
        self.nxp_entry.nxp_data.nxp_data.nxp_scaling.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_data.nxp_x = NX_FLOAT()
        self.nxp_entry.nxp_data.nxp_x.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x',
                )
        self.nxp_entry.nxp_data.nxp_x.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_data.nxp_x.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_entry.nxp_data.nxp_x.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_data.nxp_x.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is an array holding the values to use for the x-axis of
                data. The units must be appropriate for the measurement.''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-field',
                )
        self.nxp_entry.nxp_data.nxp_x.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_data.nxp_y = NX_FLOAT()
        self.nxp_entry.nxp_data.nxp_y.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='y',
                )
        self.nxp_entry.nxp_data.nxp_y.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_data.nxp_y.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_entry.nxp_data.nxp_y.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='2',
                )
        self.nxp_entry.nxp_data.nxp_y.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is an array holding the values to use for the y-axis of
                data. The units must be appropriate for the measurement.''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-field',
                )
        self.nxp_entry.nxp_data.nxp_y.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_data.nxp_z = NX_FLOAT()
        self.nxp_entry.nxp_data.nxp_z.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='z',
                )
        self.nxp_entry.nxp_data.nxp_z.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_data.nxp_z.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_entry.nxp_data.nxp_z.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='3',
                )
        self.nxp_entry.nxp_data.nxp_z.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is an array holding the values to use for the z-axis of
                data. The units must be appropriate for the measurement.''',
                default='https://manual.nexusformat.org/classes/applications/NXtomoproc.html#nxtomoproc-entry-data-field',
                )
        self.nxp_entry.nxp_data.nxp_z.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )





class NXdirecttof(NXtofraw):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXdirecttof',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXtofraw',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            This is a application definition for raw data from a direct geometry TOF
        spectrometer
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_entry = NXentry()
        self.nxp_entry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_entry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry',
                )
        self.nxp_entry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-group',
                )
        self.nxp_entry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_title = NX_CHAR()
        self.nxp_entry.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_entry.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-field',
                )
        self.nxp_entry.nxp_title.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_start_time = NX_DATE_TIME()
        self.nxp_entry.nxp_start_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start_time',
                )
        self.nxp_entry.nxp_start_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_entry.nxp_start_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-field',
                )
        self.nxp_entry.nxp_start_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_definition = NX_CHAR()
        self.nxp_entry.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_entry.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-field',
                )
        self.nxp_entry.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdirecttof',
                )


        self.nxp_entry.nxp_INSTRUMENT = NXinstrument()
        self.nxp_entry.nxp_INSTRUMENT.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                We definitly want the rotation_speed and energy of the chopper. Thus
                either            a fermi_chopper or a disk_chopper group is required.''',
                default='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-group',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_INSTRUMENT.nxp_fermi_chopper = NXfermi_chopper()
        self.nxp_entry.nxp_INSTRUMENT.nxp_fermi_chopper.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXfermi_chopper',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_fermi_chopper.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='fermi_chopper',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_fermi_chopper.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_fermi_chopper.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-group',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_fermi_chopper.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_INSTRUMENT.nxp_fermi_chopper.nxp_rotation_speed = NX_FLOAT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_fermi_chopper.nxp_rotation_speed.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='rotation_speed',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_fermi_chopper.nxp_rotation_speed.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_fermi_chopper.nxp_rotation_speed.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FREQUENCY',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_fermi_chopper.nxp_rotation_speed.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                chopper rotation speed''',
                default='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-fermi-chopper-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_fermi_chopper.nxp_rotation_speed.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_INSTRUMENT.nxp_fermi_chopper.nxp_energy = NX_FLOAT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_fermi_chopper.nxp_energy.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='energy',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_fermi_chopper.nxp_energy.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_fermi_chopper.nxp_energy.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ENERGY',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_fermi_chopper.nxp_energy.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                energy selected''',
                default='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-fermi-chopper-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_fermi_chopper.nxp_energy.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_INSTRUMENT.nxp_disk_chopper = NXdisk_chopper()
        self.nxp_entry.nxp_INSTRUMENT.nxp_disk_chopper.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdisk_chopper',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_disk_chopper.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='disk_chopper',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_disk_chopper.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_disk_chopper.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-group',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_disk_chopper.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_INSTRUMENT.nxp_disk_chopper.nxp_rotation_speed = NX_FLOAT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_disk_chopper.nxp_rotation_speed.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='rotation_speed',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_disk_chopper.nxp_rotation_speed.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_disk_chopper.nxp_rotation_speed.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FREQUENCY',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_disk_chopper.nxp_rotation_speed.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                chopper rotation speed''',
                default='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-disk-chopper-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_disk_chopper.nxp_rotation_speed.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_INSTRUMENT.nxp_disk_chopper.nxp_energy = NX_FLOAT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_disk_chopper.nxp_energy.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='energy',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_disk_chopper.nxp_energy.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_disk_chopper.nxp_energy.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ENERGY',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_disk_chopper.nxp_energy.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                energy selected''',
                default='https://manual.nexusformat.org/classes/applications/NXdirecttof.html#nxdirecttof-entry-instrument-disk-chopper-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_disk_chopper.nxp_energy.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )






class NXtofnpd(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXtofnpd',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            This is a application definition for raw data from a TOF neutron powder
        diffractometer
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_entry = NXentry()
        self.nxp_entry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_entry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry',
                )
        self.nxp_entry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-group',
                )
        self.nxp_entry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_title = NX_CHAR()
        self.nxp_entry.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_entry.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-field',
                )
        self.nxp_entry.nxp_title.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_start_time = NX_DATE_TIME()
        self.nxp_entry.nxp_start_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start_time',
                )
        self.nxp_entry.nxp_start_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_entry.nxp_start_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-field',
                )
        self.nxp_entry.nxp_start_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_definition = NX_CHAR()
        self.nxp_entry.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_entry.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-field',
                )
        self.nxp_entry.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXtofnpd',
                )


        self.nxp_entry.nxp_pre_sample_flightpath = NX_FLOAT()
        self.nxp_entry.nxp_pre_sample_flightpath.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='pre_sample_flightpath',
                )
        self.nxp_entry.nxp_pre_sample_flightpath.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_pre_sample_flightpath.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_pre_sample_flightpath.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is the flight path before the sample position. This can be determined
                by a chopper,         by the moderator or the source itself. In other
                words: it the distance to the component         which gives the T0 signal
                to the detector electronics. If another component in the
                NXinstrument hierarchy provides this information, this should be a link.''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-field',
                )
        self.nxp_entry.nxp_pre_sample_flightpath.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_user = NXuser()
        self.nxp_entry.nxp_user.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXuser',
                )
        self.nxp_entry.nxp_user.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='user',
                )
        self.nxp_entry.nxp_user.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-group',
                )
        self.nxp_entry.nxp_user.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_user.nxp_name = NX_CHAR()
        self.nxp_entry.nxp_user.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_user.nxp_name.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_user.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-user-field',
                )
        self.nxp_entry.nxp_user.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_INSTRUMENT = NXinstrument()
        self.nxp_entry.nxp_INSTRUMENT.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-group',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_INSTRUMENT.nxp_detector = NXdetector()
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='detector',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-group',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_data = NX_INT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_data.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_detector_number = NX_INT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_detector_number.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='detector_number',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_detector_number.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_detector_number.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='2',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_detector_number.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_detector_number.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_distance = NX_FLOAT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                distance to sample for each detector''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_time_of_flight = NX_FLOAT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_time_of_flight.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='time_of_flight',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_time_of_flight.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_time_of_flight.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME_OF_FLIGHT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_time_of_flight.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_time_of_flight.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_time_of_flight.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_polar_angle = NX_FLOAT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_polar_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='polar_angle',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_polar_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_polar_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_polar_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                polar angle for each detector element''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_polar_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_azimuthal_angle = NX_FLOAT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_azimuthal_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='azimuthal_angle',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_azimuthal_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_azimuthal_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_azimuthal_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                azimuthal angle for each detector element''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_azimuthal_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_entry.nxp_SAMPLE = NXsample()
        self.nxp_entry.nxp_SAMPLE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-group',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_SAMPLE.nxp_name = NX_CHAR()
        self.nxp_entry.nxp_SAMPLE.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Descriptive name of sample''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-sample-field',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_MONITOR = NXmonitor()
        self.nxp_entry.nxp_MONITOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonitor',
                )
        self.nxp_entry.nxp_MONITOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-group',
                )
        self.nxp_entry.nxp_MONITOR.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_MONITOR.nxp_mode = NX_CHAR()
        self.nxp_entry.nxp_MONITOR.nxp_mode.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='mode',
                )
        self.nxp_entry.nxp_MONITOR.nxp_mode.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Count to a preset value based on either clock time (timer)             or
                received monitor counts (monitor).''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-monitor-field',
                )
        self.nxp_entry.nxp_MONITOR.nxp_mode.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_MONITOR.nxp_mode.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='monitor,timer',
                )


        self.nxp_entry.nxp_MONITOR.nxp_preset = NX_FLOAT()
        self.nxp_entry.nxp_MONITOR.nxp_preset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='preset',
                )
        self.nxp_entry.nxp_MONITOR.nxp_preset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_MONITOR.nxp_preset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                preset value for time or monitor''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-monitor-field',
                )
        self.nxp_entry.nxp_MONITOR.nxp_preset.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_MONITOR.nxp_distance = NX_FLOAT()
        self.nxp_entry.nxp_MONITOR.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_entry.nxp_MONITOR.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_MONITOR.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_MONITOR.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-monitor-field',
                )
        self.nxp_entry.nxp_MONITOR.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_MONITOR.nxp_data = NX_INT()
        self.nxp_entry.nxp_MONITOR.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_MONITOR.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_MONITOR.nxp_data.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_MONITOR.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-monitor-field',
                )
        self.nxp_entry.nxp_MONITOR.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_MONITOR.nxp_time_of_flight = NX_FLOAT()
        self.nxp_entry.nxp_MONITOR.nxp_time_of_flight.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='time_of_flight',
                )
        self.nxp_entry.nxp_MONITOR.nxp_time_of_flight.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_MONITOR.nxp_time_of_flight.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME_OF_FLIGHT',
                )
        self.nxp_entry.nxp_MONITOR.nxp_time_of_flight.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_MONITOR.nxp_time_of_flight.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-monitor-field',
                )
        self.nxp_entry.nxp_MONITOR.nxp_time_of_flight.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_data = NXdata()
        self.nxp_entry.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_entry.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofnpd.html#nxtofnpd-entry-group',
                )
        self.nxp_entry.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




class NXfluo(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXfluo',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    This is an application definition for raw data from an X-ray fluorescence
        experiment
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_entry = NXentry()
        self.nxp_entry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_entry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry',
                )
        self.nxp_entry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-group',
                )
        self.nxp_entry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_title = NX_CHAR()
        self.nxp_entry.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_entry.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-field',
                )
        self.nxp_entry.nxp_title.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_start_time = NX_DATE_TIME()
        self.nxp_entry.nxp_start_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start_time',
                )
        self.nxp_entry.nxp_start_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_entry.nxp_start_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-field',
                )
        self.nxp_entry.nxp_start_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_definition = NX_CHAR()
        self.nxp_entry.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_entry.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Official NeXus NXDL schema to which this file conforms.''',
                default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-field',
                )
        self.nxp_entry.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXfluo',
                )


        self.nxp_entry.nxp_INSTRUMENT = NXinstrument()
        self.nxp_entry.nxp_INSTRUMENT.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-group',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE = NXsource()
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsource',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-group',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_type = NX_CHAR()
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-source-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_type.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_name = NX_CHAR()
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-source-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe = NX_CHAR()
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='probe',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-source-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x-ray',
                )



        self.nxp_entry.nxp_INSTRUMENT.nxp_monochromator = NXmonochromator()
        self.nxp_entry.nxp_INSTRUMENT.nxp_monochromator.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonochromator',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_monochromator.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='monochromator',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_monochromator.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-group',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_monochromator.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_INSTRUMENT.nxp_monochromator.nxp_wavelength = NX_FLOAT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_monochromator.nxp_wavelength.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='wavelength',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_monochromator.nxp_wavelength.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_monochromator.nxp_wavelength.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-monochromator-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_monochromator.nxp_wavelength.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_INSTRUMENT.nxp_fluorescence = NXdetector()
        self.nxp_entry.nxp_INSTRUMENT.nxp_fluorescence.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_fluorescence.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='fluorescence',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_fluorescence.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-group',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_fluorescence.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_INSTRUMENT.nxp_fluorescence.nxp_data = NX_INT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_fluorescence.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_fluorescence.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_fluorescence.nxp_data.nxp_axes= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='energy',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_fluorescence.nxp_data.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_fluorescence.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-fluorescence-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_fluorescence.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_INSTRUMENT.nxp_fluorescence.nxp_energy = NX_FLOAT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_fluorescence.nxp_energy.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='energy',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_fluorescence.nxp_energy.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_fluorescence.nxp_energy.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-instrument-fluorescence-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_fluorescence.nxp_energy.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_entry.nxp_SAMPLE = NXsample()
        self.nxp_entry.nxp_SAMPLE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-group',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_SAMPLE.nxp_name = NX_CHAR()
        self.nxp_entry.nxp_SAMPLE.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Descriptive name of sample''',
                default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-sample-field',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_MONITOR = NXmonitor()
        self.nxp_entry.nxp_MONITOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonitor',
                )
        self.nxp_entry.nxp_MONITOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-group',
                )
        self.nxp_entry.nxp_MONITOR.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_MONITOR.nxp_mode = NX_CHAR()
        self.nxp_entry.nxp_MONITOR.nxp_mode.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='mode',
                )
        self.nxp_entry.nxp_MONITOR.nxp_mode.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Count to a preset value based on either clock time (timer)             or
                received monitor counts (monitor).''',
                default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-monitor-field',
                )
        self.nxp_entry.nxp_MONITOR.nxp_mode.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_MONITOR.nxp_mode.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='monitor,timer',
                )


        self.nxp_entry.nxp_MONITOR.nxp_preset = NX_FLOAT()
        self.nxp_entry.nxp_MONITOR.nxp_preset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='preset',
                )
        self.nxp_entry.nxp_MONITOR.nxp_preset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_MONITOR.nxp_preset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                preset value for time or monitor''',
                default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-monitor-field',
                )
        self.nxp_entry.nxp_MONITOR.nxp_preset.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_MONITOR.nxp_data = NX_INT()
        self.nxp_entry.nxp_MONITOR.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_MONITOR.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_MONITOR.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-monitor-field',
                )
        self.nxp_entry.nxp_MONITOR.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_data = NXdata()
        self.nxp_entry.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_entry.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXfluo.html#nxfluo-entry-group',
                )
        self.nxp_entry.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




class NXxrot(NXxbase):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXxrot',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXxbase',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    raw data from a rotation camera, extends :ref:`NXxbase`           This is the
        application definition for raw data from a rotation camera.     It extends
        :ref:`NXxbase`, so the full definition is the content of :ref:`NXxbase`     plus
        the data defined here.
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_entry = NXentry()
        self.nxp_entry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_entry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry',
                )
        self.nxp_entry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-group',
                )
        self.nxp_entry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_definition = NX_CHAR()
        self.nxp_entry.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_entry.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms.''',
                default='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-field',
                )
        self.nxp_entry.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXxrot',
                )


        self.nxp_entry.nxp_instrument = NXinstrument()
        self.nxp_entry.nxp_instrument.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_entry.nxp_instrument.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='instrument',
                )
        self.nxp_entry.nxp_instrument.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-group',
                )
        self.nxp_entry.nxp_instrument.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_detector = NXdetector()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='detector',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-group',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='polar_angle',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The polar_angle (two theta) where the detector is placed.''',
                default='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_detector.nxp_beam_center_x = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_beam_center_x.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='beam_center_x',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_beam_center_x.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_beam_center_x.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_beam_center_x.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is the x position where the direct beam would hit the detector. This
                is a               length, not a pixel position, and can be outside of the
                actual detector.''',
                default='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_beam_center_x.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_detector.nxp_beam_center_y = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_beam_center_y.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='beam_center_y',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_beam_center_y.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_beam_center_y.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_beam_center_y.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is the y position where the direct beam would hit the detector. This
                is a                 length, not a pixel position, and can be outside of
                the actual detector.''',
                default='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_beam_center_y.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_instrument.nxp_attenuator = NXattenuator()
        self.nxp_entry.nxp_instrument.nxp_attenuator.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXattenuator',
                )
        self.nxp_entry.nxp_instrument.nxp_attenuator.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='attenuator',
                )
        self.nxp_entry.nxp_instrument.nxp_attenuator.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-group',
                )
        self.nxp_entry.nxp_instrument.nxp_attenuator.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_attenuator.nxp_attenuator_transmission = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_attenuator.nxp_attenuator_transmission.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='attenuator_transmission',
                )
        self.nxp_entry.nxp_instrument.nxp_attenuator.nxp_attenuator_transmission.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_attenuator.nxp_attenuator_transmission.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_entry.nxp_instrument.nxp_attenuator.nxp_attenuator_transmission.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-instrument-attenuator-field',
                )
        self.nxp_entry.nxp_instrument.nxp_attenuator.nxp_attenuator_transmission.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_entry.nxp_sample = NXsample()
        self.nxp_entry.nxp_sample.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_entry.nxp_sample.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample',
                )
        self.nxp_entry.nxp_sample.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-group',
                )
        self.nxp_entry.nxp_sample.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_sample.nxp_rotation_angle = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='rotation_angle',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                This is an array holding the sample rotation start angle at each  scan
                point''',
                default='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_rotation_angle_step = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_rotation_angle_step.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='rotation_angle_step',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle_step.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle_step.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle_step.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle_step.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                This is an array holding the step made for sample rotation angle at each
                scan point''',
                default='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle_step.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_name = NXdata()
        self.nxp_entry.nxp_name.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_entry.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxrot.html#nxxrot-entry-group',
                )
        self.nxp_entry.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




class NXsastof(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXsastof',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    raw, 2-D SAS data with an area detector with a time-of-flight source          It
        covers all raw data from any SAS techniques     that use an area detector     at a
        time-of-flight source.
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_ENTRY = NXentry()
        self.nxp_ENTRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_ENTRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-group',
                )
        self.nxp_ENTRY.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_entry = NX_CHAR()
        self.nxp_ENTRY.nxp_entry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry',
                )
        self.nxp_ENTRY.nxp_entry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                NeXus convention is to use "entry1", "entry2", ... for analysis software
                to locate each entry''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-attribute',
                )
        self.nxp_ENTRY.nxp_entry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_title = NX_CHAR()
        self.nxp_ENTRY.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_ENTRY.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-field',
                )
        self.nxp_ENTRY.nxp_title.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_start_time = NX_DATE_TIME()
        self.nxp_ENTRY.nxp_start_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start_time',
                )
        self.nxp_ENTRY.nxp_start_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_ENTRY.nxp_start_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-field',
                )
        self.nxp_ENTRY.nxp_start_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_definition = NX_CHAR()
        self.nxp_ENTRY.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_ENTRY.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-field',
                )
        self.nxp_ENTRY.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsastof',
                )


        self.nxp_ENTRY.nxp_instrument = NXinstrument()
        self.nxp_ENTRY.nxp_instrument.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='instrument',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_name.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Name of the instrument actually used to perform the experiment''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_source = NXsource()
        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsource',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='source',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_type = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                type of radiation source''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-source-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_type.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Name of the radiation source''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-source-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_probe = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_probe.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='probe',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_probe.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-source-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_probe.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_instrument.nxp_source.nxp_probe.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='neutron,x-ray',
                )



        self.nxp_ENTRY.nxp_instrument.nxp_collimator = NXcollimator()
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcollimator',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='collimator',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry = NXgeometry()
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgeometry',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='geometry',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-collimator-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape = NXshape()
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXshape',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='shape',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-collimator-geometry-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_shape = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_shape.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='shape',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_shape.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_shape.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-collimator-geometry-shape-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_shape.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_shape.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='nxcylinder,nxbox',
                )


        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_size = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='size',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The collimation length''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-collimator-geometry-shape-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_collimator.nxp_geometry.nxp_shape.nxp_size.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )





        self.nxp_ENTRY.nxp_instrument.nxp_detector = NXdetector()
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='detector',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_data = NX_NUMBER()
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_data.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is area detector data, of number of x-pixel versus             number
                of y-pixels. Since the beam center is to be             determined as a
                step of data reduction, it is not necessary             to document or
                assume the position of the beam center in             acquired data.''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_time_of_flight = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_time_of_flight.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='time_of_flight',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_time_of_flight.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME_OF_FLIGHT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_time_of_flight.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_time_of_flight.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_time_of_flight.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_distance = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                The distance between detector and sample''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_x_pixel_size = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x_pixel_size',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Physical size of a pixel in x-direction''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_y_pixel_size = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='y_pixel_size',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Size of a pixel in y direction''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_polar_angle = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='polar_angle',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_azimuthal_angle = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_azimuthal_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='azimuthal_angle',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_azimuthal_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_azimuthal_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_azimuthal_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_azimuthal_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_rotation_angle = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_rotation_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='rotation_angle',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_rotation_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_rotation_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_rotation_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_rotation_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_aequatorial_angle = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_aequatorial_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='aequatorial_angle',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_aequatorial_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_aequatorial_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_aequatorial_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_aequatorial_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_beam_center_x = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_beam_center_x.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='beam_center_x',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_beam_center_x.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_beam_center_x.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_beam_center_x.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is the x position where the direct beam would hit the detector. This
                is a                        length, not a pixel position, and can be
                outside of the actual detector.''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_beam_center_x.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_beam_center_y = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_beam_center_y.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='beam_center_y',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_beam_center_y.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_beam_center_y.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_beam_center_y.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is the y position where the direct beam would hit the detector. This
                is a                          length, not a pixel position, and can be
                outside of the actual detector.''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_detector.nxp_beam_center_y.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_ENTRY.nxp_sample = NXsample()
        self.nxp_ENTRY.nxp_sample.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_ENTRY.nxp_sample.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample',
                )
        self.nxp_ENTRY.nxp_sample.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-group',
                )
        self.nxp_ENTRY.nxp_sample.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_sample.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_sample.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_sample.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Descriptive name of sample''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_sample.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_sample.nxp_aequatorial_angle = NX_FLOAT()
        self.nxp_ENTRY.nxp_sample.nxp_aequatorial_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='aequatorial_angle',
                )
        self.nxp_ENTRY.nxp_sample.nxp_aequatorial_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_sample.nxp_aequatorial_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_ENTRY.nxp_sample.nxp_aequatorial_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_sample.nxp_aequatorial_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_control = NXmonitor()
        self.nxp_ENTRY.nxp_control.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonitor',
                )
        self.nxp_ENTRY.nxp_control.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='control',
                )
        self.nxp_ENTRY.nxp_control.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-group',
                )
        self.nxp_ENTRY.nxp_control.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_control.nxp_mode = NX_CHAR()
        self.nxp_ENTRY.nxp_control.nxp_mode.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='mode',
                )
        self.nxp_ENTRY.nxp_control.nxp_mode.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Count to a preset value based on either clock time (timer) or received
                monitor counts (monitor).''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-control-field',
                )
        self.nxp_ENTRY.nxp_control.nxp_mode.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_control.nxp_mode.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='monitor,timer',
                )


        self.nxp_ENTRY.nxp_control.nxp_preset = NX_FLOAT()
        self.nxp_ENTRY.nxp_control.nxp_preset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='preset',
                )
        self.nxp_ENTRY.nxp_control.nxp_preset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_control.nxp_preset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                preset value for time or monitor''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-control-field',
                )
        self.nxp_ENTRY.nxp_control.nxp_preset.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_control.nxp_data = NX_INT()
        self.nxp_ENTRY.nxp_control.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_control.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_ENTRY.nxp_control.nxp_data.nxp_primary= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_control.nxp_data.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_control.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-control-field',
                )
        self.nxp_ENTRY.nxp_control.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_control.nxp_time_of_flight = NX_FLOAT()
        self.nxp_ENTRY.nxp_control.nxp_time_of_flight.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='time_of_flight',
                )
        self.nxp_ENTRY.nxp_control.nxp_time_of_flight.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME_OF_FLIGHT',
                )
        self.nxp_ENTRY.nxp_control.nxp_time_of_flight.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_control.nxp_time_of_flight.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-control-field',
                )
        self.nxp_ENTRY.nxp_control.nxp_time_of_flight.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_data = NXdata()
        self.nxp_ENTRY.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_ENTRY.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXsastof.html#nxsastof-entry-group',
                )
        self.nxp_ENTRY.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




class NXscan(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXscan',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    Application definition for a generic scan instrument.           This definition is
        more an      example then a stringent definition as the content of a given NeXus
        scan file needs to      differ for different types of scans. This example
        definition shows a scan like done      on a rotation camera: the sample is rotated
        and a detector image, the rotation angle     and a monitor value is stored at each
        step in the scan. In the following, the symbol      ``NP`` is used to represent
        the number of scan points. These are the rules for      storing scan data in NeXus
        files which are implemented in this example:          * Each value varied
        throughout a scan is stored as an array of        length ``NP`` at its respective
        location within the NeXus hierarchy.     * For area detectors, ``NP`` is the first
        dimension,        example for a detector of 256x256:  ``data[NP,256,256]``     *
        The NXdata group contains links to all variables varied in the scan and the data.
        This to give an equivalent to the more familiar classical tabular representation
        of scans.           These rules exist for a reason: HDF allows the first dimension
        of a data set to be      unlimited. This means the data can be appended too. Thus
        a NeXus file built according      to the rules given above can be used in the
        following way:          * At the start of a scan, write all the static
        information.     * At each scan point, append new data from varied variables
        and the detector to the file.
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_ENTRY = NXentry()
        self.nxp_ENTRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_ENTRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-group',
                )
        self.nxp_ENTRY.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_title = NX_CHAR()
        self.nxp_ENTRY.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_ENTRY.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-field',
                )
        self.nxp_ENTRY.nxp_title.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_start_time = NX_DATE_TIME()
        self.nxp_ENTRY.nxp_start_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start_time',
                )
        self.nxp_ENTRY.nxp_start_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_ENTRY.nxp_start_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-field',
                )
        self.nxp_ENTRY.nxp_start_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_end_time = NX_DATE_TIME()
        self.nxp_ENTRY.nxp_end_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='end_time',
                )
        self.nxp_ENTRY.nxp_end_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_ENTRY.nxp_end_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-field',
                )
        self.nxp_ENTRY.nxp_end_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_definition = NX_CHAR()
        self.nxp_ENTRY.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_ENTRY.nxp_definition.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-field',
                )
        self.nxp_ENTRY.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXscan',
                )


        self.nxp_ENTRY.nxp_INSTRUMENT = NXinstrument()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR = NXdetector()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_data = NX_INT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_data.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_ENTRY.nxp_SAMPLE = NXsample()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-group',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_SAMPLE.nxp_rotation_angle = NX_FLOAT()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_rotation_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='rotation_angle',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_rotation_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_rotation_angle.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_rotation_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_rotation_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_MONITOR = NXmonitor()
        self.nxp_ENTRY.nxp_MONITOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonitor',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-group',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_MONITOR.nxp_data = NX_INT()
        self.nxp_ENTRY.nxp_MONITOR.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-monitor-field',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_DATA = NXdata()
        self.nxp_ENTRY.nxp_DATA.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXscan.html#nxscan-entry-group',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




class NXreftof(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXreftof',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            This is an application definition for raw data from a TOF reflectometer.
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_entry = NXentry()
        self.nxp_entry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_entry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry',
                )
        self.nxp_entry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-group',
                )
        self.nxp_entry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_title = NX_CHAR()
        self.nxp_entry.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_entry.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-field',
                )
        self.nxp_entry.nxp_title.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_start_time = NX_DATE_TIME()
        self.nxp_entry.nxp_start_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start_time',
                )
        self.nxp_entry.nxp_start_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_entry.nxp_start_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-field',
                )
        self.nxp_entry.nxp_start_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_end_time = NX_DATE_TIME()
        self.nxp_entry.nxp_end_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='end_time',
                )
        self.nxp_entry.nxp_end_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_entry.nxp_end_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-field',
                )
        self.nxp_entry.nxp_end_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_definition = NX_CHAR()
        self.nxp_entry.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_entry.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-field',
                )
        self.nxp_entry.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXreftof',
                )


        self.nxp_entry.nxp_instrument = NXinstrument()
        self.nxp_entry.nxp_instrument.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_entry.nxp_instrument.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='instrument',
                )
        self.nxp_entry.nxp_instrument.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-group',
                )
        self.nxp_entry.nxp_instrument.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_name = NX_CHAR()
        self.nxp_entry.nxp_instrument.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_instrument.nxp_name.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_instrument.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-field',
                )
        self.nxp_entry.nxp_instrument.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_chopper = NXdisk_chopper()
        self.nxp_entry.nxp_instrument.nxp_chopper.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdisk_chopper',
                )
        self.nxp_entry.nxp_instrument.nxp_chopper.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='chopper',
                )
        self.nxp_entry.nxp_instrument.nxp_chopper.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-group',
                )
        self.nxp_entry.nxp_instrument.nxp_chopper.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_chopper.nxp_distance = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_chopper.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_entry.nxp_instrument.nxp_chopper.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_chopper.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_instrument.nxp_chopper.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Distance between chopper and sample''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-chopper-field',
                )
        self.nxp_entry.nxp_instrument.nxp_chopper.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_instrument.nxp_detector = NXdetector()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='detector',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-group',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data = NX_INT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_detector.nxp_time_of_flight = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_time_of_flight.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='time_of_flight',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_time_of_flight.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_time_of_flight.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME_OF_FLIGHT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_time_of_flight.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='3',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_time_of_flight.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Array of time values for each bin in a time-of-flight
                measurement''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_time_of_flight.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='polar_angle',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_polar_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_pixel_size = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x_pixel_size',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_x_pixel_size.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_pixel_size = NX_FLOAT()
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='y_pixel_size',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_instrument.nxp_detector.nxp_y_pixel_size.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_entry.nxp_sample = NXsample()
        self.nxp_entry.nxp_sample.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_entry.nxp_sample.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample',
                )
        self.nxp_entry.nxp_sample.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-group',
                )
        self.nxp_entry.nxp_sample.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_sample.nxp_name = NX_CHAR()
        self.nxp_entry.nxp_sample.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_sample.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Descriptive name of sample''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_sample.nxp_rotation_angle = NX_FLOAT()
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='rotation_angle',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-sample-field',
                )
        self.nxp_entry.nxp_sample.nxp_rotation_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_control = NXmonitor()
        self.nxp_entry.nxp_control.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonitor',
                )
        self.nxp_entry.nxp_control.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='control',
                )
        self.nxp_entry.nxp_control.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-group',
                )
        self.nxp_entry.nxp_control.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_control.nxp_mode = NX_CHAR()
        self.nxp_entry.nxp_control.nxp_mode.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='mode',
                )
        self.nxp_entry.nxp_control.nxp_mode.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Count to a preset value based on either clock time (timer)             or
                received monitor counts (monitor).''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-control-field',
                )
        self.nxp_entry.nxp_control.nxp_mode.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_control.nxp_mode.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='monitor,timer',
                )


        self.nxp_entry.nxp_control.nxp_preset = NX_FLOAT()
        self.nxp_entry.nxp_control.nxp_preset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='preset',
                )
        self.nxp_entry.nxp_control.nxp_preset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_control.nxp_preset.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANY',
                )
        self.nxp_entry.nxp_control.nxp_preset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                preset value for time or monitor''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-control-field',
                )
        self.nxp_entry.nxp_control.nxp_preset.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_control.nxp_integral = NX_INT()
        self.nxp_entry.nxp_control.nxp_integral.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='integral',
                )
        self.nxp_entry.nxp_control.nxp_integral.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_control.nxp_integral.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Total integral monitor counts''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-control-field',
                )
        self.nxp_entry.nxp_control.nxp_integral.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_control.nxp_time_of_flight = NX_FLOAT()
        self.nxp_entry.nxp_control.nxp_time_of_flight.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='time_of_flight',
                )
        self.nxp_entry.nxp_control.nxp_time_of_flight.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_control.nxp_time_of_flight.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME_OF_FLIGHT',
                )
        self.nxp_entry.nxp_control.nxp_time_of_flight.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_control.nxp_time_of_flight.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Time channels''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-control-field',
                )
        self.nxp_entry.nxp_control.nxp_time_of_flight.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_control.nxp_data = NX_INT()
        self.nxp_entry.nxp_control.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_control.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_control.nxp_data.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_control.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Monitor counts in each time channel''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-control-field',
                )
        self.nxp_entry.nxp_control.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_data = NXdata()
        self.nxp_entry.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_entry.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXreftof.html#nxreftof-entry-group',
                )
        self.nxp_entry.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




class NXxlaue(NXxrot):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXxlaue',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXxrot',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    raw data from a single crystal laue camera, extends :ref:`NXxrot`          This is
        the application definition for raw data from a single crystal laue      camera. It
        extends :ref:`NXxrot`.
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_entry = NXentry()
        self.nxp_entry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_entry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry',
                )
        self.nxp_entry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-group',
                )
        self.nxp_entry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_definition = NX_CHAR()
        self.nxp_entry.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_entry.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-field',
                )
        self.nxp_entry.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXxlaue',
                )


        self.nxp_entry.nxp_instrument = NXinstrument()
        self.nxp_entry.nxp_instrument.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_entry.nxp_instrument.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='instrument',
                )
        self.nxp_entry.nxp_instrument.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-group',
                )
        self.nxp_entry.nxp_instrument.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_source = NXsource()
        self.nxp_entry.nxp_instrument.nxp_source.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsource',
                )
        self.nxp_entry.nxp_instrument.nxp_source.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='source',
                )
        self.nxp_entry.nxp_instrument.nxp_source.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-instrument-group',
                )
        self.nxp_entry.nxp_instrument.nxp_source.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_source.nxp_distribution = NXdata()
        self.nxp_entry.nxp_instrument.nxp_source.nxp_distribution.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_entry.nxp_instrument.nxp_source.nxp_distribution.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distribution',
                )
        self.nxp_entry.nxp_instrument.nxp_source.nxp_distribution.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is the wavelength distribution of the beam''',
                default='https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-instrument-source-group',
                )
        self.nxp_entry.nxp_instrument.nxp_source.nxp_distribution.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_instrument.nxp_source.nxp_distribution.nxp_data = NX_CHAR()
        self.nxp_entry.nxp_instrument.nxp_source.nxp_distribution.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_instrument.nxp_source.nxp_distribution.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                expect  ``signal=1 axes="energy"``''',
                default='https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-instrument-source-distribution-field',
                )
        self.nxp_entry.nxp_instrument.nxp_source.nxp_distribution.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_instrument.nxp_source.nxp_distribution.nxp_wavelength = NX_CHAR()
        self.nxp_entry.nxp_instrument.nxp_source.nxp_distribution.nxp_wavelength.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='wavelength',
                )
        self.nxp_entry.nxp_instrument.nxp_source.nxp_distribution.nxp_wavelength.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVELENGTH',
                )
        self.nxp_entry.nxp_instrument.nxp_source.nxp_distribution.nxp_wavelength.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXxlaue.html#nxxlaue-entry-instrument-source-distribution-field',
                )
        self.nxp_entry.nxp_instrument.nxp_source.nxp_distribution.nxp_wavelength.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )







class NXindirecttof(NXtofraw):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXindirecttof',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXtofraw',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            This is a application definition for raw data from a direct geometry TOF
        spectrometer
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_entry = NXentry()
        self.nxp_entry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_entry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry',
                )
        self.nxp_entry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-group',
                )
        self.nxp_entry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_title = NX_CHAR()
        self.nxp_entry.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_entry.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-field',
                )
        self.nxp_entry.nxp_title.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_start_time = NX_DATE_TIME()
        self.nxp_entry.nxp_start_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start_time',
                )
        self.nxp_entry.nxp_start_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_entry.nxp_start_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-field',
                )
        self.nxp_entry.nxp_start_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_definition = NX_CHAR()
        self.nxp_entry.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_entry.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-field',
                )
        self.nxp_entry.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXindirecttof',
                )


        self.nxp_entry.nxp_INSTRUMENT = NXinstrument()
        self.nxp_entry.nxp_INSTRUMENT.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-group',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser = NXmonochromator()
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonochromator',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='analyser',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-instrument-group',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_energy = NX_FLOAT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_energy.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='energy',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_energy.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_energy.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ENERGY',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_energy.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                analyzed energy''',
                default='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-instrument-analyser-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_energy.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_polar_angle = NX_FLOAT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_polar_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='polar_angle',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_polar_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_polar_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_polar_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                polar angle towards sample''',
                default='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-instrument-analyser-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_polar_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_distance = NX_FLOAT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                distance from sample''',
                default='https://manual.nexusformat.org/classes/applications/NXindirecttof.html#nxindirecttof-entry-instrument-analyser-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_analyser.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )






class NXstxm(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXstxm',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    Application definition for a STXM instrument.                       The
        interferometer           position measurements, monochromator photon energy values
        and           detector measurements are all treated as NXdetectors and stored
        within the NXinstrument group as lists of values stored in
        chronological order. The NXdata group then holds another version           of the
        data in a regular 3D array (NumE by NumY by NumX, for a           total of nP
        points in a sample image stack type scan). The former           data values should
        be stored with a minimum loss of precision, while           the latter values can
        be simplified and/or approximated in order to           fit the constraints of a
        regular 3D array. 'Line scans' and 'point spectra'           are just sample_image
        scan types with reduced dimensions in the same way            as single images
        have reduced E dimensions compared to image 'stacks'.
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_ENTRY = NXentry()
        self.nxp_ENTRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_ENTRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-group',
                )
        self.nxp_ENTRY.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_title = NX_CHAR()
        self.nxp_ENTRY.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_ENTRY.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-field',
                )
        self.nxp_ENTRY.nxp_title.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_start_time = NX_DATE_TIME()
        self.nxp_ENTRY.nxp_start_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start_time',
                )
        self.nxp_ENTRY.nxp_start_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_ENTRY.nxp_start_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-field',
                )
        self.nxp_ENTRY.nxp_start_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_end_time = NX_DATE_TIME()
        self.nxp_ENTRY.nxp_end_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='end_time',
                )
        self.nxp_ENTRY.nxp_end_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_ENTRY.nxp_end_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-field',
                )
        self.nxp_ENTRY.nxp_end_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_definition = NX_CHAR()
        self.nxp_ENTRY.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_ENTRY.nxp_definition.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_ENTRY.nxp_definition.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_definition.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-field',
                )
        self.nxp_ENTRY.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXstxm',
                )


        self.nxp_ENTRY.nxp_INSTRUMENT = NXinstrument()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE = NXsource()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsource',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_type = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_type.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_type.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-source-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_type.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_name.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_name.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-source-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe = NX_CHAR()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='probe',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-source-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_SOURCE.nxp_probe.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator = NXmonochromator()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonochromator',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='monochromator',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_energy = NX_FLOAT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_energy.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='energy',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_energy.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_energy.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_energy.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_energy.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-monochromator-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_monochromator.nxp_energy.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR = NXdetector()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_data = NX_NUMBER()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_DETECTOR.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_x = NXdetector()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_x.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_x.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample_x',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_x.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_x.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_x.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Measurements of the sample position from the x-axis interferometer.''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_x.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_x.nxp_data = NX_FLOAT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_x.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_x.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_x.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-sample-x-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_x.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_y = NXdetector()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_y.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_y.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample_y',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_y.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_y.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_y.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Measurements of the sample position from the y-axis interferometer.''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_y.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_y.nxp_data = NX_FLOAT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_y.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_y.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_y.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-sample-y-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_y.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_z = NXdetector()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_z.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_z.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample_z',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_z.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_z.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_z.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Measurements of the sample position from the z-axis interferometer.''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_z.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_z.nxp_data = NX_FLOAT()
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_z.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_z.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_z.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-instrument-sample-z-field',
                )
        self.nxp_ENTRY.nxp_INSTRUMENT.nxp_sample_z.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_ENTRY.nxp_SAMPLE = NXsample()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-group',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_SAMPLE.nxp_rotation_angle = NX_FLOAT()
        self.nxp_ENTRY.nxp_SAMPLE.nxp_rotation_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='rotation_angle',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_rotation_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_rotation_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_SAMPLE.nxp_rotation_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_DATA = NXdata()
        self.nxp_ENTRY.nxp_DATA.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-group',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_DATA.nxp_stxm_scan_type = NX_CHAR()
        self.nxp_ENTRY.nxp_DATA.nxp_stxm_scan_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='stxm_scan_type',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_stxm_scan_type.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_stxm_scan_type.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_stxm_scan_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Label for typical scan types as a convenience for humans.
                Each label corresponds to a specific set of axes being scanned
                to produce a data array of shape:                                  *
                sample point spectrum: (photon_energy,)                 * sample line
                spectrum: (photon_energy, sample_y/sample_x)                 * sample
                image: (sample_y, sample_x)                 * sample image stack:
                (photon_energy, sample_y, sample_x)                 * sample focus:
                (zoneplate_z, sample_y/sample_x)                 * osa image: (osa_y,
                osa_x)                 * osa focus: (zoneplate_z, osa_y/osa_x)
                * detector image: (detector_y, detector_x)
                The "generic scan" string is to be used when none of the
                other choices are appropriate.''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-data-field',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_stxm_scan_type.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_DATA.nxp_stxm_scan_type.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample point spectrum,sample line spectrum,sample image,sample image stack,sample focus,osa image,osa focus,detector image,generic scan',
                )


        self.nxp_ENTRY.nxp_DATA.nxp_data = NX_NUMBER()
        self.nxp_ENTRY.nxp_DATA.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_data.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Detectors that provide more than one value per scan point should be
                summarised               to a single value per scan point for this array
                in order to simplify plotting.                              Note that
                'Line scans' and focus type scans measure along one spatial dimension
                but are not restricted to being parallel to the X or Y axes. Such scans
                should therefore use a single dimension for the positions along the
                spatial               line. The 'sample_x' and 'sample_y' fields should
                then contain lists of the               x- and y-positions and should both
                have the 'axis' attribute pointing to the same dimension.''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-data-field',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DATA.nxp_energy = NX_FLOAT()
        self.nxp_ENTRY.nxp_DATA.nxp_energy.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='energy',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_energy.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_energy.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_energy.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_energy.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                List of photon energies of the X-ray beam. If scanned through multiple
                values,               then an 'axis' attribute will be required to link
                the field to the appropriate data array dimension.''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-data-field',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_energy.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DATA.nxp_sample_y = NX_FLOAT()
        self.nxp_ENTRY.nxp_DATA.nxp_sample_y.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample_y',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_sample_y.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_sample_y.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_sample_y.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_sample_y.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                List of Y positions on the sample. If scanned through multiple values,
                then an 'axis' attribute will be required to link the field to the
                appropriate data array dimension.''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-data-field',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_sample_y.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DATA.nxp_sample_x = NX_FLOAT()
        self.nxp_ENTRY.nxp_DATA.nxp_sample_x.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample_x',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_sample_x.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_sample_x.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_sample_x.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_sample_x.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                List of X positions on the sample. If scanned through multiple values,
                then an 'axis' attribute will be required to link the field to the
                appropriate data array dimension.''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-data-field',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_sample_x.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_control = NXmonitor()
        self.nxp_ENTRY.nxp_control.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonitor',
                )
        self.nxp_ENTRY.nxp_control.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='control',
                )
        self.nxp_ENTRY.nxp_control.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_control.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_control.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-group',
                )
        self.nxp_ENTRY.nxp_control.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_control.nxp_data = NX_FLOAT()
        self.nxp_ENTRY.nxp_control.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_control.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_control.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Values to use to normalise for time-variations in photon flux. Typically,
                the synchrotron storage ring               electron beam current is used
                as a proxy for the X-ray beam intensity. Array must have same shape as the
                NXdata groups.''',
                default='https://manual.nexusformat.org/classes/applications/NXstxm.html#nxstxm-entry-control-field',
                )
        self.nxp_ENTRY.nxp_control.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )





class NXtofsingle(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXtofsingle',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='application',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            This is a application definition for raw data from a generic TOF instrument
            ''',
            default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_entry = NXentry()
        self.nxp_entry.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_entry.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry',
                )
        self.nxp_entry.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-group',
                )
        self.nxp_entry.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_title = NX_CHAR()
        self.nxp_entry.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_entry.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-field',
                )
        self.nxp_entry.nxp_title.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_start_time = NX_DATE_TIME()
        self.nxp_entry.nxp_start_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start_time',
                )
        self.nxp_entry.nxp_start_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_entry.nxp_start_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-field',
                )
        self.nxp_entry.nxp_start_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_definition = NX_CHAR()
        self.nxp_entry.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_entry.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-field',
                )
        self.nxp_entry.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXtofsingle',
                )


        self.nxp_entry.nxp_duration = NX_FLOAT()
        self.nxp_entry.nxp_duration.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='duration',
                )
        self.nxp_entry.nxp_duration.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_duration.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-field',
                )
        self.nxp_entry.nxp_duration.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_pre_sample_flightpath = NX_FLOAT()
        self.nxp_entry.nxp_pre_sample_flightpath.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='pre_sample_flightpath',
                )
        self.nxp_entry.nxp_pre_sample_flightpath.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_pre_sample_flightpath.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_pre_sample_flightpath.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is the flight path before the sample position. This can be determined
                by a chopper,         by the moderator or the source itself. In other
                words: it the distance to the component         which gives the T0 signal
                to the detector electronics. If another component in the
                NXinstrument hierarchy provides this information, this should be a link.''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-field',
                )
        self.nxp_entry.nxp_pre_sample_flightpath.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_user = NXuser()
        self.nxp_entry.nxp_user.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXuser',
                )
        self.nxp_entry.nxp_user.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='user',
                )
        self.nxp_entry.nxp_user.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-group',
                )
        self.nxp_entry.nxp_user.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_user.nxp_name = NX_CHAR()
        self.nxp_entry.nxp_user.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_user.nxp_name.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_user.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-user-field',
                )
        self.nxp_entry.nxp_user.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_INSTRUMENT = NXinstrument()
        self.nxp_entry.nxp_INSTRUMENT.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-group',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_INSTRUMENT.nxp_detector = NXdetector()
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='detector',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-group',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_data = NX_INT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_data.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_distance = NX_FLOAT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Distance to sample for the center of the detector''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_time_of_flight = NX_FLOAT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_time_of_flight.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='time_of_flight',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_time_of_flight.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_time_of_flight.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME_OF_FLIGHT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_time_of_flight.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_time_of_flight.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_time_of_flight.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_polar_angle = NX_FLOAT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_polar_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='polar_angle',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_polar_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_polar_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_polar_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                polar angle for each detector element''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_polar_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_azimuthal_angle = NX_FLOAT()
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_azimuthal_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='azimuthal_angle',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_azimuthal_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_azimuthal_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_azimuthal_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                azimuthal angle for each detector element''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-instrument-detector-field',
                )
        self.nxp_entry.nxp_INSTRUMENT.nxp_detector.nxp_azimuthal_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_entry.nxp_SAMPLE = NXsample()
        self.nxp_entry.nxp_SAMPLE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-group',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_SAMPLE.nxp_name = NX_CHAR()
        self.nxp_entry.nxp_SAMPLE.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Descriptive name of sample''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-sample-field',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_SAMPLE.nxp_nature = NX_CHAR()
        self.nxp_entry.nxp_SAMPLE.nxp_nature.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='nature',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_nature.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_nature.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-sample-field',
                )
        self.nxp_entry.nxp_SAMPLE.nxp_nature.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_SAMPLE.nxp_nature.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='powder,liquid,single crystal',
                )



        self.nxp_entry.nxp_MONITOR = NXmonitor()
        self.nxp_entry.nxp_MONITOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonitor',
                )
        self.nxp_entry.nxp_MONITOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-group',
                )
        self.nxp_entry.nxp_MONITOR.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry.nxp_MONITOR.nxp_mode = NX_CHAR()
        self.nxp_entry.nxp_MONITOR.nxp_mode.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='mode',
                )
        self.nxp_entry.nxp_MONITOR.nxp_mode.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Count to a preset value based on either clock time (timer)             or
                received monitor counts (monitor).''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-monitor-field',
                )
        self.nxp_entry.nxp_MONITOR.nxp_mode.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry.nxp_MONITOR.nxp_mode.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='monitor,timer',
                )


        self.nxp_entry.nxp_MONITOR.nxp_preset = NX_FLOAT()
        self.nxp_entry.nxp_MONITOR.nxp_preset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='preset',
                )
        self.nxp_entry.nxp_MONITOR.nxp_preset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_MONITOR.nxp_preset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                preset value for time or monitor''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-monitor-field',
                )
        self.nxp_entry.nxp_MONITOR.nxp_preset.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_MONITOR.nxp_distance = NX_FLOAT()
        self.nxp_entry.nxp_MONITOR.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_entry.nxp_MONITOR.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_MONITOR.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry.nxp_MONITOR.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-monitor-field',
                )
        self.nxp_entry.nxp_MONITOR.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_MONITOR.nxp_data = NX_INT()
        self.nxp_entry.nxp_MONITOR.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_MONITOR.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry.nxp_MONITOR.nxp_data.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_MONITOR.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-monitor-field',
                )
        self.nxp_entry.nxp_MONITOR.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry.nxp_MONITOR.nxp_time_of_flight = NX_FLOAT()
        self.nxp_entry.nxp_MONITOR.nxp_time_of_flight.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='time_of_flight',
                )
        self.nxp_entry.nxp_MONITOR.nxp_time_of_flight.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry.nxp_MONITOR.nxp_time_of_flight.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME_OF_FLIGHT',
                )
        self.nxp_entry.nxp_MONITOR.nxp_time_of_flight.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry.nxp_MONITOR.nxp_time_of_flight.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-monitor-field',
                )
        self.nxp_entry.nxp_MONITOR.nxp_time_of_flight.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry.nxp_data = NXdata()
        self.nxp_entry.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_entry.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/applications/NXtofsingle.html#nxtofsingle-entry-group',
                )
        self.nxp_entry.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




class NXcxi_ptycho(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXcxi_ptycho',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='contributed',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    Application definition for a ptychography experiment, compatible with CXI from
        version 1.6.

        This is compatible with CXI from version 1.6 if this application definition
        is put at the top "entry" level. Above this a "cxi_version" field should be
        defined. The CXI format is name based, rather than class based, and so it is
        important                 to pay attention to the naming convention to be CXI
        compatible. There are duplications due to the format merger. These should be
        achieved by linking,                  with hdf5 Virtual Dataset being used to
        restructure any data that needs to be remapped. To be fully CXI compatible, all
        units (including energy) must be in SI units.

        An example here is that CXI expects the data to always to have shape
        (npts_x*npts_y, frame_size_x, frame_size_y). For nexus this is only true for
        arbitrary scan paths                 with raster format scans taking shape
        (npts_x, npts_y, frame_size_x, frame_size_y).
            ''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_entry_1 = NXentry()
        self.nxp_entry_1.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_entry_1.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry_1',
                )
        self.nxp_entry_1.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-group',
                )
        self.nxp_entry_1.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry_1.nxp_title = NX_CHAR()
        self.nxp_entry_1.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_entry_1.nxp_title.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_entry_1.nxp_title.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-field',
                )
        self.nxp_entry_1.nxp_title.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry_1.nxp_start_time = NX_DATE_TIME()
        self.nxp_entry_1.nxp_start_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start_time',
                )
        self.nxp_entry_1.nxp_start_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_entry_1.nxp_start_time.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_entry_1.nxp_start_time.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_start_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-field',
                )
        self.nxp_entry_1.nxp_start_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry_1.nxp_end_time = NX_DATE_TIME()
        self.nxp_entry_1.nxp_end_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='end_time',
                )
        self.nxp_entry_1.nxp_end_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_entry_1.nxp_end_time.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_entry_1.nxp_end_time.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_end_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-field',
                )
        self.nxp_entry_1.nxp_end_time.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry_1.nxp_definition = NX_CHAR()
        self.nxp_entry_1.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_entry_1.nxp_definition.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry_1.nxp_definition.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_definition.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Official NeXus NXDL schema to which this file conforms''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-field',
                )
        self.nxp_entry_1.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_entry_1.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcxi_ptycho',
                )


        self.nxp_entry_1.nxp_instrument_1 = NXinstrument()
        self.nxp_entry_1.nxp_instrument_1.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='instrument_1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-group',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry_1.nxp_instrument_1.nxp_source_1 = NXsource()
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsource',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='source_1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-group',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_name = NX_CHAR()
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_name.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_name.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_name.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-source-1-field',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_energy = NX_FLOAT()
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_energy.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='energy',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_energy.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_energy.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_energy.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_energy.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is the energy of the machine, not the beamline.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-source-1-field',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_energy.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_probe = NX_FLOAT()
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_probe.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='probe',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_probe.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_probe.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_probe.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_probe.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-source-1-field',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_probe.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_type = NX_FLOAT()
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_type.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_type.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_type.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-source-1-field',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_source_1.nxp_type.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1 = NXbeam()
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXbeam',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='beam_1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-group',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_energy = NX_FLOAT()
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_energy.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='energy',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_energy.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_energy.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_energy.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_energy.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-field',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_energy.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_energy.nxp_units = NX_CHAR()
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_energy.nxp_units.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='units',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_energy.nxp_units.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_energy.nxp_units.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='false',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_energy.nxp_units.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-energy-attribute',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_energy.nxp_units.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_extent = NX_FLOAT()
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_extent.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='extent',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_extent.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_extent.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_extent.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_extent.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-field',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_extent.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_extent.nxp_units = NX_CHAR()
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_extent.nxp_units.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='units',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_extent.nxp_units.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_extent.nxp_units.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='false',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_extent.nxp_units.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-extent-attribute',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_extent.nxp_units.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_beam_divergence = NX_FLOAT()
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_beam_divergence.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='incident_beam_divergence',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_beam_divergence.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_beam_divergence.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_beam_divergence.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_beam_divergence.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-field',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_beam_divergence.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_beam_divergence.nxp_units = NX_CHAR()
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_beam_divergence.nxp_units.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='units',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_beam_divergence.nxp_units.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_beam_divergence.nxp_units.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='false',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_beam_divergence.nxp_units.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-incident-beam-divergence-attribute',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_beam_divergence.nxp_units.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_beam_energy = NX_FLOAT()
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_beam_energy.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='incident_beam_energy',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_beam_energy.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_beam_energy.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_beam_energy.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_beam_energy.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-field',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_beam_energy.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_beam_energy.nxp_units = NX_CHAR()
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_beam_energy.nxp_units.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='units',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_beam_energy.nxp_units.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_beam_energy.nxp_units.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='false',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_beam_energy.nxp_units.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-incident-beam-energy-attribute',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_beam_energy.nxp_units.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_energy_spread = NX_FLOAT()
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_energy_spread.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='incident_energy_spread',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_energy_spread.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_energy_spread.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_energy_spread.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_energy_spread.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-field',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_energy_spread.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_energy_spread.nxp_units = NX_CHAR()
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_energy_spread.nxp_units.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='units',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_energy_spread.nxp_units.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_energy_spread.nxp_units.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='false',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_energy_spread.nxp_units.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-beam-1-incident-energy-spread-attribute',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_beam_1.nxp_incident_energy_spread.nxp_units.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1 = NXdetector()
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='detector_1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-group',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_axes = NX_CHAR()
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_axes.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='axes',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_axes.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_axes.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                should have value "[, data]"''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-attribute',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_axes.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_signal = NX_CHAR()
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_signal.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='signal',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_signal.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_signal.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                should have value "data"''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-attribute',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_signal.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_translation = NX_FLOAT()
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_translation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='translation',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_translation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_translation.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_translation.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_translation.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_translation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This is an array of shape (npts_x*npts_y, 3) and can be a Virtual Dataset
                of x and y''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-field',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_translation.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_translation.nxp_units = NX_CHAR()
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_translation.nxp_units.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='units',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_translation.nxp_units.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_translation.nxp_units.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='false',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_translation.nxp_units.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-translation-attribute',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_translation.nxp_units.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_translation.nxp_axes = NX_CHAR()
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_translation.nxp_axes.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='axes',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_translation.nxp_axes.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='false',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_translation.nxp_axes.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_translation.nxp_axes.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                this should take the value "translation:$slowaxisname:$fastaxisname"''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-translation-attribute',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_translation.nxp_axes.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_translation.nxp_interpretation = NX_CHAR()
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_translation.nxp_interpretation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='interpretation',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_translation.nxp_interpretation.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='false',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_translation.nxp_interpretation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_translation.nxp_interpretation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This should be "image"''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-translation-attribute',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_translation.nxp_interpretation.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_data = NX_INT()
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_data.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_data.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_data.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-field',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_x_pixel_size = NX_FLOAT()
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_x_pixel_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x_pixel_size',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_x_pixel_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_x_pixel_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_x_pixel_size.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_x_pixel_size.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_x_pixel_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-field',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_x_pixel_size.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_x_pixel_size.nxp_units = NX_CHAR()
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_x_pixel_size.nxp_units.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='units',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_x_pixel_size.nxp_units.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_x_pixel_size.nxp_units.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='false',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_x_pixel_size.nxp_units.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-x-pixel-size-attribute',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_x_pixel_size.nxp_units.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_y_pixel_size = NX_FLOAT()
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_y_pixel_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='y_pixel_size',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_y_pixel_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_y_pixel_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_y_pixel_size.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_y_pixel_size.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_y_pixel_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-field',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_y_pixel_size.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_y_pixel_size.nxp_units = NX_CHAR()
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_y_pixel_size.nxp_units.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='units',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_y_pixel_size.nxp_units.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_y_pixel_size.nxp_units.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='false',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_y_pixel_size.nxp_units.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-y-pixel-size-attribute',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_y_pixel_size.nxp_units.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_distance = NX_FLOAT()
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_distance.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_distance.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                The distance between the detector and the sample''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-field',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_distance.nxp_units = NX_CHAR()
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_distance.nxp_units.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='units',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_distance.nxp_units.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_distance.nxp_units.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='false',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_distance.nxp_units.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-distance-attribute',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_distance.nxp_units.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_beam_center_x = NX_FLOAT()
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_beam_center_x.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='beam_center_x',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_beam_center_x.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_beam_center_x.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_beam_center_x.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_beam_center_x.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_beam_center_x.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-field',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_beam_center_x.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_beam_center_x.nxp_units = NX_CHAR()
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_beam_center_x.nxp_units.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='units',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_beam_center_x.nxp_units.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_beam_center_x.nxp_units.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='false',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_beam_center_x.nxp_units.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-beam-center-x-attribute',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_beam_center_x.nxp_units.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_beam_center_y = NX_FLOAT()
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_beam_center_y.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='beam_center_y',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_beam_center_y.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_beam_center_y.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_beam_center_y.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_beam_center_y.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_beam_center_y.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-field',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_beam_center_y.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_beam_center_y.nxp_units = NX_CHAR()
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_beam_center_y.nxp_units.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='units',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_beam_center_y.nxp_units.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_beam_center_y.nxp_units.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='false',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_beam_center_y.nxp_units.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-beam-center-y-attribute',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_beam_center_y.nxp_units.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_transformations = NXtransformations()
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_transformations.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXtransformations',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_transformations.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='transformations',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_transformations.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-group',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_transformations.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_transformations.nxp_vector = NX_NUMBER()
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_transformations.nxp_vector.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='vector',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_transformations.nxp_vector.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_transformations.nxp_vector.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_transformations.nxp_vector.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_transformations.nxp_vector.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-detector-1-transformations-field',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_detector_1.nxp_transformations.nxp_vector.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_entry_1.nxp_instrument_1.nxp_MONITOR = NXmonitor()
        self.nxp_entry_1.nxp_instrument_1.nxp_MONITOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonitor',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_MONITOR.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_MONITOR.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_MONITOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-group',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_MONITOR.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_entry_1.nxp_instrument_1.nxp_MONITOR.nxp_data = NX_FLOAT()
        self.nxp_entry_1.nxp_instrument_1.nxp_MONITOR.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_MONITOR.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_MONITOR.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-entry-1-instrument-1-monitor-field',
                )
        self.nxp_entry_1.nxp_instrument_1.nxp_MONITOR.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )





        self.nxp_DATA = NXdata()
        self.nxp_DATA.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_DATA.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_DATA.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_DATA.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-group',
                )
        self.nxp_DATA.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_DATA.nxp_axes = NX_CHAR()
        self.nxp_DATA.nxp_axes.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='axes',
                )
        self.nxp_DATA.nxp_axes.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_DATA.nxp_axes.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='false',
                )
        self.nxp_DATA.nxp_axes.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This should be "[x,.]" for arbitrary scanning patterns, and "[x,.,.]" for
                raster''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-data-attribute',
                )
        self.nxp_DATA.nxp_axes.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_DATA.nxp_signal = NX_CHAR()
        self.nxp_DATA.nxp_signal.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='signal',
                )
        self.nxp_DATA.nxp_signal.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_DATA.nxp_signal.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='false',
                )
        self.nxp_DATA.nxp_signal.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This should be "data"''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-data-attribute',
                )
        self.nxp_DATA.nxp_signal.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_DATA.nxp_x_indices = NX_CHAR()
        self.nxp_DATA.nxp_x_indices.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x_indices',
                )
        self.nxp_DATA.nxp_x_indices.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_DATA.nxp_x_indices.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-data-field',
                )
        self.nxp_DATA.nxp_x_indices.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_DATA.nxp_y_indices = NX_CHAR()
        self.nxp_DATA.nxp_y_indices.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='y_indices',
                )
        self.nxp_DATA.nxp_y_indices.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_DATA.nxp_y_indices.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-data-field',
                )
        self.nxp_DATA.nxp_y_indices.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_data_1 = NXcollection()
        self.nxp_data_1.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcollection',
                )
        self.nxp_data_1.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data_1',
                )
        self.nxp_data_1.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_data_1.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_data_1.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                To ensure CXI compatibility the data in this group must always have shape
                that is                                 (npts_x*npts_y, frame_size_x,
                frame_size_y). For nexus-style raster scans it is proposed that
                hdf5 virtual dataset is used.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-group',
                )
        self.nxp_data_1.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_sample_1 = NXsample()
        self.nxp_sample_1.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_sample_1.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample_1',
                )
        self.nxp_sample_1.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_sample_1.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_sample_1.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-group',
                )
        self.nxp_sample_1.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_sample_1.nxp_name = NX_CHAR()
        self.nxp_sample_1.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_sample_1.nxp_name.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHAR',
                )
        self.nxp_sample_1.nxp_name.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_sample_1.nxp_name.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_sample_1.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-sample-1-field',
                )
        self.nxp_sample_1.nxp_name.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_sample_1.nxp_transformations = NXtransformations()
        self.nxp_sample_1.nxp_transformations.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='transformations',
                )
        self.nxp_sample_1.nxp_transformations.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXtransformations',
                )
        self.nxp_sample_1.nxp_transformations.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                This must contain two fields with the x and y motors that are linked via
                the                                          dependency tree according to
                the real-life motor layout dependency.
                For raster scans x and y will have shape (npts_x, npts_y)
                For arbitrary scans x and y will be (npts_x*npts_y,)
                An attribute with the units for each motor is required.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-sample-1-field',
                )
        self.nxp_sample_1.nxp_transformations.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_sample_1.nxp_transformations.nxp_vector = NX_NUMBER()
        self.nxp_sample_1.nxp_transformations.nxp_vector.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='vector',
                )
        self.nxp_sample_1.nxp_transformations.nxp_vector.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='false',
                )
        self.nxp_sample_1.nxp_transformations.nxp_vector.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_sample_1.nxp_transformations.nxp_vector.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-sample-1-transformations-attribute',
                )
        self.nxp_sample_1.nxp_transformations.nxp_vector.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_sample_1.nxp_geometry_1 = NXcollection()
        self.nxp_sample_1.nxp_geometry_1.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcollection',
                )
        self.nxp_sample_1.nxp_geometry_1.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='geometry_1',
                )
        self.nxp_sample_1.nxp_geometry_1.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_sample_1.nxp_geometry_1.nxp_maxOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_sample_1.nxp_geometry_1.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXcxi_ptycho.html#nxcxi-ptycho-sample-1-group',
                )
        self.nxp_sample_1.nxp_geometry_1.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




class NXsnshisto(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXsnshisto',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='contributed',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            This is a definition for histogram data from Spallation Neutron Source (SNS) at
        ORNL.
            ''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_ENTRY = NXentry()
        self.nxp_ENTRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_ENTRY.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-group',
                )
        self.nxp_ENTRY.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_collection_identifier = NX_CHAR()
        self.nxp_ENTRY.nxp_collection_identifier.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='collection_identifier',
                )
        self.nxp_ENTRY.nxp_collection_identifier.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-field',
                )
        self.nxp_ENTRY.nxp_collection_identifier.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_collection_title = NX_CHAR()
        self.nxp_ENTRY.nxp_collection_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='collection_title',
                )
        self.nxp_ENTRY.nxp_collection_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-field',
                )
        self.nxp_ENTRY.nxp_collection_title.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_definition = NX_CHAR()
        self.nxp_ENTRY.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_ENTRY.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Official NXDL schema after this file goes to applications.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-field',
                )
        self.nxp_ENTRY.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsnshisto',
                )


        self.nxp_ENTRY.nxp_duration = NX_FLOAT()
        self.nxp_ENTRY.nxp_duration.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='duration',
                )
        self.nxp_ENTRY.nxp_duration.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_duration.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_ENTRY.nxp_duration.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-field',
                )
        self.nxp_ENTRY.nxp_duration.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_end_time = NX_DATE_TIME()
        self.nxp_ENTRY.nxp_end_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='end_time',
                )
        self.nxp_ENTRY.nxp_end_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_ENTRY.nxp_end_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-field',
                )
        self.nxp_ENTRY.nxp_end_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_entry_identifier = NX_CHAR()
        self.nxp_ENTRY.nxp_entry_identifier.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry_identifier',
                )
        self.nxp_ENTRY.nxp_entry_identifier.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-field',
                )
        self.nxp_ENTRY.nxp_entry_identifier.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_experiment_identifier = NX_CHAR()
        self.nxp_ENTRY.nxp_experiment_identifier.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='experiment_identifier',
                )
        self.nxp_ENTRY.nxp_experiment_identifier.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-field',
                )
        self.nxp_ENTRY.nxp_experiment_identifier.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_notes = NX_CHAR()
        self.nxp_ENTRY.nxp_notes.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='notes',
                )
        self.nxp_ENTRY.nxp_notes.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-field',
                )
        self.nxp_ENTRY.nxp_notes.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_proton_charge = NX_FLOAT()
        self.nxp_ENTRY.nxp_proton_charge.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='proton_charge',
                )
        self.nxp_ENTRY.nxp_proton_charge.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_proton_charge.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHARGE',
                )
        self.nxp_ENTRY.nxp_proton_charge.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-field',
                )
        self.nxp_ENTRY.nxp_proton_charge.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_raw_frames = NX_INT()
        self.nxp_ENTRY.nxp_raw_frames.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='raw_frames',
                )
        self.nxp_ENTRY.nxp_raw_frames.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_ENTRY.nxp_raw_frames.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-field',
                )
        self.nxp_ENTRY.nxp_raw_frames.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_run_number = NX_CHAR()
        self.nxp_ENTRY.nxp_run_number.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='run_number',
                )
        self.nxp_ENTRY.nxp_run_number.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-field',
                )
        self.nxp_ENTRY.nxp_run_number.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_start_time = NX_DATE_TIME()
        self.nxp_ENTRY.nxp_start_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start_time',
                )
        self.nxp_ENTRY.nxp_start_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_ENTRY.nxp_start_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-field',
                )
        self.nxp_ENTRY.nxp_start_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_title = NX_CHAR()
        self.nxp_ENTRY.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_ENTRY.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-field',
                )
        self.nxp_ENTRY.nxp_title.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_total_counts = NX_UINT()
        self.nxp_ENTRY.nxp_total_counts.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='total_counts',
                )
        self.nxp_ENTRY.nxp_total_counts.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UINT',
                )
        self.nxp_ENTRY.nxp_total_counts.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_ENTRY.nxp_total_counts.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-field',
                )
        self.nxp_ENTRY.nxp_total_counts.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_total_uncounted_counts = NX_UINT()
        self.nxp_ENTRY.nxp_total_uncounted_counts.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='total_uncounted_counts',
                )
        self.nxp_ENTRY.nxp_total_uncounted_counts.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UINT',
                )
        self.nxp_ENTRY.nxp_total_uncounted_counts.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_ENTRY.nxp_total_uncounted_counts.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-field',
                )
        self.nxp_ENTRY.nxp_total_uncounted_counts.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs = NXcollection()
        self.nxp_ENTRY.nxp_DASlogs.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcollection',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='DASlogs',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Details of all logs, both from cvinfo file and from HistoTool (frequency
                and proton_charge).''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-group',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG = NXlog()
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-group',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='average_value',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value_error = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value_error.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='average_value_error',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value_error.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value_error.nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='see https://github.com/nexusformat/definitions/issues/821',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value_error.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value_error.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value_error.nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value_errors = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value_errors.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='average_value_errors',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value_errors.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value_errors.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value_errors.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_description = NX_CHAR()
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_duration = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_duration.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='duration',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_duration.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_duration.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_duration.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_maximum_value = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_maximum_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='maximum_value',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_maximum_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_maximum_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_maximum_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_minimum_value = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_minimum_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='minimum_value',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_minimum_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_minimum_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_minimum_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_time = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='time',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_value = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-log-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER = NXpositioner()
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXpositioner',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Motor logs from cvinfo file.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-group',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='average_value',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value_error = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value_error.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='average_value_error',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value_error.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value_error.nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='see https://github.com/nexusformat/definitions/issues/821',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value_error.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value_error.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value_error.nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value_errors = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value_errors.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='average_value_errors',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value_errors.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value_errors.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value_errors.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_description = NX_CHAR()
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_duration = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_duration.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='duration',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_duration.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_duration.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_duration.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_maximum_value = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_maximum_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='maximum_value',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_maximum_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_maximum_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_maximum_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_minimum_value = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_minimum_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='minimum_value',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_minimum_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_minimum_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_minimum_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_time = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='time',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_value = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-daslogs-positioner-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_ENTRY.nxp_SNSHistoTool = NXnote()
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXnote',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SNSHistoTool',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-group',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_SNSbanking_file_name = NX_CHAR()
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_SNSbanking_file_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SNSbanking_file_name',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_SNSbanking_file_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-field',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_SNSbanking_file_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_SNSmapping_file_name = NX_CHAR()
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_SNSmapping_file_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SNSmapping_file_name',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_SNSmapping_file_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-field',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_SNSmapping_file_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_author = NX_CHAR()
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_author.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='author',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_author.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-field',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_author.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_command1 = NX_CHAR()
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_command1.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='command1',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_command1.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Command string for event2histo_nxl.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-field',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_command1.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_date = NX_CHAR()
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_date.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='date',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_date.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-field',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_date.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_description = NX_CHAR()
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-field',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_version = NX_CHAR()
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_version.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='version',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_version.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-snshistotool-field',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_version.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_DATA = NXdata()
        self.nxp_ENTRY.nxp_DATA.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-group',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument = NXinstrument()
        self.nxp_ENTRY.nxp_instrument.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='instrument',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_SNSdetector_calibration_id = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_SNSdetector_calibration_id.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SNSdetector_calibration_id',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNSdetector_calibration_id.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Detector calibration id from DAS.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNSdetector_calibration_id.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_SNSgeometry_file_name = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_SNSgeometry_file_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SNSgeometry_file_name',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNSgeometry_file_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNSgeometry_file_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_SNStranslation_service = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_SNStranslation_service.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SNStranslation_service',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNStranslation_service.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNStranslation_service.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_beamline = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_beamline.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='beamline',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_beamline.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_beamline.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_SNS = NXsource()
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsource',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SNS',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_frequency = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_frequency.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='frequency',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_frequency.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_frequency.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FREQUENCY',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_frequency.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-sns-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_frequency.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-sns-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_probe = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_probe.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='probe',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_probe.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-sns-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_probe.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_type = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-sns-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_type.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR = NXdetector()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_azimuthal_angle = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_azimuthal_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='azimuthal_angle',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_azimuthal_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_azimuthal_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_azimuthal_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_azimuthal_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data = NX_UINT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UINT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data.nxp_axes= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x_pixel_offset,y_pixel_offset,time_of_flight',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data_x_time_of_flight = NX_UINT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data_x_time_of_flight.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data_x_time_of_flight',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data_x_time_of_flight.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UINT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data_x_time_of_flight.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='3',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data_x_time_of_flight.nxp_axes= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x_pixel_offset,time_of_flight',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data_x_time_of_flight.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data_x_time_of_flight.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data_x_y = NX_UINT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data_x_y.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data_x_y',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data_x_y.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UINT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data_x_y.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='2',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data_x_y.nxp_axes= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x_pixel_offset,y_pixel_offset',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data_x_y.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data_x_y.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data_y_time_of_flight = NX_UINT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data_y_time_of_flight.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data_y_time_of_flight',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data_y_time_of_flight.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UINT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data_y_time_of_flight.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='4',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data_y_time_of_flight.nxp_axes= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='y_pixel_offset,time_of_flight',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data_y_time_of_flight.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data_y_time_of_flight.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_distance = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_pixel_id = NX_UINT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_pixel_id.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='pixel_id',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_pixel_id.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UINT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_pixel_id.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_pixel_id.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_polar_angle = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_polar_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='polar_angle',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_polar_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_polar_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_polar_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_polar_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_time_of_flight = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_time_of_flight.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='time_of_flight',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_time_of_flight.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_time_of_flight.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='3',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_time_of_flight.nxp_primary= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_time_of_flight.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME_OF_FLIGHT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_time_of_flight.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_time_of_flight.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_total_counts = NX_UINT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_total_counts.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='total_counts',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_total_counts.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UINT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_total_counts.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_total_counts.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_x_pixel_offset = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_x_pixel_offset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x_pixel_offset',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_x_pixel_offset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_x_pixel_offset.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_x_pixel_offset.nxp_primary= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_x_pixel_offset.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_x_pixel_offset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_x_pixel_offset.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_y_pixel_offset = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_y_pixel_offset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='y_pixel_offset',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_y_pixel_offset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_y_pixel_offset.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='2',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_y_pixel_offset.nxp_primary= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_y_pixel_offset.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_y_pixel_offset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_y_pixel_offset.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin = NXgeometry()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgeometry',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='origin',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_orientation = NXorientation()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_orientation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXorientation',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_orientation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='orientation',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_orientation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_orientation.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_orientation.nxp_value = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_orientation.nxp_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_orientation.nxp_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_orientation.nxp_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Six out of nine rotation parameters.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-orientation-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_orientation.nxp_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape = NXshape()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXshape',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='shape',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_description = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-shape-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_shape = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_shape.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='shape',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_shape.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-shape-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_shape.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_size = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='size',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-shape-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_size.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_translation = NXtranslation()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_translation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXtranslation',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_translation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='translation',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_translation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_translation.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_translation.nxp_distance = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_translation.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_translation.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_translation.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_translation.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-detector-origin-translation-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_translation.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )





        self.nxp_ENTRY.nxp_instrument.nxp_DISK_CHOPPER = NXdisk_chopper()
        self.nxp_ENTRY.nxp_instrument.nxp_DISK_CHOPPER.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdisk_chopper',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DISK_CHOPPER.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DISK_CHOPPER.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Original specification called for NXchopper,              which is not a
                valid NeXus base class.             Select either NXdisk_chopper or
                NXfermi_chopper, as appropriate.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DISK_CHOPPER.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_DISK_CHOPPER.nxp_distance = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_DISK_CHOPPER.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DISK_CHOPPER.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DISK_CHOPPER.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DISK_CHOPPER.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-disk-chopper-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DISK_CHOPPER.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_instrument.nxp_FERMI_CHOPPER = NXfermi_chopper()
        self.nxp_ENTRY.nxp_instrument.nxp_FERMI_CHOPPER.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXfermi_chopper',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_FERMI_CHOPPER.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_FERMI_CHOPPER.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Original specification called for NXchopper,              which is not a
                valid NeXus base class.             Select either NXdisk_chopper or
                NXfermi_chopper, as appropriate.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_FERMI_CHOPPER.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_FERMI_CHOPPER.nxp_distance = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_FERMI_CHOPPER.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_FERMI_CHOPPER.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_FERMI_CHOPPER.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_FERMI_CHOPPER.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-fermi-chopper-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_FERMI_CHOPPER.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_instrument.nxp_moderator = NXmoderator()
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmoderator',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='moderator',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_coupling_material = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_coupling_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='coupling_material',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_coupling_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-moderator-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_coupling_material.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_distance = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-moderator-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_temperature = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_temperature.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='temperature',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_temperature.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_temperature.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TEMPERATURE',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_temperature.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-moderator-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_temperature.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_type = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-moderator-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_type.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE = NXaperture()
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXaperture',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_x_pixel_offset = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_x_pixel_offset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x_pixel_offset',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_x_pixel_offset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_x_pixel_offset.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_x_pixel_offset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_x_pixel_offset.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin = NXgeometry()
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgeometry',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='origin',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_orientation = NXorientation()
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_orientation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXorientation',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_orientation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='orientation',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_orientation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_orientation.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_orientation.nxp_value = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_orientation.nxp_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_orientation.nxp_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_orientation.nxp_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Six out of nine rotation parameters.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-orientation-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_orientation.nxp_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape = NXshape()
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXshape',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='shape',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_description = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-shape-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_shape = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_shape.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='shape',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_shape.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-shape-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_shape.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_size = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='size',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-shape-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_size.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_translation = NXtranslation()
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_translation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXtranslation',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_translation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='translation',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_translation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_translation.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_translation.nxp_distance = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_translation.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_translation.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_translation.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_translation.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-aperture-origin-translation-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_translation.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )





        self.nxp_ENTRY.nxp_instrument.nxp_ATTENUATOR = NXattenuator()
        self.nxp_ENTRY.nxp_instrument.nxp_ATTENUATOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXattenuator',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_ATTENUATOR.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_ATTENUATOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_ATTENUATOR.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_ATTENUATOR.nxp_distance = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_ATTENUATOR.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_ATTENUATOR.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_ATTENUATOR.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_ATTENUATOR.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-attenuator-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_ATTENUATOR.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_instrument.nxp_POLARIZER = NXpolarizer()
        self.nxp_ENTRY.nxp_instrument.nxp_POLARIZER.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXpolarizer',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_POLARIZER.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_POLARIZER.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_POLARIZER.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL = NXcrystal()
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcrystal',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_type = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_type.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_wavelength = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_wavelength.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='wavelength',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_wavelength.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_wavelength.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVELENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_wavelength.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_wavelength.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin = NXgeometry()
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgeometry',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='origin',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_description = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_orientation = NXorientation()
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_orientation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXorientation',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_orientation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='orientation',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_orientation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_orientation.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_orientation.nxp_value = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_orientation.nxp_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_orientation.nxp_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_orientation.nxp_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Six out of nine rotation parameters.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-orientation-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_orientation.nxp_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape = NXshape()
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXshape',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='shape',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_description = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-shape-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_shape = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_shape.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='shape',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_shape.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-shape-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_shape.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_size = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='size',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-shape-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_size.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_translation = NXtranslation()
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_translation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXtranslation',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_translation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='translation',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_translation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_translation.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_translation.nxp_distance = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_translation.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_translation.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_translation.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_translation.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-instrument-crystal-origin-translation-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_translation.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )






        self.nxp_ENTRY.nxp_MONITOR = NXmonitor()
        self.nxp_ENTRY.nxp_MONITOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonitor',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-group',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_MONITOR.nxp_data = NX_UINT()
        self.nxp_ENTRY.nxp_MONITOR.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UINT',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_data.nxp_signal= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_data.nxp_axes= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='time_of_flight',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-monitor-field',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_MONITOR.nxp_distance = NX_FLOAT()
        self.nxp_ENTRY.nxp_MONITOR.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-monitor-field',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_MONITOR.nxp_mode = NX_CHAR()
        self.nxp_ENTRY.nxp_MONITOR.nxp_mode.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='mode',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_mode.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-monitor-field',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_mode.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_MONITOR.nxp_time_of_flight = NX_FLOAT()
        self.nxp_ENTRY.nxp_MONITOR.nxp_time_of_flight.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='time_of_flight',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_time_of_flight.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_time_of_flight.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_time_of_flight.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-monitor-field',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_time_of_flight.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_sample = NXsample()
        self.nxp_ENTRY.nxp_sample.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_ENTRY.nxp_sample.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample',
                )
        self.nxp_ENTRY.nxp_sample.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-group',
                )
        self.nxp_ENTRY.nxp_sample.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_sample.nxp_changer_position = NX_CHAR()
        self.nxp_ENTRY.nxp_sample.nxp_changer_position.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='changer_position',
                )
        self.nxp_ENTRY.nxp_sample.nxp_changer_position.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_sample.nxp_changer_position.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_sample.nxp_holder = NX_CHAR()
        self.nxp_ENTRY.nxp_sample.nxp_holder.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='holder',
                )
        self.nxp_ENTRY.nxp_sample.nxp_holder.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_sample.nxp_holder.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_sample.nxp_identifier = NX_CHAR()
        self.nxp_ENTRY.nxp_sample.nxp_identifier.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='identifier',
                )
        self.nxp_ENTRY.nxp_sample.nxp_identifier.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_sample.nxp_identifier.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_sample.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_sample.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_sample.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Descriptive name of sample''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_sample.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_sample.nxp_nature = NX_CHAR()
        self.nxp_ENTRY.nxp_sample.nxp_nature.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='nature',
                )
        self.nxp_ENTRY.nxp_sample.nxp_nature.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_sample.nxp_nature.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_USER = NXuser()
        self.nxp_ENTRY.nxp_USER.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXuser',
                )
        self.nxp_ENTRY.nxp_USER.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_USER.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-group',
                )
        self.nxp_ENTRY.nxp_USER.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_USER.nxp_facility_user_id = NX_CHAR()
        self.nxp_ENTRY.nxp_USER.nxp_facility_user_id.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='facility_user_id',
                )
        self.nxp_ENTRY.nxp_USER.nxp_facility_user_id.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-user-field',
                )
        self.nxp_ENTRY.nxp_USER.nxp_facility_user_id.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_USER.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_USER.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_USER.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-user-field',
                )
        self.nxp_ENTRY.nxp_USER.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_USER.nxp_role = NX_CHAR()
        self.nxp_ENTRY.nxp_USER.nxp_role.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='role',
                )
        self.nxp_ENTRY.nxp_USER.nxp_role.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnshisto.html#nxsnshisto-entry-user-field',
                )
        self.nxp_ENTRY.nxp_USER.nxp_role.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )





class NXsnsevent(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXsnsevent',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='contributed',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
            This is a definition for event data from Spallation Neutron Source (SNS) at ORNL.
            ''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_ENTRY = NXentry()
        self.nxp_ENTRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_ENTRY.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-group',
                )
        self.nxp_ENTRY.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_collection_identifier = NX_CHAR()
        self.nxp_ENTRY.nxp_collection_identifier.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='collection_identifier',
                )
        self.nxp_ENTRY.nxp_collection_identifier.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-field',
                )
        self.nxp_ENTRY.nxp_collection_identifier.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_collection_title = NX_CHAR()
        self.nxp_ENTRY.nxp_collection_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='collection_title',
                )
        self.nxp_ENTRY.nxp_collection_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-field',
                )
        self.nxp_ENTRY.nxp_collection_title.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_definition = NX_CHAR()
        self.nxp_ENTRY.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_ENTRY.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Official NXDL schema after this file goes to applications.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-field',
                )
        self.nxp_ENTRY.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsnsevent',
                )


        self.nxp_ENTRY.nxp_duration = NX_FLOAT()
        self.nxp_ENTRY.nxp_duration.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='duration',
                )
        self.nxp_ENTRY.nxp_duration.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_duration.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_ENTRY.nxp_duration.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-field',
                )
        self.nxp_ENTRY.nxp_duration.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_end_time = NX_DATE_TIME()
        self.nxp_ENTRY.nxp_end_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='end_time',
                )
        self.nxp_ENTRY.nxp_end_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_ENTRY.nxp_end_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-field',
                )
        self.nxp_ENTRY.nxp_end_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_entry_identifier = NX_CHAR()
        self.nxp_ENTRY.nxp_entry_identifier.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='entry_identifier',
                )
        self.nxp_ENTRY.nxp_entry_identifier.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-field',
                )
        self.nxp_ENTRY.nxp_entry_identifier.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_experiment_identifier = NX_CHAR()
        self.nxp_ENTRY.nxp_experiment_identifier.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='experiment_identifier',
                )
        self.nxp_ENTRY.nxp_experiment_identifier.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-field',
                )
        self.nxp_ENTRY.nxp_experiment_identifier.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_notes = NX_CHAR()
        self.nxp_ENTRY.nxp_notes.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='notes',
                )
        self.nxp_ENTRY.nxp_notes.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-field',
                )
        self.nxp_ENTRY.nxp_notes.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_proton_charge = NX_FLOAT()
        self.nxp_ENTRY.nxp_proton_charge.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='proton_charge',
                )
        self.nxp_ENTRY.nxp_proton_charge.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_proton_charge.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_CHARGE',
                )
        self.nxp_ENTRY.nxp_proton_charge.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-field',
                )
        self.nxp_ENTRY.nxp_proton_charge.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_raw_frames = NX_INT()
        self.nxp_ENTRY.nxp_raw_frames.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='raw_frames',
                )
        self.nxp_ENTRY.nxp_raw_frames.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_ENTRY.nxp_raw_frames.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-field',
                )
        self.nxp_ENTRY.nxp_raw_frames.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_run_number = NX_CHAR()
        self.nxp_ENTRY.nxp_run_number.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='run_number',
                )
        self.nxp_ENTRY.nxp_run_number.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-field',
                )
        self.nxp_ENTRY.nxp_run_number.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_start_time = NX_DATE_TIME()
        self.nxp_ENTRY.nxp_start_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='start_time',
                )
        self.nxp_ENTRY.nxp_start_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_ENTRY.nxp_start_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-field',
                )
        self.nxp_ENTRY.nxp_start_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_title = NX_CHAR()
        self.nxp_ENTRY.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_ENTRY.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-field',
                )
        self.nxp_ENTRY.nxp_title.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_total_counts = NX_UINT()
        self.nxp_ENTRY.nxp_total_counts.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='total_counts',
                )
        self.nxp_ENTRY.nxp_total_counts.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UINT',
                )
        self.nxp_ENTRY.nxp_total_counts.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_ENTRY.nxp_total_counts.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-field',
                )
        self.nxp_ENTRY.nxp_total_counts.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_total_uncounted_counts = NX_UINT()
        self.nxp_ENTRY.nxp_total_uncounted_counts.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='total_uncounted_counts',
                )
        self.nxp_ENTRY.nxp_total_uncounted_counts.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UINT',
                )
        self.nxp_ENTRY.nxp_total_uncounted_counts.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UNITLESS',
                )
        self.nxp_ENTRY.nxp_total_uncounted_counts.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-field',
                )
        self.nxp_ENTRY.nxp_total_uncounted_counts.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs = NXcollection()
        self.nxp_ENTRY.nxp_DASlogs.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcollection',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='DASlogs',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Details of all logs, both from cvinfo file and from HistoTool (frequency
                and proton_charge).''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-group',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG = NXlog()
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXlog',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-group',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='average_value',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value_error = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value_error.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='average_value_error',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value_error.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value_error.nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='see https://github.com/nexusformat/definitions/issues/821',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value_error.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value_error.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value_error.nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value_errors = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value_errors.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='average_value_errors',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value_errors.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value_errors.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_average_value_errors.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_description = NX_CHAR()
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_duration = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_duration.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='duration',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_duration.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_duration.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_duration.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_maximum_value = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_maximum_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='maximum_value',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_maximum_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_maximum_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_maximum_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_minimum_value = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_minimum_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='minimum_value',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_minimum_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_minimum_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_minimum_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_time = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='time',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_value = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-log-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_LOG.nxp_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER = NXpositioner()
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXpositioner',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Motor logs from cvinfo file.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-group',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='average_value',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value_error = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value_error.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='average_value_error',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value_error.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value_error.nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='see https://github.com/nexusformat/definitions/issues/821',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value_error.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value_error.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value_error.nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value_errors = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value_errors.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='average_value_errors',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value_errors.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value_errors.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_average_value_errors.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_description = NX_CHAR()
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_duration = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_duration.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='duration',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_duration.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_duration.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_duration.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_maximum_value = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_maximum_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='maximum_value',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_maximum_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_maximum_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_maximum_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_minimum_value = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_minimum_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='minimum_value',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_minimum_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_minimum_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_minimum_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_time = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='time',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_value = NX_FLOAT()
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-daslogs-positioner-field',
                )
        self.nxp_ENTRY.nxp_DASlogs.nxp_POSITIONER.nxp_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_ENTRY.nxp_SNSHistoTool = NXnote()
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXnote',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SNSHistoTool',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-group',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_SNSbanking_file_name = NX_CHAR()
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_SNSbanking_file_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SNSbanking_file_name',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_SNSbanking_file_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-field',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_SNSbanking_file_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_SNSmapping_file_name = NX_CHAR()
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_SNSmapping_file_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SNSmapping_file_name',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_SNSmapping_file_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-field',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_SNSmapping_file_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_author = NX_CHAR()
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_author.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='author',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_author.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-field',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_author.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_command1 = NX_CHAR()
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_command1.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='command1',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_command1.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Command string for event2nxl.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-field',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_command1.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_date = NX_CHAR()
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_date.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='date',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_date.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-field',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_date.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_description = NX_CHAR()
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-field',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_version = NX_CHAR()
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_version.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='version',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_version.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-snshistotool-field',
                )
        self.nxp_ENTRY.nxp_SNSHistoTool.nxp_version.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_DATA = NXdata()
        self.nxp_ENTRY.nxp_DATA.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-group',
                )
        self.nxp_ENTRY.nxp_DATA.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_EVENT_DATA = NXevent_data()
        self.nxp_ENTRY.nxp_EVENT_DATA.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXevent_data',
                )
        self.nxp_ENTRY.nxp_EVENT_DATA.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_EVENT_DATA.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-group',
                )
        self.nxp_ENTRY.nxp_EVENT_DATA.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument = NXinstrument()
        self.nxp_ENTRY.nxp_instrument.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='instrument',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_SNSdetector_calibration_id = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_SNSdetector_calibration_id.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SNSdetector_calibration_id',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNSdetector_calibration_id.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Detector calibration id from DAS.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNSdetector_calibration_id.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_SNSgeometry_file_name = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_SNSgeometry_file_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SNSgeometry_file_name',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNSgeometry_file_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNSgeometry_file_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_SNStranslation_service = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_SNStranslation_service.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SNStranslation_service',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNStranslation_service.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNStranslation_service.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_beamline = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_beamline.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='beamline',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_beamline.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_beamline.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_SNS = NXsource()
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsource',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SNS',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_frequency = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_frequency.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='frequency',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_frequency.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_frequency.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FREQUENCY',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_frequency.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-sns-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_frequency.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-sns-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_probe = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_probe.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='probe',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_probe.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-sns-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_probe.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_type = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-sns-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_SNS.nxp_type.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR = NXdetector()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdetector',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_azimuthal_angle = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_azimuthal_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='azimuthal_angle',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_azimuthal_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_azimuthal_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_azimuthal_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_azimuthal_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data_x_y = NX_UINT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data_x_y.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data_x_y',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data_x_y.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UINT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data_x_y.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                expect  ``signal=2 axes="x_pixel_offset,y_pixel_offset``"''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_data_x_y.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_distance = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_event_index = NX_UINT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_event_index.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='event_index',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_event_index.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UINT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_event_index.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_event_index.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_event_pixel_id = NX_UINT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_event_pixel_id.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='event_pixel_id',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_event_pixel_id.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UINT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_event_pixel_id.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_event_pixel_id.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_event_time_of_flight = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_event_time_of_flight.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='event_time_of_flight',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_event_time_of_flight.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_event_time_of_flight.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME_OF_FLIGHT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_event_time_of_flight.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_event_time_of_flight.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_pixel_id = NX_UINT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_pixel_id.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='pixel_id',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_pixel_id.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UINT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_pixel_id.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_pixel_id.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_polar_angle = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_polar_angle.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='polar_angle',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_polar_angle.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_polar_angle.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_ANGLE',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_polar_angle.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_polar_angle.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_pulse_time = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_pulse_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='pulse_time',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_pulse_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_pulse_time.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_pulse_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_pulse_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_total_counts = NX_UINT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_total_counts.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='total_counts',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_total_counts.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UINT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_total_counts.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_total_counts.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_x_pixel_offset = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_x_pixel_offset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x_pixel_offset',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_x_pixel_offset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_x_pixel_offset.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_x_pixel_offset.nxp_primary= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_x_pixel_offset.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_x_pixel_offset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_x_pixel_offset.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_y_pixel_offset = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_y_pixel_offset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='y_pixel_offset',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_y_pixel_offset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_y_pixel_offset.nxp_axis= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='2',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_y_pixel_offset.nxp_primary= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_y_pixel_offset.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_y_pixel_offset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_y_pixel_offset.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin = NXgeometry()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgeometry',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='origin',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_orientation = NXorientation()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_orientation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXorientation',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_orientation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='orientation',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_orientation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_orientation.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_orientation.nxp_value = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_orientation.nxp_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_orientation.nxp_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_orientation.nxp_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Six out of nine rotation parameters.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-orientation-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_orientation.nxp_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape = NXshape()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXshape',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='shape',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_description = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-shape-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_shape = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_shape.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='shape',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_shape.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-shape-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_shape.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_size = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='size',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-shape-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_shape.nxp_size.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_translation = NXtranslation()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_translation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXtranslation',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_translation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='translation',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_translation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_translation.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_translation.nxp_distance = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_translation.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_translation.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_translation.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_translation.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-detector-origin-translation-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DETECTOR.nxp_origin.nxp_translation.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )





        self.nxp_ENTRY.nxp_instrument.nxp_DISK_CHOPPER = NXdisk_chopper()
        self.nxp_ENTRY.nxp_instrument.nxp_DISK_CHOPPER.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdisk_chopper',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DISK_CHOPPER.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DISK_CHOPPER.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DISK_CHOPPER.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_DISK_CHOPPER.nxp_distance = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_DISK_CHOPPER.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DISK_CHOPPER.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DISK_CHOPPER.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DISK_CHOPPER.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-disk-chopper-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_DISK_CHOPPER.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_instrument.nxp_moderator = NXmoderator()
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmoderator',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='moderator',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_coupling_material = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_coupling_material.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='coupling_material',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_coupling_material.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-moderator-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_coupling_material.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_distance = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-moderator-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_temperature = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_temperature.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='temperature',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_temperature.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_temperature.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TEMPERATURE',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_temperature.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-moderator-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_temperature.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_type = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-moderator-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_moderator.nxp_type.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE = NXaperture()
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXaperture',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_x_pixel_offset = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_x_pixel_offset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='x_pixel_offset',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_x_pixel_offset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_x_pixel_offset.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_x_pixel_offset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_x_pixel_offset.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin = NXgeometry()
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgeometry',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='origin',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_orientation = NXorientation()
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_orientation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXorientation',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_orientation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='orientation',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_orientation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_orientation.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_orientation.nxp_value = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_orientation.nxp_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_orientation.nxp_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_orientation.nxp_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Six out of nine rotation parameters.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-orientation-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_orientation.nxp_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape = NXshape()
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXshape',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='shape',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_description = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-shape-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_shape = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_shape.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='shape',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_shape.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-shape-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_shape.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_size = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='size',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-shape-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_shape.nxp_size.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_translation = NXtranslation()
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_translation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXtranslation',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_translation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='translation',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_translation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_translation.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_translation.nxp_distance = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_translation.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_translation.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_translation.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_translation.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-aperture-origin-translation-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_APERTURE.nxp_origin.nxp_translation.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )





        self.nxp_ENTRY.nxp_instrument.nxp_ATTENUATOR = NXattenuator()
        self.nxp_ENTRY.nxp_instrument.nxp_ATTENUATOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXattenuator',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_ATTENUATOR.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_ATTENUATOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_ATTENUATOR.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_ATTENUATOR.nxp_distance = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_ATTENUATOR.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_ATTENUATOR.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_ATTENUATOR.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_ATTENUATOR.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-attenuator-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_ATTENUATOR.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_instrument.nxp_POLARIZER = NXpolarizer()
        self.nxp_ENTRY.nxp_instrument.nxp_POLARIZER.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXpolarizer',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_POLARIZER.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_POLARIZER.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_POLARIZER.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL = NXcrystal()
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcrystal',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_type = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_type.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='type',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_type.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_type.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_wavelength = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_wavelength.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='wavelength',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_wavelength.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_wavelength.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_WAVELENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_wavelength.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_wavelength.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin = NXgeometry()
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXgeometry',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='origin',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_description = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_orientation = NXorientation()
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_orientation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXorientation',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_orientation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='orientation',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_orientation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_orientation.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_orientation.nxp_value = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_orientation.nxp_value.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='value',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_orientation.nxp_value.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_orientation.nxp_value.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Six out of nine rotation parameters.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-orientation-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_orientation.nxp_value.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape = NXshape()
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXshape',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='shape',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_description = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-shape-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_shape = NX_CHAR()
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_shape.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='shape',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_shape.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-shape-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_shape.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_size = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_size.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='size',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_size.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_size.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_size.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-shape-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_shape.nxp_size.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_translation = NXtranslation()
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_translation.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXtranslation',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_translation.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='translation',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_translation.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-group',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_translation.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_translation.nxp_distance = NX_FLOAT()
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_translation.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_translation.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_translation.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_translation.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-instrument-crystal-origin-translation-field',
                )
        self.nxp_ENTRY.nxp_instrument.nxp_CRYSTAL.nxp_origin.nxp_translation.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )






        self.nxp_ENTRY.nxp_MONITOR = NXmonitor()
        self.nxp_ENTRY.nxp_MONITOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonitor',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='0',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-group',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_MONITOR.nxp_data = NX_UINT()
        self.nxp_ENTRY.nxp_MONITOR.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_UINT',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                expect  ``signal=1 axes="time_of_flight"``''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-monitor-field',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_MONITOR.nxp_distance = NX_FLOAT()
        self.nxp_ENTRY.nxp_MONITOR.nxp_distance.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='distance',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_distance.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_distance.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_LENGTH',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_distance.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-monitor-field',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_distance.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_MONITOR.nxp_mode = NX_CHAR()
        self.nxp_ENTRY.nxp_MONITOR.nxp_mode.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='mode',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_mode.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-monitor-field',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_mode.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_MONITOR.nxp_time_of_flight = NX_FLOAT()
        self.nxp_ENTRY.nxp_MONITOR.nxp_time_of_flight.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='time_of_flight',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_time_of_flight.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_time_of_flight.nxp_units= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_TIME',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_time_of_flight.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-monitor-field',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_time_of_flight.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_sample = NXsample()
        self.nxp_ENTRY.nxp_sample.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXsample',
                )
        self.nxp_ENTRY.nxp_sample.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='sample',
                )
        self.nxp_ENTRY.nxp_sample.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-group',
                )
        self.nxp_ENTRY.nxp_sample.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_sample.nxp_changer_position = NX_CHAR()
        self.nxp_ENTRY.nxp_sample.nxp_changer_position.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='changer_position',
                )
        self.nxp_ENTRY.nxp_sample.nxp_changer_position.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_sample.nxp_changer_position.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_sample.nxp_holder = NX_CHAR()
        self.nxp_ENTRY.nxp_sample.nxp_holder.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='holder',
                )
        self.nxp_ENTRY.nxp_sample.nxp_holder.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_sample.nxp_holder.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_sample.nxp_identifier = NX_CHAR()
        self.nxp_ENTRY.nxp_sample.nxp_identifier.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='identifier',
                )
        self.nxp_ENTRY.nxp_sample.nxp_identifier.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_sample.nxp_identifier.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_sample.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_sample.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_sample.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Descriptive name of sample''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_sample.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_sample.nxp_nature = NX_CHAR()
        self.nxp_ENTRY.nxp_sample.nxp_nature.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='nature',
                )
        self.nxp_ENTRY.nxp_sample.nxp_nature.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-sample-field',
                )
        self.nxp_ENTRY.nxp_sample.nxp_nature.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_USER = NXuser()
        self.nxp_ENTRY.nxp_USER.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXuser',
                )
        self.nxp_ENTRY.nxp_USER.nxp_minOccurs= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='1',
                )
        self.nxp_ENTRY.nxp_USER.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-group',
                )
        self.nxp_ENTRY.nxp_USER.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_USER.nxp_facility_user_id = NX_CHAR()
        self.nxp_ENTRY.nxp_USER.nxp_facility_user_id.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='facility_user_id',
                )
        self.nxp_ENTRY.nxp_USER.nxp_facility_user_id.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-user-field',
                )
        self.nxp_ENTRY.nxp_USER.nxp_facility_user_id.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_USER.nxp_name = NX_CHAR()
        self.nxp_ENTRY.nxp_USER.nxp_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='name',
                )
        self.nxp_ENTRY.nxp_USER.nxp_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-user-field',
                )
        self.nxp_ENTRY.nxp_USER.nxp_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_USER.nxp_role = NX_CHAR()
        self.nxp_ENTRY.nxp_USER.nxp_role.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='role',
                )
        self.nxp_ENTRY.nxp_USER.nxp_role.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXsnsevent.html#nxsnsevent-entry-user-field',
                )
        self.nxp_ENTRY.nxp_USER.nxp_role.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )





class NXspecdata(NXobject):

    def __init__(self):
        super().__init__()
        m_def = Section(
            validate=False,
            extends_base_section=True)

        self.nxp_name = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXspecdata',)

        self.nxp_extends = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='NXobject',)

        self.nxp_type = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='group',)

        self.nxp_category = Quantity(
            type=str,
            shape=[],
            description='''

            ''',
            default='contributed',)

        self.nxp_documentation = Quantity(
            type=str,
            shape=[],
            description='''
                    DEPRECATED: This definition will be removed by 2022.  Not for new use.

        Data collected by SPEC control and data acquisition software

        SPEC [#]_ is software for instrument control       and data acquisition in X-ray
        diffraction experiments.              .. [#] SPEC: https://certif.com
            ''',
            default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata',)

        self.nxp_required = Quantity(
            type=bool,
            shape=[],
            description='''

            ''',
            default=True,)

        self.nxp_ENTRY = NXentry()
        self.nxp_ENTRY.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXentry',
                )
        self.nxp_ENTRY.nxp_deprecated= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='This definition will be removed by 2022.',
                )
        self.nxp_ENTRY.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                one scan from a SPEC data file, starts with a **#S** line''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-group',
                )
        self.nxp_ENTRY.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_deprecated= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_default = NX_CHAR()
        self.nxp_ENTRY.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_ENTRY.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting
                Declares which :ref:`NXdata` group                          contains the
                data to be shown by default.                         It is needed to
                resolve ambiguity when more than one :ref:`NXdata` group exists.
                The value is the name of the default :ref:`NXdata` group.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-attribute',
                )
        self.nxp_ENTRY.nxp_default.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_definition = NX_CHAR()
        self.nxp_ENTRY.nxp_definition.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='definition',
                )
        self.nxp_ENTRY.nxp_definition.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                Official NeXus NXDL schema to which this subentry conforms.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-field',
                )
        self.nxp_ENTRY.nxp_definition.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_definition.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXspecdata',
                )


        self.nxp_ENTRY.nxp_scan_number = NX_NUMBER()
        self.nxp_ENTRY.nxp_scan_number.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='scan_number',
                )
        self.nxp_ENTRY.nxp_scan_number.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_scan_number.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                SPEC scan number''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-field',
                )
        self.nxp_ENTRY.nxp_scan_number.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_title = NX_CHAR()
        self.nxp_ENTRY.nxp_title.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='title',
                )
        self.nxp_ENTRY.nxp_title.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                SPEC scan number and command, from **#S** line                  SPEC data
                file line::                      #S 1  cscan en 690 750 60 0
                *title*::                      1  cscan en 690 750 60 0''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-field',
                )
        self.nxp_ENTRY.nxp_title.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_command = NX_CHAR()
        self.nxp_ENTRY.nxp_command.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='command',
                )
        self.nxp_ENTRY.nxp_command.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                SPEC scan command, from **#S** line, after the scan number.
                :SPEC data file line: ``#S 1  cscan en 690 750 60 0``
                :command*:  ``cscan en 690 750 60 0``''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-field',
                )
        self.nxp_ENTRY.nxp_command.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_date = NX_DATE_TIME()
        self.nxp_ENTRY.nxp_date.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='date',
                )
        self.nxp_ENTRY.nxp_date.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_DATE_TIME',
                )
        self.nxp_ENTRY.nxp_date.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                date from **#D** line in scan header, in ISO8601 format''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-field',
                )
        self.nxp_ENTRY.nxp_date.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_comments = NX_CHAR()
        self.nxp_ENTRY.nxp_comments.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='comments',
                )
        self.nxp_ENTRY.nxp_comments.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Any **#C** lines in this scan, stored as one string with newlines between
                comments''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-field',
                )
        self.nxp_ENTRY.nxp_comments.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_Q = NX_NUMBER()
        self.nxp_ENTRY.nxp_Q.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='Q',
                )
        self.nxp_ENTRY.nxp_Q.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_Q.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                **#Q** -- :math:`Q` (:math:`hkl`) at start of scan                  array
                of [:math:`h` :math:`k` :math:`l`]''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-field',
                )
        self.nxp_ENTRY.nxp_Q.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_TEMP_SP = NX_NUMBER()
        self.nxp_ENTRY.nxp_TEMP_SP.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='TEMP_SP',
                )
        self.nxp_ENTRY.nxp_TEMP_SP.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_TEMP_SP.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                **#X** -- temperature set point''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-field',
                )
        self.nxp_ENTRY.nxp_TEMP_SP.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_DEGC_SP = NX_NUMBER()
        self.nxp_ENTRY.nxp_DEGC_SP.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='DEGC_SP',
                )
        self.nxp_ENTRY.nxp_DEGC_SP.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_DEGC_SP.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                **#X** -- temperature set point (C)''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-field',
                )
        self.nxp_ENTRY.nxp_DEGC_SP.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_MONITOR = NXmonitor()
        self.nxp_ENTRY.nxp_MONITOR.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXmonitor',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-group',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_MONITOR.nxp_description = NX_CHAR()
        self.nxp_ENTRY.nxp_MONITOR.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-attribute',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_MONITOR.nxp_mode = NX_CHAR()
        self.nxp_ENTRY.nxp_MONITOR.nxp_mode.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='mode',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_mode.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Count to a preset value based on either clock time            (timer) or
                received monitor counts (monitor).''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-field',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_mode.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_mode.nxp_enumeration= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='monitor,timer',
                )


        self.nxp_ENTRY.nxp_MONITOR.nxp_preset = NX_NUMBER()
        self.nxp_ENTRY.nxp_MONITOR.nxp_preset.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='preset',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_preset.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_preset.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                preset value for time or monitor                      * **#M** -- counting
                against this constant monitor count (see #T)           * **#T** --
                counting against this constant number of seconds (see #M)''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-field',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_preset.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_MONITOR.nxp_preset.nxp_units = NX_CHAR()
        self.nxp_ENTRY.nxp_MONITOR.nxp_preset.nxp_units.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='units',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_preset.nxp_units.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-preset-attribute',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_preset.nxp_units.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_MONITOR.nxp_data = NX_NUMBER()
        self.nxp_ENTRY.nxp_MONITOR.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_data.nxp_nameType= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='any',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                array(s) of monitor data''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-field',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_MONITOR.nxp_count_time = NX_NUMBER()
        self.nxp_ENTRY.nxp_MONITOR.nxp_count_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='count_time',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_count_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_count_time.nxp_nameType= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='any',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_count_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                array(s) of monitor data''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-monitor-field',
                )
        self.nxp_ENTRY.nxp_MONITOR.nxp_count_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_data = NXdata()
        self.nxp_ENTRY.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXdata',
                )
        self.nxp_ENTRY.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                detector (and MCA) data from this scan''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-group',
                )
        self.nxp_ENTRY.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_data.nxp_description = NX_CHAR()
        self.nxp_ENTRY.nxp_data.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_ENTRY.nxp_data.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-attribute',
                )
        self.nxp_ENTRY.nxp_data.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_data.nxp_signal = NX_CHAR()
        self.nxp_ENTRY.nxp_data.nxp_signal.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='signal',
                )
        self.nxp_ENTRY.nxp_data.nxp_signal.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                name of the field with the plottable data, typically the last column for
                1-D scans                      This is the primary dependent axis, such as
                two-theta detector.           This field must exist (or be linked) in this
                :ref:`NXdata` group.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-attribute',
                )
        self.nxp_ENTRY.nxp_data.nxp_signal.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_data.nxp_axes = NX_CHAR()
        self.nxp_ENTRY.nxp_data.nxp_axes.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='axes',
                )
        self.nxp_ENTRY.nxp_data.nxp_axes.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                name(s) of the field(s) for plotting the data, typically the first column
                for 1-D scans                      These are the independent axes, such as
                positioners.  For 2-D or higher            dimension data, there will be a
                field named for each dimension,           separated by ":" (preferred) or
                "," or " " (whitespace).                      Such as for 2-D data plotted
                against *energy* and *th*::                          @axes = ["energy",
                "th"]                      This(these) field(s) must exist (or be linked)
                in this :ref:`NXdata` group.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-attribute',
                )
        self.nxp_ENTRY.nxp_data.nxp_axes.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_data.nxp_AXISNAME_indices = NX_NUMBER()
        self.nxp_ENTRY.nxp_data.nxp_AXISNAME_indices.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='AXISNAME_indices',
                )
        self.nxp_ENTRY.nxp_data.nxp_AXISNAME_indices.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_data.nxp_AXISNAME_indices.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                For each field named in *@axes*, there will be an instance of this
                attribute,           defining into which dimensions of the *@signal* data
                this field applies.           The value of this attribute is a list of
                index numbers using 0-based indexing           (first dimension is 0,
                seconds i 1, ...).                      Such as for 2-D data plotted
                against *energy* and *th*::                          @energy_indices = [0]
                @th_indices = [1]''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-attribute',
                )
        self.nxp_ENTRY.nxp_data.nxp_AXISNAME_indices.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_data.nxp_data = NX_NUMBER()
        self.nxp_ENTRY.nxp_data.nxp_data.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='data',
                )
        self.nxp_ENTRY.nxp_data.nxp_data.nxp_nameType= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='any',
                )
        self.nxp_ENTRY.nxp_data.nxp_data.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_data.nxp_data.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                one column of data from the scan                      HDF5 requires that
                each member of a group must have a unique name.                      Pick
                the name of column from **#L** but make it unique which means if the same
                name is used in more than one column, append a number to the extra
                instances           to make them unique yet preserve their content, just
                in case they might be different.                      Example: ``seconds
                seconds`` becomes ``seconds`` and ``seconda_1``.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-field',
                )
        self.nxp_ENTRY.nxp_data.nxp_data.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_data.nxp_data.nxp_spec_name = NX_CHAR()
        self.nxp_ENTRY.nxp_data.nxp_data.nxp_spec_name.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='spec_name',
                )
        self.nxp_ENTRY.nxp_data.nxp_data.nxp_spec_name.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                name as specified in **#L** line, before it was made unique for HDF5''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-data-attribute',
                )
        self.nxp_ENTRY.nxp_data.nxp_data.nxp_spec_name.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_data.nxp_data.nxp_units = NX_CHAR()
        self.nxp_ENTRY.nxp_data.nxp_data.nxp_units.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='units',
                )
        self.nxp_ENTRY.nxp_data.nxp_data.nxp_units.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Unless stated otherwise, units (not declared in the SPEC data file)
                are assumed to be *counts* for detectors and "unknown" for
                positioners or other scan columns.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-data-attribute',
                )
        self.nxp_ENTRY.nxp_data.nxp_data.nxp_units.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_data.nxp_intensity_factor = NX_NUMBER()
        self.nxp_ENTRY.nxp_data.nxp_intensity_factor.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='intensity_factor',
                )
        self.nxp_ENTRY.nxp_data.nxp_intensity_factor.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_data.nxp_intensity_factor.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                **#I** -- intensity normalizing factor''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-field',
                )
        self.nxp_ENTRY.nxp_data.nxp_intensity_factor.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_data.nxp__mca_ = NX_NUMBER()
        self.nxp_ENTRY.nxp_data.nxp__mca_.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='_mca_',
                )
        self.nxp_ENTRY.nxp_data.nxp__mca_.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_data.nxp__mca_.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-field',
                )
        self.nxp_ENTRY.nxp_data.nxp__mca_.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_data.nxp__mca_channel_ = NX_NUMBER()
        self.nxp_ENTRY.nxp_data.nxp__mca_channel_.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='_mca_channel_',
                )
        self.nxp_ENTRY.nxp_data.nxp__mca_channel_.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_data.nxp__mca_channel_.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-field',
                )
        self.nxp_ENTRY.nxp_data.nxp__mca_channel_.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_data.nxp__mca1_ = NX_NUMBER()
        self.nxp_ENTRY.nxp_data.nxp__mca1_.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='_mca1_',
                )
        self.nxp_ENTRY.nxp_data.nxp__mca1_.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_data.nxp__mca1_.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-field',
                )
        self.nxp_ENTRY.nxp_data.nxp__mca1_.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_data.nxp__mca1_channel_ = NX_NUMBER()
        self.nxp_ENTRY.nxp_data.nxp__mca1_channel_.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='_mca1_channel_',
                )
        self.nxp_ENTRY.nxp_data.nxp__mca1_channel_.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_data.nxp__mca1_channel_.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-data-field',
                )
        self.nxp_ENTRY.nxp_data.nxp__mca1_channel_.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_counter_cross_reference = NXnote()
        self.nxp_ENTRY.nxp_counter_cross_reference.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='counter_cross_reference',
                )
        self.nxp_ENTRY.nxp_counter_cross_reference.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXnote',
                )
        self.nxp_ENTRY.nxp_counter_cross_reference.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                associates values declared in **#J** and **#j** scan header lines''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-group',
                )
        self.nxp_ENTRY.nxp_counter_cross_reference.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_counter_cross_reference.nxp_comment = NX_CHAR()
        self.nxp_ENTRY.nxp_counter_cross_reference.nxp_comment.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='comment',
                )
        self.nxp_ENTRY.nxp_counter_cross_reference.nxp_comment.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-counter-cross-reference-attribute',
                )
        self.nxp_ENTRY.nxp_counter_cross_reference.nxp_comment.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_counter_cross_reference.nxp_description = NX_CHAR()
        self.nxp_ENTRY.nxp_counter_cross_reference.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_ENTRY.nxp_counter_cross_reference.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-counter-cross-reference-attribute',
                )
        self.nxp_ENTRY.nxp_counter_cross_reference.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_positioner_cross_reference = NXnote()
        self.nxp_ENTRY.nxp_positioner_cross_reference.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='positioner_cross_reference',
                )
        self.nxp_ENTRY.nxp_positioner_cross_reference.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXnote',
                )
        self.nxp_ENTRY.nxp_positioner_cross_reference.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                associates values declared in **#O** and **#o** scan header lines''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-group',
                )
        self.nxp_ENTRY.nxp_positioner_cross_reference.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_positioner_cross_reference.nxp_comment = NX_CHAR()
        self.nxp_ENTRY.nxp_positioner_cross_reference.nxp_comment.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='comment',
                )
        self.nxp_ENTRY.nxp_positioner_cross_reference.nxp_comment.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-positioner-cross-reference-attribute',
                )
        self.nxp_ENTRY.nxp_positioner_cross_reference.nxp_comment.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_positioner_cross_reference.nxp_description = NX_CHAR()
        self.nxp_ENTRY.nxp_positioner_cross_reference.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_ENTRY.nxp_positioner_cross_reference.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-positioner-cross-reference-attribute',
                )
        self.nxp_ENTRY.nxp_positioner_cross_reference.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_spec = NXinstrument()
        self.nxp_ENTRY.nxp_spec.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='spec',
                )
        self.nxp_ENTRY.nxp_spec.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXinstrument',
                )
        self.nxp_ENTRY.nxp_spec.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                various metadata from the SPEC scan header that have well-known NeXus base
                clases''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-group',
                )
        self.nxp_ENTRY.nxp_spec.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_spec.nxp_UB = NXcrystal()
        self.nxp_ENTRY.nxp_spec.nxp_UB.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='UB',
                )
        self.nxp_ENTRY.nxp_spec.nxp_UB.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXcrystal',
                )
        self.nxp_ENTRY.nxp_spec.nxp_UB.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Orientation matrix of single crystal sample using Busing-Levy convention''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-spec-group',
                )
        self.nxp_ENTRY.nxp_spec.nxp_UB.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_spec.nxp_UB.nxp_orientation_matrix = NX_FLOAT()
        self.nxp_ENTRY.nxp_spec.nxp_UB.nxp_orientation_matrix.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='orientation_matrix',
                )
        self.nxp_ENTRY.nxp_spec.nxp_UB.nxp_orientation_matrix.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_FLOAT',
                )
        self.nxp_ENTRY.nxp_spec.nxp_UB.nxp_orientation_matrix.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                **#G3** line in scan header''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-spec-ub-field',
                )
        self.nxp_ENTRY.nxp_spec.nxp_UB.nxp_orientation_matrix.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_ENTRY.nxp_G = NXnote()
        self.nxp_ENTRY.nxp_G.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='G',
                )
        self.nxp_ENTRY.nxp_G.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXnote',
                )
        self.nxp_ENTRY.nxp_G.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                SPEC geometry variables for this diffractometer geometry (instrument
                specific)                  TODO: give interpreted name for each array
                value (need to figure out how to get the names)''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-group',
                )
        self.nxp_ENTRY.nxp_G.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_G.nxp_comment = NX_CHAR()
        self.nxp_ENTRY.nxp_G.nxp_comment.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='comment',
                )
        self.nxp_ENTRY.nxp_G.nxp_comment.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-attribute',
                )
        self.nxp_ENTRY.nxp_G.nxp_comment.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_G.nxp_description = NX_CHAR()
        self.nxp_ENTRY.nxp_G.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_ENTRY.nxp_G.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-attribute',
                )
        self.nxp_ENTRY.nxp_G.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_G.nxp_G0 = NX_NUMBER()
        self.nxp_ENTRY.nxp_G.nxp_G0.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='G0',
                )
        self.nxp_ENTRY.nxp_G.nxp_G0.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_G.nxp_G0.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                geometry parameters from G[] array (geo mode, sector, etc)''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-field',
                )
        self.nxp_ENTRY.nxp_G.nxp_G0.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_G.nxp_G1 = NX_NUMBER()
        self.nxp_ENTRY.nxp_G.nxp_G1.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='G1',
                )
        self.nxp_ENTRY.nxp_G.nxp_G1.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_G.nxp_G1.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                geometry parameters from U[] array (lattice constants, orientation
                reflections)''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-field',
                )
        self.nxp_ENTRY.nxp_G.nxp_G1.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_G.nxp_G2 = NX_NUMBER()
        self.nxp_ENTRY.nxp_G.nxp_G2.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='G2',
                )
        self.nxp_ENTRY.nxp_G.nxp_G2.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_G.nxp_G2.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                not used, although some files has a single zero value''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-field',
                )
        self.nxp_ENTRY.nxp_G.nxp_G2.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_G.nxp_G4 = NX_NUMBER()
        self.nxp_ENTRY.nxp_G.nxp_G4.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='G4',
                )
        self.nxp_ENTRY.nxp_G.nxp_G4.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_G.nxp_G4.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                geometry parameters from Q[] array (lambda, frozen angles, cut points,
                etc)''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-g-field',
                )
        self.nxp_ENTRY.nxp_G.nxp_G4.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_positioners = NXnote()
        self.nxp_ENTRY.nxp_positioners.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='positioners',
                )
        self.nxp_ENTRY.nxp_positioners.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXnote',
                )
        self.nxp_ENTRY.nxp_positioners.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                names and values of all positioners (**#O** and **#P** lines) in scan
                header''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-group',
                )
        self.nxp_ENTRY.nxp_positioners.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_positioners.nxp_description = NX_CHAR()
        self.nxp_ENTRY.nxp_positioners.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_ENTRY.nxp_positioners.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-positioners-attribute',
                )
        self.nxp_ENTRY.nxp_positioners.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_positioners.nxp_positioner = NX_NUMBER()
        self.nxp_ENTRY.nxp_positioners.nxp_positioner.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='positioner',
                )
        self.nxp_ENTRY.nxp_positioners.nxp_positioner.nxp_nameType= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='any',
                )
        self.nxp_ENTRY.nxp_positioners.nxp_positioner.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_positioners.nxp_positioner.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                one positioner from the scan header                      HDF5 requires
                that each member of a group must have a unique name.
                SPEC assigns a unique name to each positioner, no extra work is neccesary
                to comply with the HDF5 rule for unique names in a group.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-positioners-field',
                )
        self.nxp_ENTRY.nxp_positioners.nxp_positioner.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_MCA = NXnote()
        self.nxp_ENTRY.nxp_MCA.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='MCA',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXnote',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                **#@CALIB** -- coefficients to compute a scale based on the MCA channel
                number''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-group',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_MCA.nxp_description = NX_CHAR()
        self.nxp_ENTRY.nxp_MCA.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-attribute',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_MCA.nxp_preset_time = NX_NUMBER()
        self.nxp_ENTRY.nxp_MCA.nxp_preset_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='preset_time',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_preset_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_preset_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-field',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_preset_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_MCA.nxp_elapsed_live_time = NX_NUMBER()
        self.nxp_ENTRY.nxp_MCA.nxp_elapsed_live_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='elapsed_live_time',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_elapsed_live_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_elapsed_live_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-field',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_elapsed_live_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_MCA.nxp_elapsed_real_time = NX_NUMBER()
        self.nxp_ENTRY.nxp_MCA.nxp_elapsed_real_time.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='elapsed_real_time',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_elapsed_real_time.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_elapsed_real_time.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-field',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_elapsed_real_time.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_MCA.nxp_number_saved = NX_NUMBER()
        self.nxp_ENTRY.nxp_MCA.nxp_number_saved.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='number_saved',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_number_saved.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_number_saved.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-field',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_number_saved.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_MCA.nxp_first_saved = NX_INT()
        self.nxp_ENTRY.nxp_MCA.nxp_first_saved.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='first_saved',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_first_saved.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_first_saved.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-field',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_first_saved.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_MCA.nxp_last_saved = NX_INT()
        self.nxp_ENTRY.nxp_MCA.nxp_last_saved.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='last_saved',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_last_saved.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_last_saved.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-field',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_last_saved.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_MCA.nxp_reduction_coef = NX_NUMBER()
        self.nxp_ENTRY.nxp_MCA.nxp_reduction_coef.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='reduction_coef',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_reduction_coef.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_reduction_coef.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-field',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_reduction_coef.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_MCA.nxp_calib_a = NX_NUMBER()
        self.nxp_ENTRY.nxp_MCA.nxp_calib_a.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='calib_a',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_calib_a.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_calib_a.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-field',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_calib_a.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_MCA.nxp_calib_b = NX_NUMBER()
        self.nxp_ENTRY.nxp_MCA.nxp_calib_b.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='calib_b',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_calib_b.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_calib_b.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-field',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_calib_b.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_MCA.nxp_calib_c = NX_NUMBER()
        self.nxp_ENTRY.nxp_MCA.nxp_calib_c.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='calib_c',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_calib_c.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_NUMBER',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_calib_c.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-field',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_calib_c.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_MCA.nxp_ROI = NXnote()
        self.nxp_ENTRY.nxp_MCA.nxp_ROI.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='ROI',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_ROI.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXnote',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_ROI.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-group',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_ROI.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_MCA.nxp_ROI.nxp_roiN = NX_CHAR()
        self.nxp_ENTRY.nxp_MCA.nxp_ROI.nxp_roiN.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='roiN',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_ROI.nxp_roiN.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                numbered regions of interest, use an index number as part of the name''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-roi-field',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_ROI.nxp_roiN.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_MCA.nxp_ROI.nxp_roiN.nxp_description = NX_CHAR()
        self.nxp_ENTRY.nxp_MCA.nxp_ROI.nxp_roiN.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_ROI.nxp_roiN.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ``first_channel, last_channel``''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-roi-roin-attribute',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_ROI.nxp_roiN.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_MCA.nxp_ROI.nxp_roiN.nxp_first_channel = NX_INT()
        self.nxp_ENTRY.nxp_MCA.nxp_ROI.nxp_roiN.nxp_first_channel.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='first_channel',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_ROI.nxp_roiN.nxp_first_channel.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_ROI.nxp_roiN.nxp_first_channel.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-roi-roin-attribute',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_ROI.nxp_roiN.nxp_first_channel.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp_MCA.nxp_ROI.nxp_roiN.nxp_last_channel = NX_INT()
        self.nxp_ENTRY.nxp_MCA.nxp_ROI.nxp_roiN.nxp_last_channel.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='last_channel',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_ROI.nxp_roiN.nxp_last_channel.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_ROI.nxp_roiN.nxp_last_channel.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-mca-roi-roin-attribute',
                )
        self.nxp_ENTRY.nxp_MCA.nxp_ROI.nxp_roiN.nxp_last_channel.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )





        self.nxp_ENTRY.nxp_metadata = NXnote()
        self.nxp_ENTRY.nxp_metadata.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='metadata',
                )
        self.nxp_ENTRY.nxp_metadata.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXnote',
                )
        self.nxp_ENTRY.nxp_metadata.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                SPEC metadata (UNICAT-style #H and #V lines)                  This is a
                block that may be unique to SPEC files acquired at certain         APS
                beam lines.  Other facilities or instruments may use this block
                for storing key:value pairs of data where the values have suitable
                attributes (such as units).''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-group',
                )
        self.nxp_ENTRY.nxp_metadata.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_metadata.nxp_description = NX_CHAR()
        self.nxp_ENTRY.nxp_metadata.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_ENTRY.nxp_metadata.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-metadata-attribute',
                )
        self.nxp_ENTRY.nxp_metadata.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp_SPEC_user = NXuser()
        self.nxp_ENTRY.nxp_SPEC_user.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SPEC_user',
                )
        self.nxp_ENTRY.nxp_SPEC_user.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXuser',
                )
        self.nxp_ENTRY.nxp_SPEC_user.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-group',
                )
        self.nxp_ENTRY.nxp_SPEC_user.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp_SPEC_user.nxp_SPEC_user = NX_CHAR()
        self.nxp_ENTRY.nxp_SPEC_user.nxp_SPEC_user.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SPEC_user',
                )
        self.nxp_ENTRY.nxp_SPEC_user.nxp_SPEC_user.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                user name from first **#C** line in file header''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-spec-user-field',
                )
        self.nxp_ENTRY.nxp_SPEC_user.nxp_SPEC_user.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



        self.nxp_ENTRY.nxp__unrecognized = NXnote()
        self.nxp_ENTRY.nxp__unrecognized.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='_unrecognized',
                )
        self.nxp_ENTRY.nxp__unrecognized.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NXnote',
                )
        self.nxp_ENTRY.nxp__unrecognized.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Fallback for any SPEC data file control lines not otherwise placed
                into groups or fields elsewhere in this specification.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry-group',
                )
        self.nxp_ENTRY.nxp__unrecognized.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )

        self.nxp_ENTRY.nxp__unrecognized.nxp_comment = NX_CHAR()
        self.nxp_ENTRY.nxp__unrecognized.nxp_comment.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='comment',
                )
        self.nxp_ENTRY.nxp__unrecognized.nxp_comment.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry--unrecognized-attribute',
                )
        self.nxp_ENTRY.nxp__unrecognized.nxp_comment.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_ENTRY.nxp__unrecognized.nxp_description = NX_CHAR()
        self.nxp_ENTRY.nxp__unrecognized.nxp_description.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='description',
                )
        self.nxp_ENTRY.nxp__unrecognized.nxp_description.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-entry--unrecognized-attribute',
                )
        self.nxp_ENTRY.nxp__unrecognized.nxp_description.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )




        self.nxp_default = NX_CHAR()
        self.nxp_default.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='default',
                )
        self.nxp_default.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                .. index:: plotting              Declares which :ref:`NXentry` group
                contains the data to be shown by default.       It is needed to resolve
                ambiguity when more than one :ref:`NXentry` group exists.        The value
                is the name of the default :ref:`NXentry` group.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-attribute',
                )
        self.nxp_default.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_HDF5_Version = NX_CHAR()
        self.nxp_HDF5_Version.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='HDF5_Version',
                )
        self.nxp_HDF5_Version.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='false',
                )
        self.nxp_HDF5_Version.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Version of HDF5 library used in writing the file (as specified in
                :ref:`NXroot`).              Note this attribute is spelled with uppercase
                "V",       different than other version attributes.''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-attribute',
                )
        self.nxp_HDF5_Version.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_h5py_version = NX_CHAR()
        self.nxp_h5py_version.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='h5py_version',
                )
        self.nxp_h5py_version.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_h5py_version.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                version of h5py Python package used to write this HDF5 file''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-attribute',
                )
        self.nxp_h5py_version.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_SPEC_file = NX_CHAR()
        self.nxp_SPEC_file.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SPEC_file',
                )
        self.nxp_SPEC_file.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_SPEC_file.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                original SPEC data file name from **#F** line in file header''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-attribute',
                )
        self.nxp_SPEC_file.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_SPEC_date = NX_CHAR()
        self.nxp_SPEC_date.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SPEC_date',
                )
        self.nxp_SPEC_date.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_SPEC_date.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                date from **#D** line in file header, in ISO8601 format''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-attribute',
                )
        self.nxp_SPEC_date.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_SPEC_epoch = NX_INT()
        self.nxp_SPEC_epoch.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SPEC_epoch',
                )
        self.nxp_SPEC_epoch.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_SPEC_epoch.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                UNIX time epoch from **#E** line in file header''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-attribute',
                )
        self.nxp_SPEC_epoch.nxp_required= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_SPEC_comments = NX_CHAR()
        self.nxp_SPEC_comments.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SPEC_comments',
                )
        self.nxp_SPEC_comments.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_SPEC_comments.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                any **#C** lines in file header, stored as one string with newlines
                between comments''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-attribute',
                )
        self.nxp_SPEC_comments.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )


        self.nxp_SPEC_num_headers = NX_INT()
        self.nxp_SPEC_num_headers.nxp_name= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='SPEC_num_headers',
                )
        self.nxp_SPEC_num_headers.nxp_type= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='NX_INT',
                )
        self.nxp_SPEC_num_headers.nxp_optional= Quantity(
                type=str,
                shape=[],
                description='''
                ''',
                default='true',
                )
        self.nxp_SPEC_num_headers.nxp_documentation= Quantity(
                type=str,
                shape=[],
                description='''
                                Number of header sections found in the spec file''',
                default='https://manual.nexusformat.org/classes/contributed_definitions/NXspecdata.html#nxspecdata-attribute',
                )
        self.nxp_SPEC_num_headers.nxp_optional= Quantity(
                type=bool,
                shape=[],
                description='''
                ''',
                default=True,
                )



m_package.__init_metainfo__()
#None